<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蕾姆酱美图瀑布流</title>
      <link href="//pbl.html"/>
      <url>//pbl.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>呐呐！香香甜甜的蕾姆酱！(&#x2F;≧▽≦)&#x2F;<br>自己写的初版，留个纪念qwq</p><span id="more"></span><style>#RemApp{    transition: all .3s ease-in;}.box{    position: relative;    transition: all .3s ease-in;    margin: 0 auto;}#RemApp .box .imgbox{    width: 260px;    height: auto;    /* float: left; */    display: inline-block;    vertical-align: top;    margin: 5px 5px;    border-radius: 10px;    box-shadow: 3px 3px 5px #999;    transition: all .3s ease-in;    vertical-align: top;}#RemApp .box .imgbox .content .ksImg{    width: 100%;    border-radius: 10px;}</style><blockquote><p>图片来源自网络，如果侵犯了您的权益，请及时联系我哦！联系QQ: 1347993953</p></blockquote><div id="RemApp">    <div class="box clearfix">    </div></div><script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js"></script><script src="./js/pbl.js"></script>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsDelivr缓存问题</title>
      <link href="//code-1.html"/>
      <url>//code-1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>备忘！JsDelivr缓存不刷新怎么办！</p><span id="more"></span><p>今天修改图片，Push到仓库后图片一直不刷新，然后就去查了一下，为了以防万一还是自己记下来比较好！<br>想要刷新缓存的时候可以通过访问一个 url 实现：<br>就是将cdn 改成 purge<br>举个例子吧！</p><pre><code class="highlight url">https://cdn.jsdelivr.net/gh/kasisama/Blog_images@main/background/Rem.png</code></pre><p>改为</p><pre><code class="highlight url">https://purge.jsdelivr.net/gh/kasisama/Blog_images@main/background/Rem.png</code></pre><p>即可</p><p><img src="https://tva1.sinaimg.cn/large/006RYYI7ly1h4bbmt79pxj30bn07jmxn.jpg"></p><p>重新访问一下网址查看刷新是否成功！</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好！屏幕前的用户！</title>
      <link href="/2022/04/08/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C%EF%BC%81/"/>
      <url>/2022/04/08/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>欢迎来到<a href="https://www.kasisama.top/">咔斯Sama</a>の小窝！</p><span id="more"></span><h2 id="欢迎你呀！"><a href="#欢迎你呀！" class="headerlink" title="欢迎你呀！"></a>欢迎你呀！</h2><p>嘻嘻，咔斯的博客正式迁移辣！<br>2022.4.8日，因服务器和域名到期，原博客地址<a href="http://www.kasisama.top迁移至www.ksmmhy.xyz/">www.kasisama.top迁移至www.ksmmhy.xyz</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>仙玉尘缘-指令集合大全</title>
      <link href="/2022/02/14/%E4%BB%99%E7%8E%89%E5%B0%98%E7%BC%98-%E6%8C%87%E4%BB%A4%E9%9B%86%E5%90%88%E5%A4%A7%E5%85%A8/"/>
      <url>/2022/02/14/%E4%BB%99%E7%8E%89%E5%B0%98%E7%BC%98-%E6%8C%87%E4%BB%A4%E9%9B%86%E5%90%88%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用指令在这里！</p><span id="more"></span><h1 id="基础功能指令"><a href="#基础功能指令" class="headerlink" title="基础功能指令"></a><strong>基础功能指令</strong></h1><p>注册+昵称#性别</p><p>注册一个游戏账户（每个QQ号只能注册一个）</p><p>种族信息</p><p>查看当前的种族信息</p><p>属性</p><p>查看当前的人物属性</p><p>信息</p><p>查看当前人物信息</p><p>钱包</p><p>查看当前货币数量</p><p>位置</p><p>查看当前所在地图</p><p>背包</p><p>查看我的背包物品</p><p>签到</p><p>每天签到一次</p><p>闭关</p><p>开始闭关修炼</p><p>出关</p><p>结束闭关修炼</p><p>突破</p><p>突破境界（游戏内属于境界制，没有等级制，你可以把突破理解为升级）</p><p>商店</p><p>查看当前所在地图上的商店</p><p>购买+物品</p><p>购买当前地图上商店内的物品</p><p>购买+物品*数量</p><p>购买当前地图上商店内的物品（多个数量购买）</p><p>使用+物品</p><p>使用背包内的物品</p><p>使用+物品*数量</p><p>使用背包内的物品（多个数量使用）</p><p>查询+物品名</p><p>查询指定物品</p><p>查询+怪物名</p><p>查询指定怪物</p><p>对话+NPC名称</p><p>和当前地图上的指定NPC对话</p><p>XX+排行榜</p><p>此功能需要自行配置【排行榜配置.ini】文件</p><p>加入队伍+队伍ID</p><p>加入一支队伍（需队员未满员）</p><p>开启自动战斗</p><p>开启自动战斗（开启后，每次打怪的战斗都会自动计算结果，不可使用功法）</p><p>关闭自动战斗</p><p>关闭自动战斗（关闭后，每次打怪的战斗都需要手动发送攻击，可使用功法）</p><p>本源</p><p>查看自己已经感悟的本源</p><p>感悟本源</p><p>感悟本源，随机获得本源</p><h1 id="活动功能指令"><a href="#活动功能指令" class="headerlink" title="活动功能指令"></a>活动功能指令</h1><p>异界战场</p><p>查看当前异界战场活动的参与数据</p><p>世界BOSS</p><p>查看当前降临的世界BOSS</p><p>世界攻击</p><p>攻击世界BOSS</p><p>世界攻击+功法名</p><p>攻击世界BOSS，使用功法</p><h1 id="任务功能指令"><a href="#任务功能指令" class="headerlink" title="任务功能指令"></a>任务功能指令</h1><p>主线任务</p><p>查看当前主线剧情任务</p><p>支线任务</p><p>查看当前随机的支线任务</p><p>完成主线</p><p>完成主线剧情任务</p><p>完成支线</p><p>完成随机支线任务</p><h1 id="地图功能指令"><a href="#地图功能指令" class="headerlink" title="地图功能指令"></a><strong>地图功能指令</strong></h1><p>界域</p><p>查看游戏内的所有界域</p><p>传送+界域名</p><p>传送进入指定的界域内（消耗传送时间）</p><p>地图</p><p>查看当前所在界域内的所有地图</p><p>进入+地图名</p><p>进入指定的地图（需在当前界域内）</p><h1 id="战斗功能指令"><a href="#战斗功能指令" class="headerlink" title="战斗功能指令"></a><strong>战斗功能指令</strong></h1><p>探索</p><p>在当前位置探索怪物（可能遇到机缘）</p><p>攻击</p><p>攻击探索遇到的怪物</p><p>攻击+功法名</p><p>使用功法攻击遇到的怪物</p><h1 id="沙盒功能指令"><a href="#沙盒功能指令" class="headerlink" title="沙盒功能指令"></a><strong>沙盒功能指令</strong></h1><p>采集</p><p>在当前地图上采集草药</p><p>垂钓</p><p>在当前地图上钓取鱼类</p><p>挖矿</p><p>在当前地图上挖取矿石</p><p>收货</p><p>结束采集、垂钓、挖矿</p><h1 id="炼丹炼器功能指令"><a href="#炼丹炼器功能指令" class="headerlink" title="炼丹炼器功能指令"></a><strong>炼丹炼器功能指令</strong></h1><p>丹方</p><p>查看可炼制的丹药的丹方</p><p>器谱</p><p>查看可炼制的器材的器谱</p><p>炼丹+丹药名</p><p>炼制指定的丹药</p><p>炼器+器材名</p><p>炼制指定的器材</p><p>收丹</p><p>收取当前炼制的丹药</p><p>凝器</p><p>凝炼当前炼制的器材</p><p>升级炼丹</p><p>升级炼丹等级</p><p>升级炼器</p><p>升级炼器等级</p><p>炼丹状态</p><p>查看当前炼丹的状态</p><p>炼器状态</p><p>查看当前炼器的状态</p><h1 id="邮箱功能指令"><a href="#邮箱功能指令" class="headerlink" title="邮箱功能指令"></a><strong>邮箱功能指令</strong></h1><p>邮箱</p><p>查看我的邮箱</p><p>阅读+邮件ID</p><p>阅读指定的邮件</p><p>收件+邮件ID</p><p>收取指定的邮件</p><p>删件+邮件ID</p><p>删除指定的邮件</p><h1 id="组队功能指令"><a href="#组队功能指令" class="headerlink" title="组队功能指令"></a><strong>组队功能指令</strong></h1><p>队伍列表</p><p>查看所有队伍信息</p><p>创建队伍</p><p>创建一支队伍</p><p>解散队伍</p><p>解散一支队伍（需是队长）</p><p>退出队伍</p><p>退出当前队伍（需是队员）</p><p>查看队伍</p><p>查看当前所在队伍</p><h1 id="功法功能指令"><a href="#功法功能指令" class="headerlink" title="功法功能指令"></a><strong>功法功能指令</strong></h1><p>我的功法</p><p>查看自己已经学习的功法</p><p>查看功法+功法名</p><p>查看指定的功法信息</p><h1 id="法宝功能指令"><a href="#法宝功能指令" class="headerlink" title="法宝功能指令"></a><strong>法宝功能指令</strong></h1><p>法宝</p><p>查看当前祭出的法宝信息</p><p>收回</p><p>收回当前已经祭出的法宝</p><p>法宝背包</p><p>查看我的法宝背包内的法宝</p><p>查询+法宝名</p><p>查询指定法宝（支持查询其他人的法宝）</p><p>强化+法宝名#强化材料</p><p>强化法宝背包内的法宝（优先扣除专属强化材料）</p><p>精炼+法宝名#精炼材料</p><p>精炼法宝背包内的法宝（优先扣除专属精炼材料）</p><p>预强化+法宝名#强化材料</p><p>预先查看强化法宝数据</p><p>预精炼+法宝名#精炼材料</p><p>预先查看精炼法宝数据</p><h1 id="客服功能指令"><a href="#客服功能指令" class="headerlink" title="客服功能指令"></a><strong>客服功能指令</strong></h1><p>充值货币1+QQ#数量</p><p>客服充值指令</p><p>充值货币2+QQ#数量</p><p>客服充值指令</p><p>充值货币3+QQ#数量</p><p>客服充值指令</p><p>充值货币4+QQ#数量</p><p>客服充值指令</p><p>充值物品+QQ#物品名*数量</p><p>客服充值指令</p><p>© 版权声明</p><p>文章版权归微香社区所有，未经允许请勿转载，谢谢~</p><p>THE END</p>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宠物养成RE 更新日志集合</title>
      <link href="//petupdata.html"/>
      <url>//petupdata.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>插件下载更新地址：<a href="https://url48.ctfile.com/d/11320748-43394040-e9da61">城通网盘</a> （访问密码：6725）</strong></p><span id="more"></span><h3 id="2-3-5-4-2022-7-1"><a href="#2-3-5-4-2022-7-1" class="headerlink" title="2.3.5.4 2022.7.1"></a><strong>2.3.5.4</strong> 2022.7.1</h3><ol><li><b><font color="Green">[修复]</font></b>宠物学习、锻炼、健身等加成和最终效果错乱</li><li><b><font color="Green">[修复]</font></b>宠物打工如果打工状态为空，将按照一个固定值进行奖励</li><li><b><font color="Green">[修复]</font></b>控制台广告不显示</li><li><b><font color="Green">[修复]</font></b>无饱食也可以宠物打工</li><li><b><font color="Green">[修复]</font></b>交易无法添加物品及显示错乱</li><li><b><font color="Aqua">[适配]</font></b>宠物交易在开启货币对接的情况下已可以使用</li><li><b><font color="Red">[新增]</font></b>控制台发放奖励的通知信息会在每次成功发放奖励后保存通知信息</li></ol><h3 id="2-3-5-3-2022-4-20"><a href="#2-3-5-3-2022-4-20" class="headerlink" title="2.3.5.3 2022.4.20"></a><strong>2.3.5.3</strong> 2022.4.20</h3><ol><li><b><font color="Red">[新增]</font></b>自动更新！！！</li><li><b><font color="Blue">[优化]</font></b>控制台玩家数据搜索功能强化</li><li><b><font color="Blue">[优化]</font></b>控制台玩家数据适配对接后的货币</li><li><b><font color="Blue">[优化]</font></b>排行消息排版</li><li><b><font color="Green">[修复]</font></b>无法完成健身的bug</li><li><b><font color="Green">[修复]</font></b>排行显示错误的bug</li></ol><p><strong>2.3.5.2</strong> 2022.4.19</p><ol><li><b><font color="Green">[修复]</font></b>宠物银行无法转账bug</li><li><b><font color="Green">[修复]</font></b>打开礼包时如果没有填数量就会崩溃</li><li><b><font color="Green">[修复]</font></b>商店购买物品全是好感</li></ol><p><strong>2.3.5.1</strong> 2022.4.19</p><ol><li><b><font color="Red">[新增]</font></b>宠物加成系统，在宠物配置那里设置</li><li><b><font color="Orange">[重构]</font></b>宠物打工时将大幅扣除心情</li><li><b><font color="Green">[修复]</font></b>宠物对接银行失效的问题</li><li><b><font color="Green">[修复]</font></b>宠物进化时属性显示错误</li><li><b><font color="Blue">[优化]</font></b>优化 查看宠物 消息</li><li><b><font color="grey">[删除]</font></b>宠物签到点赞</li></ol><p><strong>2.3.5</strong> 2022.3.26</p><ol><li>修复所有bug</li><li>打工支持自定义</li><li>新增宠物管理拓展</li></ol><p><strong>2.3.3.3</strong> 2022.3.6</p><ol><li>修复紧急bug</li><li>修复控制台闪退bug</li><li>控制台优化</li><li>修复宠物使用会导致崩溃的bug</li><li>修复宠物猜拳口令失效</li><li>修复开箱后所需物品不消失的bug</li><li>新增物品属性禁止交易，开启后物品无法交易</li></ol><p><strong>2.3.2</strong> 2022.2.27</p><ol><li>修复控制台拓展显示</li><li>修复频道支持拓展的问题</li><li>修复领养宠物不能翻页</li><li>修复宠物健身无响应</li><li>修复好感商店扣钱和显示问题</li><li>修复群开关发放奖励bug</li><li>新增单次购买上限(限制单次批量购买的数量，如果数量较大就可能会出现错误，建议10~30以内)</li></ol><p><strong>2.3.1</strong> 2022.2.25</p><ol><li>修复控制台错误分支bug</li><li>修复宠物银行bug</li><li>任何状态都可使用宠物商店</li><li>宠物进化觉醒清空成长改为减去成长</li><li>新增频道支持【拓展功能，目前只限小栗子框架】</li><li>新增家族神树属性自定义，【老用户请前往 控制台-互动-杂项 填写神树相关的设置，新用户用自带数据即可】</li><li>新增宠物进化觉醒需要好感限制【老用户请前往控制台填写进化好感，新用户用自带数据即可】</li><li>新增好感商店【老用户请前往 指令配置.ini里添加一个好感商店的指令，具体格式见公告尾】</li><li>新增新手积累七天签到奖励【老用户可下载最新数据包，单独提取出[新手签到配置.ini]文件安装】</li><li>注： 【重要】宠物进化觉醒需要好感限制，必须要配置，否则会出错（新用户请忽略） 【重要】好感商店指令的格式为：（老用户不配置将无法使用好感商店） [好感商店] 指令&#x3D;好感商店</li></ol><p><strong>2.3</strong> 2022.2.8</p><ol><li>重置整体框架</li><li>删除宠物逃跑功能</li><li>删除宠物重生道具</li><li>拓展授权方式已改为买断制，之前购买过的授权可以继续在老版本使用</li><li>UI重做</li><li>支持指令自定义（老版本升级，请把2.3压缩包里的“指令配置.ini”解压到数据目录）</li><li>优化部分控制台功能，提高体验</li><li>修复所有已知bug，同时重置后的初期几个版本可能不太稳定，需要大家帮助寻找bug，感谢大家的支持</li><li>老版本升级如果遇到图片失效的情况，请检查数据目录里的图片文件夹，新版本将图片文件夹“宠物养成”改为了“图片”</li></ol><p><strong>2.2.9</strong> 2021.10.27</p><ol><li>修复宠物时间系统</li><li>修复整体稳定性</li><li>修复宠物找回</li></ol><p><strong>2.2.8</strong> 2021.08.30</p><ol><li>修复所有已知bug</li><li>宠物银行拓展发布，请加群进行下载。</li></ol><p><strong>2.2.7</strong> 2021.08.29</p><ol><li>修复所有已知bug</li></ol><p><strong>2.2.6</strong> 2021.08.28</p><ol><li>修复所有已知bug</li><li>控制台优化</li></ol><p><strong>2.2.5</strong> 2021.08.10</p><ol><li>修复所有已知bug</li><li>重置交易系统</li></ol><p><strong>2.2.3</strong> 2021.06.22</p><ol><li>修复所有已知bug</li><li>新增控制台数据热更新（不用再频繁点击数据重载）</li></ol><p><strong>2.2</strong> 2021.04.23</p><ol><li>修复所有已知bug</li><li>重构整个游戏基层</li><li>新增放生宠物</li><li>新增发放补偿</li><li>单个宠物的打工、健身、学习、散步图片</li><li>控制台重塑，优化体验</li><li>宠物打工、健身支持图片</li><li>修复宠物锻炼完成后数据出错的问题</li></ol><p><strong>2.1.5.6</strong> 2020.08.25</p><ol><li>修复创建家族崩溃bug</li><li>修复进化觉醒饱食bug</li><li>修复攻击自己的bug</li><li>新增宠物饱食上限属性</li><li>新增指令：查看宠物＋宠物名</li><li>控制台新增点赞机器人QQ，请前往配置</li></ol><p><strong>2.1.5.5</strong> 2020.08.9</p><ol><li>修复数组崩溃问题</li><li>正式采用新分群机制</li><li>修复艾特失效问题</li><li>优化插件整体</li></ol><p><strong>2.1.5</strong> 2020.06.14</p><ol><li>修复宠物状态bug</li><li>修复宠物家族bug</li><li>修复学习限制bug</li><li>修复商店购买礼包bug</li><li>修复打开随机礼包bug</li><li>新增宠物进化分支</li><li>新增宠物健身</li></ol><p><strong>2.1.4</strong> 2020.06.03</p><ol><li>修复查看商品bug</li><li>修复一些状态bug</li><li>新增家族列表(指令)</li><li>新增家族成员(指令)</li><li>控制台玩家配置新增玩家QQ搜索</li><li>控制台物品配置新增快捷添加至商店</li><li>注：新增的两个指令需要在【屏蔽消息前缀】里添加上，不添加需要加上前缀使用</li></ol><p><strong>2.1.3</strong> 2020.05.27</p><ol><li>修复重启拓展停用bug</li><li>修复创建家族崩溃bug</li><li>修复接受交易货币bug</li></ol><p><strong>2.1.2</strong> 2020.05.18</p><ol><li>优化DLC用户的体验</li><li>修复所有已知BUG</li></ol><p><strong>2.1.1</strong> 2020.05.14</p><ol><li>修复宠物登录问题</li><li>修复拓展刷新问题</li></ol><p><strong>2.1.0</strong> 2020.05.14</p><ol><li>修复无法创建家族bug</li><li>修复宠物散步成长bug</li><li>开发DLC，欢迎各位玩家和开发者</li></ol><p><strong>2.0.9</strong> 2020.05.8</p><ol><li>修复宠物打工bug</li><li>优化控制台日志</li></ol><p><strong>2.0.8</strong> 2020.05.6</p><ol><li>修复对接货币失效bug</li><li>修复宠物交易导致崩溃bug</li><li>新增物品获取类型，请自行前往控制台配置</li></ol><p><strong>2.0.7</strong> 2020.05.5</p><ol><li>修复货币bug</li><li>修复宠物打工控制台bug</li><li>即将开放DLC，玩家可自己制作DLC</li></ol><p><strong>2.0.6</strong> 2020.05.4</p><ol><li>修复新增货币对接导致的bug</li><li>优化摸头、学习、锻炼</li><li>新增成长类型的物品</li><li>新增宠物打工</li></ol><p><strong>2.0.5</strong> 2020.05.4</p><ol><li>修复神树果实无法批量使用bug</li><li>修复重复领养宠物bug</li><li>修复重复领养宠物bug</li><li>新增货币对接</li><li>新增宠物交易</li><li>修复宠物抽奖抽到货币bug</li><li>优化控制台编辑框显示</li></ol><p><strong>2.0.4</strong> 2020.04.29</p><ol><li>修复宠物偷袭bug</li><li>神树果实已可使用</li><li>我的宠物显示宠物种类</li><li>修复批量使用礼包时只获得一次奖励bug</li></ol><p><strong>2.0.3</strong> 2020.04.27</p><ol><li>修复错误饱食心情扣除间隔bug</li><li>修改宠物治疗无濒死状态时也可使用</li><li>检测更新替换为自动更新</li></ol><p><strong>2.0.2</strong> 2020.04.27</p><ol><li>修复宠物逃跑后无法找回bug</li><li>控制台新增饱食心情扣除间隔选项</li><li>控制台新增防御的物品类型</li></ol><p><strong>2.0.1</strong> 2020.04.26</p><ol><li>修复宠物偷袭血量扣空依然可活动bug</li><li>修改宠物饥饿后仍可使用部分指令</li><li>控制台新增宠物钓鱼上钩几率</li><li>修复不会定时扣饱食度bug</li><li>修复检测更新bug</li></ol><p><strong>2.0.0</strong> 2020.04.25</p><ol><li>修复宠物偷袭bug</li><li>修复宠物改名bug</li><li>控制台新增删除玩家</li></ol><p><strong>1.1.9</strong> 2020.04.22</p><ol><li>不忘初心，重新启动</li><li>具体功能请自行体验</li></ol><p><strong>1.1.8</strong> 2019.04.13</p><ol><li>重写后因BUG过多已经下架。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宠物养成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuem面试题整理</title>
      <link href="//webNotes-VueInterview.html"/>
      <url>//webNotes-VueInterview.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue面试题，转载的qwq</p><span id="more"></span><h4 id="一-说几个vue中的指令和它的用法？"><a href="#一-说几个vue中的指令和它的用法？" class="headerlink" title="一. 说几个vue中的指令和它的用法？"></a>一. 说几个vue中的指令和它的用法？</h4><p><code>v-model</code> 双向数据绑定；<br><code>v-for</code> 循环；<br><code>v-if</code>, <code>v-show</code> 显示与隐藏；<br><code>v-bind</code> 动态绑定属性<br><code>v-on</code> 事件绑定；<br><code>v-once</code> 只绑定一次。</p><h4 id="二-v-on指令可以同时监听多个函数吗"><a href="#二-v-on指令可以同时监听多个函数吗" class="headerlink" title="二. v-on指令可以同时监听多个函数吗?"></a>二. v-on指令可以同时监听多个函数吗?</h4><p>可以, <code>v-on</code>的事件监听类似于DOM原生api添加事件监听者<code>addEventListener</code><br><code>v-on</code> 可以给一个事件同时绑定多个函数，也可以一次绑定多个事件<br><code>v-bind</code> 可以一次绑定多个属性，使用<code>v-bind=&#123;&#125;</code>结构来实现</p><h4 id="三-vue中v-if和v-show有什么区别"><a href="#三-vue中v-if和v-show有什么区别" class="headerlink" title="三. vue中v-if和v-show有什么区别"></a>三. vue中v-if和v-show有什么区别</h4><p><code>v-if</code> 的原理是根据判断条件来动态的进行增删DOM元素, 比较耗费性能和内存, <code>频繁显示隐藏不建议使用</code><br><code>v-show</code> 是根据判断条件来动态的进行显示和隐藏元素, 通过设置样式<code>display</code>为<code>block</code>和<code>none</code>来实现, <code>适用于频繁显示隐藏</code>的情况</p><h4 id="四-vue循环中为什么使用key"><a href="#四-vue循环中为什么使用key" class="headerlink" title="四. vue循环中为什么使用key?"></a>四. vue循环中为什么使用key?</h4><p>需要使用<code>key</code>来给循环中每个节点做一个<code>唯一标识</code>，要保证一个循环中<code>key</code>的值各不相同, 以避免vue中的<code>重用机制</code>造成可能的<code>渲染异常</code>.  从底层来看, <code>key</code>属性主要为了<code>Diff算法</code>就可以正确的识别此节点。并<code>高效的更新虚拟DOM</code>。</p><h4 id="五-vue中数据绑定是怎么实现的？双向绑定指令v-model的本质是什么？"><a href="#五-vue中数据绑定是怎么实现的？双向绑定指令v-model的本质是什么？" class="headerlink" title="五. vue中数据绑定是怎么实现的？双向绑定指令v-model的本质是什么？"></a>五. vue中数据绑定是怎么实现的？双向绑定指令<code>v-model</code>的本质是什么？</h4><p>Vue组件<code>data</code>中的数据在组件创建时，都会被<code>Object.defineProperty</code>改造为<code>set</code>,<code>get</code>类型的属性，当数据发生变化时<code>set</code>方法就会调用，<code>set</code>方法中添加了重新渲染的代码。<br><code>v-model</code>相当于 <code>v-bind:value</code>  加 <code>v-on:input</code></p><h4 id="六-分别简述computed和watch的使用场景"><a href="#六-分别简述computed和watch的使用场景" class="headerlink" title="六. 分别简述computed和watch的使用场景"></a>六. 分别简述computed和watch的使用场景</h4><ul><li><code>computed</code>:<br>　　　　当一个属性受多个属性影响的时候就需要用到computed<br>　　　　例子： 购物车商品结算的时候</li><li><code>watch</code>:<br>　　　　当一条数据影响多条数据的时候就需要用watch<br>　　　　例子：搜索数据</li></ul><h4 id="七-列举一下Vue组件生命周期函数，什么时候需要在destroyed中写代码？"><a href="#七-列举一下Vue组件生命周期函数，什么时候需要在destroyed中写代码？" class="headerlink" title="七. 列举一下Vue组件生命周期函数，什么时候需要在destroyed中写代码？"></a>七. 列举一下Vue组件生命周期函数，什么时候需要在destroyed中写代码？</h4><p><code>beforeCreate</code>    <code>created</code><br><code>beforeMount</code>     <code>mounted</code><br><code>beforeUpdate</code>    <code>updated</code><br><code>beforeDestroy</code>   <code>destroyed</code><br>当前页面有事件监听器或者计时器时,需要在<code>destroyed</code>中取消或销毁</p><h4 id="八-vue的组件配置对象中都有哪些常用字段？分别是什么作用？"><a href="#八-vue的组件配置对象中都有哪些常用字段？分别是什么作用？" class="headerlink" title="八. vue的组件配置对象中都有哪些常用字段？分别是什么作用？"></a>八. vue的组件配置对象中都有哪些常用字段？分别是什么作用？</h4><p><code>Data</code>          组件中的数据<br><code>props</code>         组建的属性数据,接收父组件的传值<br><code>computed</code>      计算属性<br><code>components</code>    定义或引用子组件<br><code>methods</code>       自定义函数<br><code>watch</code>         属性监听<br><code>filters</code>       数据过滤器<br><code>mounted</code>       等生命周期函数</p><h4 id="九-lt-keep-alive-gt-lt-x2F-keep-alive-gt-的作用是什么"><a href="#九-lt-keep-alive-gt-lt-x2F-keep-alive-gt-的作用是什么" class="headerlink" title="九. &lt;keep-alive&gt;&lt;&#x2F;keep-alive&gt;的作用是什么?"></a>九. &lt;keep-alive&gt;&lt;&#x2F;keep-alive&gt;的作用是什么?</h4><p><code>keep-alive</code> 是 Vue 内置的一个组件，可以使被包含的组件<code>保留状态</code>，或<code>避免重新渲染</code>。</p><h4 id="十-vue组件中如何获取dom元素"><a href="#十-vue组件中如何获取dom元素" class="headerlink" title="十. vue组件中如何获取dom元素?"></a>十. vue组件中如何获取dom元素?</h4><p>使用<code>ref</code>属性获取, 在组件模板元素中添加<code>ref</code>属性, 在js中用<code>this.$refs</code>获取</p><h4 id="十一-Vue-nextTick-方法有什么作用？"><a href="#十一-Vue-nextTick-方法有什么作用？" class="headerlink" title="十一. Vue.nextTick()方法有什么作用？"></a>十一. Vue.nextTick()方法有什么作用？</h4><p>当vue中动态数据修改时,会导致界面的更新,而界面的更新属于<code>异步更新</code>, 当打印界面数据时, 异步更新尚未完成, 所以打印结果是更新之前的数据<br><code>Vue.nextTick</code>表示<code>异步更新函数</code>, 其参数是<code>更新完成的回调函数</code></p><h4 id="十二-如何让CSS只在当前组件中起作用-vue中如何实现样式隔离-？"><a href="#十二-如何让CSS只在当前组件中起作用-vue中如何实现样式隔离-？" class="headerlink" title="十二. 如何让CSS只在当前组件中起作用(vue中如何实现样式隔离)？"></a>十二. 如何让CSS只在当前组件中起作用(vue中如何实现样式隔离)？</h4><p>在组件中的style前面加上<code>scoped</code>, 如果父子组件都有样式隔离, 则父组件中无法修改子组件样式, 此时可用样式穿透修改<br>vue2: 父组件选择器<code>&gt;&gt;&gt;</code>子组件选择器{子组件样式}<br>vue3:  <code>:deep</code>(子组件选择器)</p><h4 id="十三-vue中如何处理跨域请求"><a href="#十三-vue中如何处理跨域请求" class="headerlink" title="十三.  vue中如何处理跨域请求"></a>十三.  vue中如何处理跨域请求</h4><p>vue中处理跨域请求一般要设置代理服务器实现跨域,<br>在vue项目的根目录中的<code>vue.config.js</code>配置文件,在<code>devServer</code>字段中配置服务器代理<br>在使用<code>axios</code>请求数据时直接使用代理地址    </p><h4 id="十四-axios和ajax的区别："><a href="#十四-axios和ajax的区别：" class="headerlink" title="十四. axios和ajax的区别："></a>十四. axios和ajax的区别：</h4><p><code>axios</code>是通过<code>promise</code>实现对<code>ajax</code>技术的一种封装，就像<code>jQuery</code>实现<code>ajax</code>封装一样。<br>简单来说： <code>ajax</code>技术实现了网页的局部数据刷新，<code>axios</code>实现了对<code>ajax</code>的封装。 </p><h4 id="十五-vue中有哪些数据传递方式"><a href="#十五-vue中有哪些数据传递方式" class="headerlink" title="十五. vue中有哪些数据传递方式?"></a>十五. vue中有哪些数据传递方式?</h4><ol><li><code>组件传值</code>: 父传子,通过<code>props</code>属性或<code>slot</code>插槽传递,  子传父,通过<code>$emit</code>发射自定义事件传递, 非父子,通过<code>bus</code>总线传递</li><li><code>路由传值</code>: 可通过<code>url路径传值</code>和<code>编程式导航对象传值</code></li><li><code>vuex状态管理传值</code></li></ol><h4 id="十六-vue中路由如何传值"><a href="#十六-vue中路由如何传值" class="headerlink" title="十六. vue中路由如何传值?"></a>十六. vue中路由如何传值?</h4><ol><li>使用url拼接字符串的形式传值      使用<code>$route.query</code>接收</li><li>使用友好URL传值                   使用<code>$route.params</code>接收</li><li>使用命名路由<code>params</code>字段传值     使用<code>$route.params</code>接收</li><li>使用<code>query</code>对象传值                使用<code>$route.query</code>接收</li></ol><h4 id="十七-vue组件中如何监听路由"><a href="#十七-vue组件中如何监听路由" class="headerlink" title="十七. vue组件中如何监听路由?"></a>十七. vue组件中如何监听路由?</h4><p>在组件的watch监听器中对<code>$route</code>这个字段进行监听<br>全局监听路由在<code>app.vue</code>组件中,<code>watch</code>监听<code>$route</code>可以监听全局路由<br>也可以在全局路由守卫<code>beforeEach</code>函数中操作全局路由</p><h4 id="十八-vue路由的钩子函数有哪些"><a href="#十八-vue路由的钩子函数有哪些" class="headerlink" title="十八. vue路由的钩子函数有哪些?"></a>十八. vue路由的钩子函数有哪些?</h4><p>全局的路由钩子函数：<code>beforeEach</code>、<code>afterEach</code><br>单个的路由钩子函数：<code>beforeEnter</code><br>组件内的路由钩子函数：<code>beforeRouteEnter</code>、<code>beforeRouteLeave</code>、<code>beforeRouteUpdate</code></p><h4 id="十九-介绍以下vue组件内的路由守卫-即路由的生命周期-x2F-钩子函数-，有哪些参数（to，from，next）"><a href="#十九-介绍以下vue组件内的路由守卫-即路由的生命周期-x2F-钩子函数-，有哪些参数（to，from，next）" class="headerlink" title="十九. 介绍以下vue组件内的路由守卫(即路由的生命周期&#x2F;钩子函数)，有哪些参数（to，from，next）"></a>十九. 介绍以下vue组件内的路由守卫(即路由的生命周期&#x2F;钩子函数)，有哪些参数（to，from，next）</h4><p>vue组件中的路由钩子方法有<br><code>beforeRouteEnter</code>    进入路由前调用。这里组件还未创建, 不能使用this<br><code>beforeRouteUpdate</code>  路由更新之前被调用, 组件不会重新初始化, 可以使用this<br><code>beforeRouteLeave</code>  离开路由之前被调用，可以访问里面的this属性<br>方法中都有三个参数:<br><code>to</code> :即将要进入的目标路由对象；<br><code>from</code> :当前导航即将要离开的路由对象；<br><code>next</code> ：调用该方法后，才能进入下一个路由钩子函数</p><h4 id="二十-vue中怎么实现非父子组件之间的传值？"><a href="#二十-vue中怎么实现非父子组件之间的传值？" class="headerlink" title="二十. vue中怎么实现非父子组件之间的传值？"></a>二十. vue中怎么实现非父子组件之间的传值？</h4><p>在项目规模不是特别大时，可以创建一个空组件作为<code>总线</code>，项目中其他组件都可以通过<code>总线</code>进行传值。<br>大大型项目中，可以使用<code>vuex</code>进行数据管理，将数据统一放在<code>store</code>中进行管理。<br>也可以在路由跳转时,通过<code>路由传值</code></p><h4 id="二十一-vue中如何实现父子组件间的双向数据绑定"><a href="#二十一-vue中如何实现父子组件间的双向数据绑定" class="headerlink" title="二十一. vue中如何实现父子组件间的双向数据绑定?"></a>二十一. vue中如何实现父子组件间的双向数据绑定?</h4><p>Vue中父子组件双向绑定利用父子组件传值原理,<br>父组件向子组件传值, 通过给子组件定义<code>value</code>属性来接收传值<br>子组件向父组件传值, 通过子组件<code>$emit</code>发射名为<code>input</code>的自定义事件<br>在父组件中使用子组件标签时, 在子组件标签上通过<code>v-model</code>绑定父组件数据,实现父子组件的双向绑定</p><h4 id="二十二-vuex如何使用"><a href="#二十二-vuex如何使用" class="headerlink" title="二十二. vuex如何使用?"></a>二十二. vuex如何使用?</h4><p>首先在项目中 <code>npm install vuex</code> 安装<br>新建<code>vuex</code>状态管理文件,导入<code>vuex</code>并添加状态数据<br>在组件中使用<code>mapState()</code>函数映射状态数据并使用<br>在组件中使用<code>commit()</code>函数提交申请修改状态数据</p><h4 id="二十三-Vuex的核心概念有哪些？组件如何使用store中的数据如何改变store中的数据？"><a href="#二十三-Vuex的核心概念有哪些？组件如何使用store中的数据如何改变store中的数据？" class="headerlink" title="二十三. Vuex的核心概念有哪些？组件如何使用store中的数据如何改变store中的数据？"></a>二十三. Vuex的核心概念有哪些？组件如何使用store中的数据如何改变store中的数据？</h4><p><code>state</code> &#x3D;&gt; 基本数据      在组件中使用<code>mapState()</code>函数把状态数据映射入组件即可使用<br><code>getters</code> &#x3D;&gt; 从基本数据派生的数据   我们在组件中使用 <code>$store.getters</code>获取数据<br><code>mutations</code> &#x3D;&gt; 提交更改数据的方法，同步！    我们在组件中使用 <code>$store.commit(&#39;&#39;,params)</code>修改数据<br><code>actions</code> &#x3D;&gt; 像一个装饰器，包裹<code>mutations</code>，使之可以异步。  使用<code>mapAction()</code>映射入组件使用<br><code>modules</code> &#x3D;&gt; 模块化<code>Vuex</code></p><h4 id="二十四-vue有哪些常用的UI组件库"><a href="#二十四-vue有哪些常用的UI组件库" class="headerlink" title="二十四. vue有哪些常用的UI组件库"></a>二十四. vue有哪些常用的UI组件库</h4><p><code>element</code> (PC端)，<br><code>VUX</code> (移动端),<br><code>Mint UI</code>(移动端)<br><code>Vant</code> (移动端)</p><h4 id="二十五-vue有哪些优缺点"><a href="#二十五-vue有哪些优缺点" class="headerlink" title="二十五. vue有哪些优缺点:"></a>二十五. vue有哪些优缺点:</h4><p>优点: </p><ol><li><code>简单好用</code>： <code>Vue.js</code>包含基于<code>HTML</code>的标准模板，可以更轻松地使用和修改现有应用程序。</li><li>单页面应用, 使用单文件组件结构, 用户体验好, </li><li><code>性能比较好</code>：相比其他框架, 它占用更少的空间，并提供更好的性能。</li><li><code>基于MVVM模式</code>, 数据驱动视图, 更高效</li><li><code>适应性强</code>：组件化设计可以提高开发效率,方便代码复用, 提升整个项目的可维护性<br>缺点: </li><li>vue生态环境不如<code>react</code>和<code>angular</code>, 但有追赶和超越的趋势</li><li>vue2不支持IE8   vue3 不支持IE10</li><li>vue封装的<code>比较深</code>入,<code>不利于seo优化</code>, <code>报错不明显</code></li></ol><h4 id="二十六-什么是MVVM"><a href="#二十六-什么是MVVM" class="headerlink" title="二十六. 什么是MVVM?"></a>二十六. 什么是MVVM?</h4><p><code>MVVM</code>是<code>model-view-viewModel</code>的简写, 它是一种<code>开发模式</code>, 它实现了<code>视图</code>和<code>数据逻辑</code>之间的<code>分离</code>,  <code>model</code>模型指的是后端传递的数据, <code>view</code>视图指的是所看到的页面, <code>viewModel</code>是连接视图<code>view</code>和模型<code>model</code>的桥梁, 从而实现模型<code>model</code>到视图<code>view</code>的转化 和 视图<code>view</code>到模型<code>model</code>的转化, 也就是我们所说的<code>双向数据绑定</code>, 使用<code>MVVM</code>模式实现的前端框架有 <code>vue</code> 和 <code>react</code></p><h4 id="二十七-vue项目怎么打包app"><a href="#二十七-vue项目怎么打包app" class="headerlink" title="二十七. vue项目怎么打包app  ?"></a>二十七. vue项目怎么打包app  ?</h4><ol><li>首先使用 <code>webpack</code> 打发布包, <code>npm run build</code></li><li>然后通过 <code>Hbuilder</code> 新建<code>H5+App项目</code></li><li>把第一步打包出的dist文件夹导入项目</li><li>在项目中的<code>manifest.json</code>文件中进行打包配置</li><li>点击<code>Hbuilder</code>工具菜单栏发行中的 <code>原生App-云打包</code></li></ol><h4 id="二十八-vue中虚拟DOM的实现原理"><a href="#二十八-vue中虚拟DOM的实现原理" class="headerlink" title="二十八. vue中虚拟DOM的实现原理"></a>二十八. vue中虚拟DOM的实现原理</h4><p><code>虚拟DOM</code>是通过js对象的结构来记录html标签节点, 当组件数据更新需要渲染视图时,先用<code>diff算法</code>计算变化前后js对象(也就是<code>虚拟DOM树</code>)结构的不同, 得到最小差异, 然后针对性的更新部分真实DOM节点, 这样可以极大<code>提高视图渲染效率</code>, <code>节省内存消耗</code></p><h4 id="二十九-请说下封装-vue-组件的过程？"><a href="#二十九-请说下封装-vue-组件的过程？" class="headerlink" title="二十九. 请说下封装 vue 组件的过程？"></a>二十九. 请说下封装 vue 组件的过程？</h4><ol><li>建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。(思考1小时，码码10分钟，程序猿的准则。)</li><li>准备好组件的数据输入。即分析好逻辑，定好 <code>props</code> 里面的数据、类型。</li><li>准备好组件的数据输出。即根据组件逻辑，做好要暴露出来的方法。</li><li>封装完毕了，直接调用即可</li></ol><h4 id="三十-在vue项目中使用组件库-如何修改组件库中组件的样式"><a href="#三十-在vue项目中使用组件库-如何修改组件库中组件的样式" class="headerlink" title="三十. 在vue项目中使用组件库, 如何修改组件库中组件的样式?"></a>三十. 在vue项目中使用组件库, 如何修改组件库中组件的样式?</h4><p>一般vue组件<code>style</code>会添加<code>scoped</code>属性,产生组件样式隔离, 无法直接修改子组件样式<br>此时可以使用vue提供的样式穿透语法修改子组件样式 (父组件选择器 <code>&gt;&gt;&gt;</code> 子组件选择器  vue3是 <code>:deep()</code>)</p><h4 id="三十一-vue项目中如何使用sass"><a href="#三十一-vue项目中如何使用sass" class="headerlink" title="三十一. vue项目中如何使用sass?"></a>三十一. vue项目中如何使用sass?</h4><ol><li>下载安装<code>sass</code>模块   <code>npm install sass --save</code></li><li>在组件的<code>style</code>标签上添加<code>lang=”scss”</code></li></ol><h4 id="32-SCSS-x2F-less相比于CSS有哪些优势？"><a href="#32-SCSS-x2F-less相比于CSS有哪些优势？" class="headerlink" title="32. SCSS&#x2F;less相比于CSS有哪些优势？"></a>32. SCSS&#x2F;less相比于CSS有哪些优势？</h4><p>在css语法基础上添加了编程能力，使之具有定义变量，嵌套，计算，使用函数,混合等功能</p><h4 id="33-scss和less有哪些不同？"><a href="#33-scss和less有哪些不同？" class="headerlink" title="33. scss和less有哪些不同？"></a>33. scss和less有哪些不同？</h4><ol><li>编译环境不同 <code>sass-loader</code>   <code>less-loader</code></li><li><code>scss</code>变量使用$定义 ,<code>less</code>变量使用@定义</li><li><code>sass</code>支持条件语句,可以使用<code>if()</code> <code>else()</code> <code>for()</code>, <code>less</code>不支持</li></ol><h4 id="34-vue单文件组件如何实现SEO优化-了解-？"><a href="#34-vue单文件组件如何实现SEO优化-了解-？" class="headerlink" title="34. vue单文件组件如何实现SEO优化(了解)？"></a>34. vue单文件组件如何实现SEO优化(了解)？</h4><ol><li>使用预渲染插件<code>prerender-spa-plugin</code>,来执行打包,可以把项目中的每一个页面打包成一个网页，之后可单独实现SEO优化</li><li>使用后端模板化渲染页面,也叫<code>SSR</code>服务器渲染</li><li>使用<code>Nuxt.js</code>插件执行静态化打包</li><li>使用<code>Phantomjs</code>无头浏览器(只有浏览器内核,没有界面)</li></ol><h4 id="35-vue3相比于vue2有哪些区别？"><a href="#35-vue3相比于vue2有哪些区别？" class="headerlink" title="35. vue3相比于vue2有哪些区别？"></a>35. vue3相比于vue2有哪些区别？</h4><ol><li>vue2使用时直接导入vue构造函数,vue3使用时通过对象解构方式按需导入</li><li>vue3中新增了<code>setup</code>函数，数据的定义，更新计算，监听等都在<code>setup</code>函数中执行</li><li><code>setup</code>函数中的数据都需要<code>return</code>导出才能在组件模板中调用</li><li><code>Setup</code>中<code>this</code>为空,可以有效避免<code>this</code>指向修改带来的问题</li><li>Vue中的生命周期也在<code>setup</code>中实现，其中取消了<code>beforeCreata</code>和<code>created</code>,其他的生命周期函数名有更新,如<code>destoryed</code>改成了<code>onUnmounted</code></li><li>Vue3中使用<code>ref</code>函数定义值类型数据,使用<code>reactive</code>函数定义引用类型数据</li><li>Vue3中的<code>ref</code>, <code>reactive</code>,<code>computed</code>等功能函数都需要从vue中解构导出才能使用</li><li>Vue3废弃了<code>filters</code>过滤器,建议使用<code>计算属性</code></li><li>vue3中的样式隔离由 <code>&gt;&gt;&gt;</code> 或 <code>/deep/</code>  改成了 <code>:deep()</code></li><li>vue3可以动态绑定样式, 在<code>style</code>中使用<code>v-bind()</code> 绑定响应数据</li></ol><h4 id="36-vue3语法糖-x2F-setup中如何使用状态管理vuex和-路由"><a href="#36-vue3语法糖-x2F-setup中如何使用状态管理vuex和-路由" class="headerlink" title="36. vue3语法糖&#x2F;setup中如何使用状态管理vuex和 路由 ?"></a>36. vue3语法糖&#x2F;setup中如何使用状态管理vuex和 路由 ?</h4><p>从<code>vuex</code>模块中引入 <code>useStore</code> 函数, 调用后得到 状态仓库对象<code>store</code><br>从<code>vue-router</code>模块中引入 <code>useRoute</code>和<code>useRouter</code>函数,<br>调用<code>useRoute()</code>后得到路由信息对象<code>route</code>, 可用于<code>路由传值</code>和<code>路由监听</code><br>调用<code>useRouter()</code>后得到路由配置对象<code>router</code>, 可用于<code>路由跳转</code></p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点整理3</title>
      <link href="//webNotes-vue3.html"/>
      <url>//webNotes-vue3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue知识点整理3</p><span id="more"></span><h2 id="vue过度与动画"><a href="#vue过度与动画" class="headerlink" title="vue过度与动画"></a>vue过度与动画</h2><ol><li><ul><li>元素进入的样式：<br> <code>v-enter</code>: 进入的起点<br> <code>v-enter-active</code>: 进入过程中<br> <code>v-enter-to</code>: 进入的终点</li><li>元素离开的样式：<br> <code>v-leave</code>: 离开的起点<br> <code>v-leave-active</code>: 离开的过程中<br> <code>v-leave-to</code>: 离开的终点</li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性</p><pre><code class="highlight js">&lt;transition name=<span class="string">&quot;binge&quot;</span>&gt;    <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;bool&quot;</span>&gt;</span>你好！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>&lt;/transition&gt;</code></pre></li><li><p>若有多个元素需要过度，则需要使用<code>&lt;transition-group&gt;</code>，且每个元素都要指定key值</p></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li><p>vue路由的实现原理?<br> a标签href值如果以#开头, 访问时#开头的路径会被拼接到url路径上,且页面不刷新<br> 以#开头的路径地址, 叫做<code>哈希(hash)值</code><br> 哈希值特点:<br> 哈希值改变时, 页面不会刷新<br> 哈希值不会由ajax请求发给服务器<br> 哈希值变化时,会触发hashChange事件</p></li><li><p>vue路由的配置步骤<br> (1)导入vue路由插件 <code>&lt;script src=&quot;vue-router.js&quot;&gt;&lt;/script&gt;</code><br> (2)在vue模板中添加路由跳转标签 <code>&lt;router-link to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</code><br> (3)创建路由分发跳转的组件 <code>Vue.component(&quot;homeCom&quot;, &#123;template: &quot;&lt;h1&gt;这是首页&lt;/h1&gt;&quot;&#125;)</code><br> (4)创建路由对象,并配置路由信息 <code>new VueRouter(&#123; routes：&#123;path: &quot;/home&quot;, component: Home&#125; &#125;)</code><br> (5)在vue根组件中注册路由 <code>router</code><br> (6)根组件模板中,设置路由出口 <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p></li><li><p>路由有哪两种跳转方式?<br> 编程式导航跳转 <code>router.push(&#39;/home&#39;)</code><br> <code>router.push(&#123;path: &quot;/home&quot;&#125;)</code><br> <code>router.push(&#123;path: &quot;main&quot;&#125;)</code></p><p> <code>router.forward()</code> 前进<br> <code>router.back()</code> 后退<br> <code>router.go()</code> 可前进可后退</p></li><li><p><code>this.$router</code> 和  <code>this.$route</code> 的区别?<br> <code>this.$router</code> 是全局唯一的路由配置对象, 固定不变<br> <code>this.$route</code> 是当前路由页面对应的路由信息对象, 路由跳转时会更新</p></li><li><p>vue路由有哪四种传值方式?<br> (1)url拼接键值对传值<br> <code>router.push(&quot;/home?name=&#39;zs&#39;&quot;)</code> 使用<code>$route.query</code>接收<br> (2)动态url&#x2F;友好型url传值<br> <code>router.push(&quot;/home/&quot;)</code>  使用<code>$route.params</code>接收<br> (3)路径跳转+query对象传值<br> <code>router.push(&#123;path: &quot;/home&quot;,query: &#123;name: this.name&#125;&#125;)</code> 使用<code>$route.query</code>接收<br> (4)命名路由+params对象传值<br> <code>router.push(&#123;name: &quot;main&quot;,params:&#123;name: this.name&#125;&#125;)</code> 使用<code>$route.params</code>接收<br><br> 注: <code>path</code>路径跳转只可以携带<code>query</code>参数, <code>name</code>路由名跳转可以携带<code>params</code>参数和<code>query</code>参数</p></li><li><p>vue路由四种传值方式的优缺点对比<br> 四种方式中, 1,2,3方式都是把参数拼到了url路径上, 而第4种方式的<code>params</code>参数没有在路径上拼接(第4种方式的<code>query</code>参数也是在url上拼接的)<br> 在url路径上拼接参数, 好处是: <code>页面刷新时数据不丢失</code> , 弊端是: <code>安全性低</code>,且<code>数据大小限制</code><br> 第4种方式的<code>params</code>参数 好处: <code>安全性高</code>,且<code>数据大小无限制</code>, 弊端是: <code>页面刷新</code>, <code>数据会丢</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点整理2</title>
      <link href="//webNotes-vue2.html"/>
      <url>//webNotes-vue2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue知识点整理2</p><span id="more"></span><h2 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h2><h3 id="内容绑定，事件绑定"><a href="#内容绑定，事件绑定" class="headerlink" title="内容绑定，事件绑定"></a>内容绑定，事件绑定</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p><code>v-text</code>：指令的作用是设置标签的内容(textContent)默认写法会替换全部内容，使用差值表达式<code>&#123;&#123;&#125;&#125;</code>可以替换指定内容，内部支持写表达式。</p><h4 id="v-htm"><a href="#v-htm" class="headerlink" title="v-htm"></a>v-htm</h4><p><code>v-html</code>：指令的作用是设置元素的innerHTML，内容中有html结构会被解析为标签。</p><h4 id="v-on基础"><a href="#v-on基础" class="headerlink" title="v-on基础"></a>v-on基础</h4><p><code>v-on</code>：指令的作用是为元素绑定事件，事件名不需要写on，指令可以简写为@，绑定的方法定义在methods属性中，方法内部通过this关键字可以访问定义在data中的数据。</p><h3 id="显示切换，属性绑定"><a href="#显示切换，属性绑定" class="headerlink" title="显示切换，属性绑定"></a>显示切换，属性绑定</h3><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p><code>v-show</code>：指令的作用是根据真假切换元素的显示状态，原理是修改元素的display，实现显示隐藏，指令后面的内容，最终都会解析为布尔值，值为true元素显示，值为false元素隐藏，数据改变之后，对应元素的显示状态会同步更新。</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p><code>v-if</code>：指令的作用是根据表达式的真假切换元素的显示状态，本质是通过操作dom元素来切换显示状态，表达式的值为true，元素存在于dom树中，为false，从dom树中移除，频繁的切换v-show，反之使用v-if,前者的切换消耗小</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p><code>v-bind</code>：指令的作用是为元素绑定属性，完整写法是v-bind:属性名，简写的话可以直接省略v-bind，只保留:属性名，需要动态的增删class建议使用对象的方式</p><h3 id="列表循环，表单元素绑定"><a href="#列表循环，表单元素绑定" class="headerlink" title="列表循环，表单元素绑定"></a>列表循环，表单元素绑定</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p><code>v-for</code>：指令的作用是根据数据生成列表结构，数组经常和v-for结合使用，语法是(item,index)in数据，item和index可以结合其他指令一起使用，数组长度的更新会同步到页面上，是响应式的</p><h4 id="v-on补充"><a href="#v-on补充" class="headerlink" title="v-on补充"></a>v-on补充</h4><p>事件绑定的方法写成函数调用的形式，可以传入自定义参数，定义方法时需要定义形参来接收传入的实参，事件的后面跟上.修饰符可以对事件进行限制，.enter可以限制触发的按键为回车，事件修饰符有多种</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p><code>v-model</code>：指令的作用时便捷的设置和获取表单元素的值，绑定的数据会和表单元素值相关联，绑定的数据&lt;——&gt;表单元素的值</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><code>生命周期</code>: 一个vue对象从创建到销毁的整个过程<br><code>生命周期函数</code>: 也叫生命周期钩子, 是在生命周期过程中主动调用的一些函数</p><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><h4 id="vue的钩子函数有四个过程-对应八个函数"><a href="#vue的钩子函数有四个过程-对应八个函数" class="headerlink" title="vue的钩子函数有四个过程, 对应八个函数"></a>vue的钩子函数有<code>四个过程</code>, 对应<code>八个函数</code></h4><p>  创建过程 <code>beforeCreate</code> 创建前  和  <code>created</code> 创建后<br>  渲染过程 <code>beforeMount</code> 渲染前  和  <code>mounted</code> 渲染后<br>  更新过程 <code>beforeUpdate</code> 更新前  和 <code>updated</code> 更新后<br>  销毁过程 <code>beforeDestroy</code> 销毁前 和 <code>destroyed</code> 销毁后</p><h2 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h2><h3 id="常见的三种数据更新-视图不更新的特殊情况"><a href="#常见的三种数据更新-视图不更新的特殊情况" class="headerlink" title="常见的三种数据更新,视图不更新的特殊情况"></a>常见的三种数据更新,视图不更新的特殊情况</h3><ol><li>data中的数组通过索引更新数据,但数组长度不变</li><li>没有在data中定义的数据更新</li><li>data中的对象, 初始化后添加的字段更新</li></ol><p>深度监听: 主要针对以上第三种监听不到的情况, 用于监听对象的更新</p><h3 id="常用的两种解决方案"><a href="#常用的两种解决方案" class="headerlink" title="常用的两种解决方案"></a>常用的两种解决方案</h3><ol><li>强制刷新,适用于所有情况  this.$forceUpdate()</li><li>$set更新, 使用数组更新  this.$set(arr, index, value)</li></ol><h2 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h2><p><code>指令修饰符</code>: 在指令后打点调用的属性字段,用于给指令添加特有功能</p><ol><li>.number 用于双向绑定,使表单中的数据自动转化为数字类型</li><li>.trim  用于双向绑定, 取出表单输入字符前后空格</li><li>.prevent 用于事件绑定,阻止事件默认行为</li><li>.stop 用于事件绑定, 阻止事件冒泡</li><li>.once 用于事件绑定, 限制事件只能触发一次</li><li>.shift 用于键盘事件, 指定那些键会触发事件</li><li>.prop 用于属性绑定, 可以把标签的attribute属性改成property属性</li><li>.capture 用于事件, 默认事件在冒泡过程执行, 它可以使事件在挖洞过程执行</li><li>.self 用于事件, 只能由元素自身触发事件,不能由子元素冒泡触发</li><li>.left  .right  .middle 仅当点击特定的鼠标按钮时会处理执行函数</li><li>.lazy  用于双向绑定  输入时不更新数据, 输入完成时更新相当于change事件</li></ol><h3 id="vue中的指令修饰符有哪些"><a href="#vue中的指令修饰符有哪些" class="headerlink" title="vue中的指令修饰符有哪些?"></a>vue中的指令修饰符有哪些?</h3><p>常用:    <code>trim</code>  <code>lazy</code>  <code>number</code>  <code>stop</code>  <code>prevent</code>  <code>enter</code><br>不常用:  <code>prop</code>  <code>capture</code>  <code>self</code>  <code>left</code>  <code>right</code>  <code>middle</code>  <code>once</code></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件?"></a>什么是组件?</h3><p>当一个页面数据视图异常庞大,里边的数据逻辑非常多, 造成页面复杂臃肿, 不易于阅读,调试,更新, 此时, 我们可以把一个页面拆分开, 把页面中一个个<code>独立的功能模块单独分开</code>,<code>独立实现此模块的模板</code>,<code>样式和逻辑</code>, 分割成的每一个模块 叫做 <code>组件</code>, 这就是<code>组件化编程</code> 也是 vue框架的一个好处</p><h3 id="组件化有什么好处"><a href="#组件化有什么好处" class="headerlink" title="组件化有什么好处?"></a>组件化有什么好处?</h3><p>使项目结构清晰, 更容易阅读和维护更新, 每一个组件之间作用域相互隔离, 互不干涉, 类似于前端模块化</p><h3 id="如果创建一个组件"><a href="#如果创建一个组件" class="headerlink" title="如果创建一个组件?"></a>如果创建一个组件?</h3><p>根组件: 使用<code>new Vue()</code>创建的vue对象就是vue根组件, 全局唯一<br>全局组件: 使用<code>Vue.component()</code>创建的对象就是全局组件,在所有组件模板中可用<br>局部组件: 在组件的<code>components</code>字段中定义的组件是局部组件,之能在其定义的组件模板中使用</p><h3 id="组件如何使用"><a href="#组件如何使用" class="headerlink" title="组件如何使用?"></a>组件如何使用?</h3><p>组件可以认为是自定义标签, 直接当作标签来用即可, 叫做组件标签</p><h3 id="组件需要注意的细节"><a href="#组件需要注意的细节" class="headerlink" title="组件需要注意的细节?"></a>组件需要注意的细节?</h3><p>组件模板使用<code>template</code>属性绑定模板字符串或独立模板<br>vue内置组件<code>template</code>模板要求有且仅有一个根元素<br>组件数据<code>data</code>是一个函数,不是对象<br>html标签<code>不支持大写</code>, 如果组件名用驼峰定义, 那么组件标签名应用<code>小写 - 分割</code></p><h3 id="为什么组件中的data是一个函数而不是对象"><a href="#为什么组件中的data是一个函数而不是对象" class="headerlink" title="为什么组件中的data是一个函数而不是对象?"></a>为什么组件中的data是一个函数而不是对象?</h3><p><code>组件一般不是唯一的</code>,是需要复用的,如果组件中data是个对象, 在复用, 引用的是对象的内存地址,相当于<code>浅拷贝</code>, 结果一个组件数据变化时,另一个组件会受到影响, 所以data是一个函数, 返回一个新的对象, 这样每次调用组件, 都会得到一个新的对象,属于<code>深拷贝</code>, 使各个组件数据<code>相互独立</code>,不影响</p><h2 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h2><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>在组件标签的开始标签和结束标签中写的数据叫<code>插槽数据</code>, 插槽数据默认不会展示到子组件模板中, 可以使用vue内置组件<code>slot</code>, 在子组件模板中展示插槽数据，插槽数据不只是字符串也可以是一段html代码<br>在子组件标签中要插入data动态数据, 数据来源于父组件, 会展示到子组件中, 这种方式叫做: <code>组件传值</code></p><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><p><code>组件传值</code>: 把一个组件中的数据传入另一个组件中展示 使使用插槽slot把父组件数据传入子组件展示, 叫做插槽传值<br><code>slot</code> 标签就是插槽, 用于展示组件标签中的数据, 每一个slot标签都会展示一遍数据</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值:"></a>父组件向子组件传值:</h4><ol><li>在子组件对象的<code>props</code>字段中定义属性：<code>props: [&quot;childCount&quot;]</code></li><li>在子组件标签上绑定自定义属性并赋值：<code>&lt;mycom :child-count=&quot;father&quot;&gt;&lt;/mycom&gt;</code></li><li>在子组件对象或模板中调用自定义属性, 调用方式和data数据相同：<code>&lt;div&gt;子组件: &#123;&#123;child&#125;&#125;&lt;/div&gt;</code></li></ol><h4 id="slot插槽传值-和-props属性传值-的异同点"><a href="#slot插槽传值-和-props属性传值-的异同点" class="headerlink" title="slot插槽传值 和 props属性传值 的异同点?"></a>slot插槽传值 和 props属性传值 的异同点?</h4><p><code>相同点</code>: 都是用于父组件向子组件传值<br><code>不同点</code>: 插槽数据仅用于模板展示,不能在组件对象中调用和修改, 而props属性传值可以在组件中调用,过滤,监听,计算等操作</p><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值:"></a>子组件向父组件传值:</h4><ol><li>定义一个自定义事件, 使用<code>this.$emit()</code> 发射事件把数据传出去： <code>this.$emit(&quot;myevent&quot;, this.childCount)</code></li><li>在子组件标签上绑定自定义事件, 调用事件函数：<code>&lt;mycom @myevent=&quot;getData&quot;&gt;&lt;/mycom&gt;</code></li><li>在父组件中的事件回调中, 获取数据并赋值：<code>getData(data)&#123;this.father = data&#125;</code></li></ol><h3 id="bus总线"><a href="#bus总线" class="headerlink" title="bus总线"></a>bus总线</h3><h4 id="兄弟组件传值："><a href="#兄弟组件传值：" class="headerlink" title="兄弟组件传值："></a>兄弟组件传值：</h4><ol><li>在全局作用域创建一个空的vue对象, 称之为bus总线：<code>var bus = new Vue()</code></li><li>在发送数据的组件中, 使用bus总线发起自定义事件, 发送数据：<code>bus.$emit(&quot;event&quot;, this.count)</code></li><li>在接收数据的组件中， 使用bus绑定事件接收数据：<code>bus.$on(&quot;event&quot;, data=&gt;&#123;this.count2 = data&#125;）</code></li></ol><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><pre><code>全局自定义指令：`Vue.directive(&quot;binge&quot;, function(el,obj,c)&#123;&#125;`  参数1：`指令所在的元素`，参数2：`指令名对象`  参数3：`指令配置对象`定义局部vue指令: 只能在当前vue模板中使用</code></pre><pre><code class="highlight js"><span class="attr">directives</span>:&#123;    <span class="title function_">color</span>(<span class="params">a,b,c</span>)&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)        a.<span class="property">style</span>.<span class="property">color</span> = b.<span class="property">value</span>;    &#125;&#125;</code></pre><h2 id="异步更新"><a href="#异步更新" class="headerlink" title="异步更新"></a>异步更新</h2><p>由于vue数据的更新是同步的, 更新后数据<code>this.name</code>立即改为最新值<br>但是视图的更新是异步的, 数据更新后, 视图并没有立即更新, 所以打印视图结果还是更新前的结果<br>如果想在视图更新结束后,打印视图的显示, 可以在异步更新回调中执行<br><code>this.$nextTick(()=&gt;&#123;&#125;)</code>异步更新队列, 参数是视图更新完成的回调函数</p><h2 id="监视器"><a href="#监视器" class="headerlink" title="监视器"></a>监视器</h2><h3 id="watch监视器的监视原理"><a href="#watch监视器的监视原理" class="headerlink" title="watch监视器的监视原理?"></a>watch监视器的监视原理?</h3><p>当vue初始化时,会使用<code>Object.defineProperty()</code>对data数据进行重定义和数据拦截, 在set函数中,判断此属性是否在watch监视器中被监视, 如果是,调用<code>new Watcher</code>创建watcher对象并和此属性进行绑定, 把回调函数传入watch监视器的函数参数中, 当监视的属性发生变化时, 会去执行set函数, 在set函数中调用watcher对象的回调, 也就是watch监视器中的监视函数 (使用原理还是回调原理) 类似于发布订阅模式</p><h2 id="重用机制"><a href="#重用机制" class="headerlink" title="重用机制"></a>重用机制</h2><p>重用机制: 也叫惰性机制, 指vue模板中的结构在销毁重建过程中,如果销毁和重建的标签结构相同, 则不再执行销毁和重建过程, 而是把要销毁的标签修改属性后直接拿来用<br>好处: 可以减少DOM创建销毁, 节省内存, 提高渲染效率<br>弊端: 表单中输入的数据内容没有重置, 可能暴漏隐私信息, 或造成更新渲染异常</p><h3 id="那如何解决重用机制弊端-如何避免重用机制发生"><a href="#那如何解决重用机制弊端-如何避免重用机制发生" class="headerlink" title="那如何解决重用机制弊端, 如何避免重用机制发生?"></a>那如何解决重用机制弊端, 如何避免重用机制发生?</h3><ol><li>解决方案1: 使创建销毁前后的标签结构不同, 即可避免重用机制</li><li>解决方案2: 给创建销毁前后的标签设置属性key以不同的值, 可以避免重用机制</li><li>key属性是给vue模板中元素的唯一标识,可以使vue视图时更加准确的识别每一个DOM元素,提高渲染的效率, 在v-for循环中建议给每一个循环的元素添加不同的属性key值, 以避免重用机制造成的渲染异常</li></ol><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="计算属性是如何缓存数据的"><a href="#计算属性是如何缓存数据的" class="headerlink" title="计算属性是如何缓存数据的?"></a>计算属性是如何缓存数据的?</h3><p>计算属性每次计算完结果, 会把计算结果赋值给一个全局变量, 当数据更新时, vue会判断计算属性依赖的数据源有没有更新,用一个变量dirty(脏值)记录源数据状态, 如果计算属性依赖的源数据没有变化, 会脏值记录为false, 如果有变化, 脏值被记录为true, 之后开始更新视图, 在数据更新到计算属性处, 执行脏值判断, 如果脏值为true,则重新执行计算属性计算过程, 如果脏值为false, 则直接返回全局变量记录的计算结果</p><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><h3 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h3><p>JsvaScript框架<br>简化Dom操作<br>响应式数据驱动<br>官方网址：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p><h3 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h3><p>步骤: </p><ol><li>导入开发版本Vue.js</li><li>创建Vue实例对象，设置el属性和data属性</li><li>使用简洁的模板语法把数据渲染到页面上</li></ol><p><u>开发环境版本，包含了有帮助的命令行警告</u></p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="comment">&lt;!-- Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统： --&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>   &#123; &#123; message &#125; &#125;   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><span class="language-javascript">      <span class="attr">data</span>: &#123;<span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>&#125;</span><span class="language-javascript">    &#125;);</span><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h4 id="el：挂载点"><a href="#el：挂载点" class="headerlink" title="el：挂载点"></a>el：挂载点</h4><p><code>el</code>是用来设置<code>Vue实例挂载（管理）</code>的元素<br>Vue会管理<code>el</code>选项命中的元素及其内部的后代元素<br>可以使用其他选择器，但是建议使用<code>ID选择器</code><br>可以使用其他的双标签，<code>不能使用HTML和BODY</code></p><h4 id="data：数据对象"><a href="#data：数据对象" class="headerlink" title="data：数据对象"></a>data：数据对象</h4><p>Vue中用到的数据定义在<code>data</code>中<br><code>data</code>中可以写复杂数据类型的数据<br>渲染复杂类型数据时，遵守js的语法即可</p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点整理1</title>
      <link href="//webNotes-Vue1.html"/>
      <url>//webNotes-Vue1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一下Vue学习过程</p><span id="more"></span><h2 id="一、Vue基础"><a href="#一、Vue基础" class="headerlink" title="一、Vue基础"></a>一、Vue基础</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li>导入开发版本的Vie.js</li><li>创建Vue实例对象，设置el属性和data属性</li><li>使用简洁的模板语法把数据渲染到页面上</li></ul><h3 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el:挂载点"></a>el:挂载点</h3><p>例如：<code>el: &quot;#app&quot;</code><br><span style="color: red;"> <strong>注意：</strong> </span>不能命中html和body</p><h3 id="date-数据对象"><a href="#date-数据对象" class="headerlink" title="date:数据对象"></a>date:数据对象</h3><ul><li>vue中用到的数据</li><li>可以写复杂类型，渲染时遵守js语法</li></ul><h2 id="二、本地应用"><a href="#二、本地应用" class="headerlink" title="二、本地应用"></a>二、本地应用</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text:"></a>v-text:</h3><ul><li>设置标签的内容，只会解析为文本</li><li>默认写法会替换全部内容，使用插值表达式<code>&#123;&#123;&#125;&#125;</code>可</li><li>以替换指定内容</li><li>内部支持写表达式</li></ul><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h3><ul><li>设置元素的innerHTML</li><li>内容中有Html的结构会被解析为标签</li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on:"></a>v-on:</h3><ul><li>为元素绑定事件</li><li>事件名不用写on</li><li>指令可以简写为@</li><li>绑定方法定义在methods属性中</li><li>方法内部可以用this访问data中的数据</li><li>事件绑定方法写成函数调用的形式可以传入自定义参数</li><li>定义方法时需要定义形参接收传入的实参</li><li>事件后.修饰符可以限制事件，如.enter回车</li></ul><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><ul><li>根据真假切换元素显示状态</li><li>原理是修改元素的display</li><li>指令后的内容，最终都会解析为布尔值</li></ul><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><ul><li>根据真假切换元素显示状态</li><li>本质是操纵dom元素，表达式为false时从dom树中移除</li><li>频繁切换的元素用v-show，反之用v-if</li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li>为元素绑定属性</li><li>指令可简写为:</li><li>动态增删class建议使用对象的方式，</li><li>例如{active:isActive}</li></ul><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ul><li>根据数据生成列表结构</li><li>数组经常和v-for结合使用</li><li>语法是(item,index) in data</li><li>item和index可以结合其他指令一起使用</li><li>数组长度的更新会同步到页面上，是响应式的</li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li>便捷设置和获取表单元素的值</li><li>绑定的数据会和表单元素值相关联</li><li>绑定数据和表单元素值双向绑定</li></ul><h2 id="三、网络应用"><a href="#三、网络应用" class="headerlink" title="三、网络应用"></a>三、网络应用</h2><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul><li>使用get或post方法发送对应请求</li><li>先导入再使用</li><li>then方法回调函数会在请求成功或失败时触发</li><li>通过回调函数的形参可以获得response内容或错误信息</li></ul><h3 id="axios-vue"><a href="#axios-vue" class="headerlink" title="axios+vue"></a>axios+vue</h3><ul><li>axios中this已经改变，需要提前保存this方便赋值</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>应用的逻辑代码建议和页面分离，用单独的js文件写</li><li>注意服务器返回数据的层级结构</li><li>自定义参数可以让代码的复用性提高</li><li>methods中定义方法内部可用this关键字调用方法</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Vue页面加载时，触发某个函数的方法"><a href="#Vue页面加载时，触发某个函数的方法" class="headerlink" title="Vue页面加载时，触发某个函数的方法"></a>Vue页面加载时，触发某个函数的方法</h3><pre><code class="highlight js"><span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="variable language_">this</span>.<span class="title function_">createcode</span>();<span class="comment">//需要触发的函数</span>&#125;<span class="comment">//下面是createcode函数</span><span class="title function_">createcode</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> self = <span class="variable language_">this</span>;axios.<span class="title function_">post</span>(<span class="string">&quot;/verifycode&quot;</span>,&#123;<span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>,<span class="attr">id</span>:<span class="variable language_">this</span>.<span class="property">id</span>&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;    <span class="comment">//console.log(res);</span>    <span class="keyword">var</span> url= <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>.<span class="property">code64</span>);    <span class="comment">//console.log(url)</span>    self.<span class="property">urlIMg</span>  = url.<span class="property">data</span>.<span class="property">base64Code</span>;&#125;);&#125;,</code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于nodejs解决服务器跨域的方法</title>
      <link href="//webNotes-nodejsKy1.html"/>
      <url>//webNotes-nodejsKy1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一下跨域问题</p><span id="more"></span><h4 id="首先，什么是跨域？"><a href="#首先，什么是跨域？" class="headerlink" title="首先，什么是跨域？"></a>首先，什么是跨域？</h4><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域；<br>那么，如何解决跨域呢？</p><p>1、采用jsonp方法解决跨域，<br>2、在服务器端利用nodejs设置头文件header来解决跨域，实例代码如下：</p><pre><code class="highlight js"><span class="keyword">const</span> http = <span class="built_in">require</span>(“http”);http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;<span class="comment">//设置返回格式 JSON, 解决跨域问题</span><span class="comment">// res.setHeader(&#x27;Content-type&#x27;, &#x27;application/json&#x27;);</span>res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&quot;</span>);res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,<span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);res.<span class="title function_">setHeader</span>(<span class="string">&quot;X-Powered-By&quot;</span>,<span class="string">&quot;3.2.1&quot;</span>);res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>);<span class="comment">//自己的逻辑代码</span>&#125;)</code></pre><p>请注意上文中强调的setHeader，现在网上有不少博客都直接写成了header方法(原生node没有这个方法)，这是错误的(亲测)，目前Nodejs中res没有header()这个方法，虽然是一个很小的点，但可能在误导很多初学者。<br>同时，请注意头文件的第二行，这样设置会更全面些；</p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记 - 那些常用又记不住的css</title>
      <link href="//webNotes-css1.html"/>
      <url>//webNotes-css1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一些常用Css效果</p><span id="more"></span><h2 id="一、设置input-的placeholder的字体样式"><a href="#一、设置input-的placeholder的字体样式" class="headerlink" title="一、设置input 的placeholder的字体样式"></a>一、设置input 的placeholder的字体样式</h2><pre><code class="highlight css"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123;    <span class="comment">/* Chrome/Opera/Safari */</span>    <span class="attribute">color</span>: red;&#125;<span class="selector-tag">input</span>::-moz-placeholder &#123; <span class="comment">/* Firefox 19+ */</span>      <span class="attribute">color</span>: red;&#125;<span class="selector-tag">input</span>:-ms-input-placeholder &#123; <span class="comment">/* IE 10+ */</span>    <span class="attribute">color</span>: red;&#125;<span class="selector-tag">input</span>:-moz-placeholder &#123; <span class="comment">/* Firefox 18- */</span>    <span class="attribute">color</span>: red;&#125;</code></pre><h4 id="设置input聚焦时的样式"><a href="#设置input聚焦时的样式" class="headerlink" title="设置input聚焦时的样式"></a>设置input聚焦时的样式</h4><pre><code class="highlight css"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;       <span class="attribute">background-color</span>: red;&#125;</code></pre><h4 id="取消input的边框"><a href="#取消input的边框" class="headerlink" title="取消input的边框"></a>取消input的边框</h4><pre><code class="highlight css"><span class="selector-tag">input</span> &#123;    <span class="attribute">border</span>: none;    <span class="attribute">outline</span>: none;&#125;</code></pre><h2 id="二、隐藏滚动条或更改滚动条样式"><a href="#二、隐藏滚动条或更改滚动条样式" class="headerlink" title="二、隐藏滚动条或更改滚动条样式"></a>二、隐藏滚动条或更改滚动条样式</h2><pre><code class="highlight css"><span class="comment">/*css主要部分的样式*/</span><span class="comment">/*定义滚动条宽高及背景，宽高分别对应横竖滚动条的尺寸*/</span>::-webkit-scrollbar &#123;    <span class="attribute">width</span>: <span class="number">10px</span>; <span class="comment">/*对垂直流动条有效*/</span>    <span class="attribute">height</span>: <span class="number">10px</span>; <span class="comment">/*对水平流动条有效*/</span>&#125;<span class="comment">/*定义滚动条的轨道颜色、内阴影及圆角*/</span>::-webkit-scrollbar-track&#123;    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);    <span class="attribute">background-color</span>: rosybrown;    <span class="attribute">border-radius</span>: <span class="number">3px</span>;&#125;<span class="comment">/*定义滑块颜色、内阴影及圆角*/</span>::-webkit-scrollbar-thumb&#123;     <span class="attribute">border-radius</span>: <span class="number">7px</span>;    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);    <span class="attribute">background-color</span>: <span class="number">#E8E8E8</span>;&#125;<span class="comment">/*定义两端按钮的样式*/</span>::-webkit-scrollbar-button &#123;    <span class="attribute">background-color</span>:cyan;&#125;<span class="comment">/*定义右下角汇合处的样式*/</span>::-webkit-scrollbar-corner &#123;    <span class="attribute">background</span>:khaki;&#125;</code></pre><h2 id="三、文字超出隐藏并显示省略号"><a href="#三、文字超出隐藏并显示省略号" class="headerlink" title="三、文字超出隐藏并显示省略号"></a>三、文字超出隐藏并显示省略号</h2><h4 id="单行（一定要有宽度）"><a href="#单行（一定要有宽度）" class="headerlink" title="单行（一定要有宽度）"></a><em><strong>单行（一定要有宽度）</strong></em></h4><pre><code class="highlight css"><span class="selector-tag">p</span> &#123;    <span class="attribute">width</span>:<span class="number">200</span>rpx;    <span class="attribute">white-space</span>: nowrap;    <span class="attribute">overflow</span>: hidden;    <span class="attribute">text-overflow</span>: ellipsis;&#125;</code></pre><h4 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h4><pre><code class="highlight css"><span class="selector-tag">p</span> &#123;    <span class="attribute">word-break</span>: break-all;    <span class="attribute">display</span>: -webkit-box;    -webkit-line-clamp: <span class="number">2</span>;    -webkit-box-orient: vertical;    <span class="attribute">overflow</span>: hidden;&#125;</code></pre><h2 id="四、控制div内的元素自动换行"><a href="#四、控制div内的元素自动换行" class="headerlink" title="四、控制div内的元素自动换行"></a>四、控制div内的元素自动换行</h2><pre><code class="highlight css"><span class="selector-tag">div</span> &#123;    <span class="attribute">word-wrap</span>: break-word;    <span class="attribute">word-break</span>：break-<span class="attribute">all</span>;&#125;</code></pre><h2 id="五、-纯css画三角形"><a href="#五、-纯css画三角形" class="headerlink" title="五、 纯css画三角形"></a>五、 纯css画三角形</h2><pre><code class="highlight css"><span class="selector-id">#demo</span> &#123;    <span class="attribute">width</span>: <span class="number">0</span>;    <span class="attribute">height</span>: <span class="number">0</span>;    <span class="attribute">border-width</span>: <span class="number">20px</span>;    <span class="attribute">border-style</span>: solid;    <span class="attribute">border-color</span>: transparent transparent red transparent;&#125;</code></pre><h2 id="六、-绝对定位元素居中（水平和垂直方向）"><a href="#六、-绝对定位元素居中（水平和垂直方向）" class="headerlink" title="六、 绝对定位元素居中（水平和垂直方向）"></a>六、 绝对定位元素居中（水平和垂直方向）</h2><pre><code class="highlight css"><span class="selector-id">#demo</span> &#123;    <span class="attribute">width</span>: <span class="number">200px</span>;    <span class="attribute">height</span>: <span class="number">200px</span>;    <span class="attribute">position</span>: absolute;    <span class="attribute">left</span>: <span class="number">50%</span>;    <span class="attribute">top</span>: <span class="number">50%</span>;    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);    <span class="attribute">background-color</span>: green;&#125;</code></pre><h2 id="七、表格边框合并"><a href="#七、表格边框合并" class="headerlink" title="七、表格边框合并"></a>七、表格边框合并</h2><pre><code class="highlight css"><span class="selector-tag">table</span>,<span class="selector-tag">tr</span>,<span class="selector-tag">td</span>&#123;    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;&#125;<span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>: collapse;&#125;</code></pre><hr><p>参考文档:<a href="https://zhuanlan.zhihu.com/p/228168219">知乎专栏:那些你常用又记不住的css:</a></p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记13 - HTML5和ES6 新特性</title>
      <link href="//webNotesES6.html"/>
      <url>//webNotesES6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTML5和ES6新特性<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><p><strong>语义化</strong>: 看到它就知道它是干啥的<br><strong>语义化标签</strong>: 使用单词作为标签,使标签更容易被识别</p><h3 id="常见的语义化标签"><a href="#常见的语义化标签" class="headerlink" title="常见的语义化标签"></a>常见的语义化标签</h3><p><strong>结构化标签</strong>: <u>header</u>, <u>main</u>, <u>footer</u>, <u>nav</u>, <u>aside</u>, <u>hr</u><br><strong>文本标签</strong>: <u>p</u>, <u>h1-h6</u>, <u>strong</u>, <u>i</u>, <u>del</u></p><h2 id="语义化概念"><a href="#语义化概念" class="headerlink" title="语义化概念"></a>语义化概念</h2><p><strong><u>什么是HTML语义化？HTML语义化的好处是什么？</u></strong><br><code>html语义化</code>让页面的内容<code>结构化</code>，<code>结构更清晰</code>，<code>便于对浏览器、搜索引擎解析</code>;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p><h3 id="什么是SEO-如何做SEO优化"><a href="#什么是SEO-如何做SEO优化" class="headerlink" title="什么是SEO? 如何做SEO优化?"></a>什么是SEO? 如何做SEO优化?</h3><p><strong>SEO</strong>，是英文<strong>SearchEngineOptimization</strong>的缩写，中文的意思: <strong>搜索引擎优化</strong>。<u>SEO的目的就是让网站或者网页在搜索结果中，处于靠前的位置</u>。</p><h4 id="实现SEO优化的方式有"><a href="#实现SEO优化的方式有" class="headerlink" title="实现SEO优化的方式有:"></a>实现SEO优化的方式有:</h4><ol><li>合理的title、description、keywords：<u>搜索对着三项的权重逐个减小，<code>title</code>值强调重点即可；<code>description</code>把页面内容高度概括，不可过分堆砌关键词；<code>keywords</code>列举出重要关键词</u>。</li><li>语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容HTML代码放在最前：<u>搜索引擎抓取HTML顺序是从上到下，保证重要内容一定会被抓取</u></li><li>重要内容不要用js输出：<u>爬虫不会执行js获取内容</u></li><li>少用iframe：<u>搜索引擎不会抓取iframe中的内容</u></li><li><strong>非装饰性图片必须加alt</strong></li><li>提高网站速度：<u><code>网站速度</code>是搜索引擎排序的一个重要指标</u>。</li></ol><h2 id="音视频标签"><a href="#音视频标签" class="headerlink" title="音视频标签"></a>音视频标签</h2><p><strong>音视频标签的四个属性:</strong></p><blockquote><p>src 属性设置音视频资源路径<br>  controls 属性设置播放控制器<br>  autoplay 属性设置自动播放, 需要开启浏览器授权<br>  loop  属性设置循环播放</p></blockquote><pre><code class="highlight html"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;https://music.163.com/song/media/outer/url?id=28263184.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span>此浏览器不支持播放<span class="tag">&lt;/<span class="name">audio</span>&gt;</span><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./demo.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></code></pre><p>audio演示：<br><audio src="https://music.163.com/song/media/outer/url?id=28263184.mp3" controls loop>此浏览器不支持播放</audio><br><video preload="auto" src="blob:https://player.bilibili.com/38254246-1f43-408b-a6ba-0d220c6a4f01" controls loop>此浏览器不支持播放</video></p><!-- <iframe src="//player.bilibili.com/player.html?aid=64647289&bvid=BV1L4411d7bh&cid=112229983&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> --><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p><strong>流式布局</strong>: 网页默认的布局方式, 元素按照行标签从左向右,块标签从上向下依次排列, 尽量不使标签重叠<br><strong>弹性布局</strong>: html5新增的网页布局方式, 需要手动设置, 有如下特点: </p><ul><li>1，弹性布局总是给父元素设置， 对第一级子元素起效</li><li>2，弹性布局元素默认从左向右排列，不换行，高度为100%（包含margin）</li><li>3，弹性布局元素没有行标签块标签之分，可以正常设置宽距和宽高</li><li>4，弹性布局元素不能使用浮动， 可以使用定位</li></ul><h3 id="弹性布局中的属性设置："><a href="#弹性布局中的属性设置：" class="headerlink" title="弹性布局中的属性设置："></a>弹性布局中的属性设置：</h3><p><strong>弹性容器</strong> 的属性设置：<br><code>display: flex;</code>   设置弹性容器<br><code>flex-wrap: wrap;</code> 设置换行<br><code>justify-content: space-evenly;</code>  设置说水平对齐方式<br><code>align-items: center;</code>    设置单行对齐方式<br><code>align-content: flex-start;</code>  设置多行对齐方式<br><strong>弹性元素</strong> 的属性设置：<br><code>align-self: flex-end; </code>弹性元素单独对齐<br><code>order: 1; </code> 弹性元素的排列顺序<br><code>flex-grow: 2</code>  元素扩展比例<br><code>flex-shrink: 0;</code>  元素压缩比例</p><h2 id="布局-适配-兼容"><a href="#布局-适配-兼容" class="headerlink" title="布局 适配 兼容"></a>布局 适配 兼容</h2><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>  概念: 在浏览器窗口尺寸变化时, 使一个网页在不同宽度的窗口上显示不同的排版样式和内容<br>  使用场景: 一般用于PC端网页<br>  实现原理: 使用媒体查询</p><h3 id="浏览器适配"><a href="#浏览器适配" class="headerlink" title="浏览器适配"></a>浏览器适配</h3><p>  概念: 在浏览器窗口尺寸变化时, 使一个网页在不同宽度的窗口上显示相同的排版样式和内容<br>  使用场景: 一般用于移动端网页<br>  实现原理: 视口单位 vw &#x2F; vh</p><h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><p>  概念: 在不同内核的浏览器上, 使一个网页在不同浏览器的上显示相同的排版样式和内容<br>  使用场景: 在不同内核和不同版本浏览器上的兼容(兼容低版本浏览器)<br>  实现原理: 代码优化</p><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>媒体查询的结构:  </p><pre><code class="highlight html">@media 媒体类型 and (媒体特性) &#123;    条件满足时,渲染的css样式&#125;</code></pre><p><strong>媒体类型</strong>: 此样式会在什么设备上生效 all &#x2F; screen<br><strong>媒体特性</strong>: 此样式渲染的条件, min-width &#x2F; max-height</p><p><img src="https://tva1.sinaimg.cn/large/006RYYI7ly1h5lh3gadyjj30mx0h0dn7.jpg" alt="媒体特性.png"></p><h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><p><strong>适配</strong>: 在不同的设备上显示相同的样式</p><ul><li><code>viewport</code>: 视口, 可视窗口, 一般指移动端屏幕窗口</li><li>移动端视口中有两个长度单位 <code>vw</code> 和  <code>vh</code></li><li><code>vw: viewportWidth</code> 视口宽度   100vw &#x3D;&#x3D; 视口宽度 </li><li><code>vh: viewportHeight</code> 视口高度  100vh &#x3D;&#x3D; 视口高度</li></ul><p><strong>100% 和 100vw 的区别</strong></p><ul><li>100% 指的是父标签宽度</li><li>100vw 指得是宽口宽度</li></ul><p><strong>注意</strong>: 移动端竖向滚动条不占宽度, 所以移动端  100vw &#x3D;&#x3D; 100%<br><strong>结论</strong>: 建议PC端用100%, 移动端用100vw</p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p><strong>es6: ECMA script 6</strong></p><ul><li><code>ECMAScript</code> 是javascript的一种语法标准</li><li><code>es6</code> 第六版js语法     </li><li><code>ECMA</code> : European Computer Manufacturers 2Xf2E6aEU7n685eHEbXGYHrmWn2y7a62UWBrtZzodVdD</li></ul><p>截止目前，各大浏览器都已经实现了es6标准的90%以上。nodejs几乎完全支持es6。</p><p>参考教程: <a href="http://jsrun.net/t/cZKKp">http://jsrun.net/t/cZKKp</a></p><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><p><code>requestAnimationFrame</code> 和 <code>setTimeout</code> 类似, 都是一个短暂不重复的计时器</p><ul><li>setTimeout可自定义计时时间</li><li>requestAnimationFrame 的计时时间是默认的, 一帧的时间,约等于16.67ms</li></ul><p><code>requestAnimationFrame</code> 优点: 在保证动画流畅运行的前提下, 最大限度的节约性能消耗</p><blockquote><p>由于收到设备性能的影响, 网页的刷新率(帧率)不一定准确维持在60帧&#x2F;s, 可能偏高或偏低, 所以16.67ms的帧时间是一个大概的值,不是定值</p></blockquote><pre><code class="highlight js"><span class="comment">// 使用setInterval实现小球d1运动</span><span class="keyword">var</span> y1 = <span class="number">0</span><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;    y1 += <span class="number">1</span>    <span class="keyword">if</span>(y1 &gt;= <span class="number">600</span>) y1 = <span class="number">0</span>    d1.<span class="property">style</span>.<span class="property">top</span> = y1 + <span class="string">&quot;px&quot;</span>&#125;, <span class="number">16.67</span>);<span class="comment">// 使用setTimeout实现小球d2运动</span><span class="keyword">var</span> y2 = <span class="number">0</span><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>)&#123;    y2 += <span class="number">1</span>    <span class="keyword">if</span>(y2 &gt;= <span class="number">600</span>) y2 = <span class="number">0</span>    d2.<span class="property">style</span>.<span class="property">top</span> = y2 + <span class="string">&quot;px&quot;</span>    <span class="built_in">setTimeout</span>(move, <span class="number">16.67</span>); <span class="comment">// 递归</span>&#125;<span class="built_in">setTimeout</span>(move, <span class="number">16.67</span>);<span class="comment">// 使用requestAnimationFrame实现小球d3运动</span><span class="keyword">var</span> y3 = <span class="number">0</span><span class="keyword">function</span> <span class="title function_">move1</span>(<span class="params"></span>)&#123;    y3 += <span class="number">1</span>    <span class="keyword">if</span>(y3 &gt;= <span class="number">600</span>) y3 = <span class="number">0</span>    d3.<span class="property">style</span>.<span class="property">top</span> = y3 + <span class="string">&quot;px&quot;</span>    <span class="title function_">requestAnimationFrame</span>(move1); <span class="comment">// 递归</span>&#125;<span class="title function_">requestAnimationFrame</span>(move1);</code></pre><h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><p><code>navigator.geolocation</code> 是H5新增的API,用于浏览器获取位置信息</p><pre><code class="highlight js"><span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">coords</span>)    <span class="comment">// accuracy: 55   定位精度</span>    <span class="comment">// ​</span>    <span class="comment">// altitude: 0    海拔高度</span>    <span class="comment">// ​</span>    <span class="comment">// altitudeAccuracy: 0   海拔精确度</span>    <span class="comment">// ​</span>    <span class="comment">// heading: null     移动方向</span>    <span class="comment">// ​</span>    <span class="comment">// latitude: 34.72326699999999   纬度</span>    <span class="comment">// ​</span>    <span class="comment">// longitude: 113.75165477777777   经度</span>    <span class="comment">// ​</span>    <span class="comment">// speed: null    移动速度</span>&#125;)  <span class="comment">// 开启位置监视后, 直接获取位置失效</span><span class="comment">// 开始监控位置</span><span class="keyword">var</span> watch = navigator.<span class="property">geolocation</span>.<span class="title function_">watchPosition</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;位置更新&quot;</span>, res)&#125;)<span class="comment">// 取消监听</span><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    navigator.<span class="property">geolocation</span>.<span class="title function_">clearWatch</span>(watch)&#125;, <span class="number">10000</span>);</code></pre><h3 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h3><pre><code class="highlight html"><span class="comment">&lt;!-- 引用百度地图API3.0文件 --&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://api.map.baidu.com/api?v=3.0&amp;ak=你自己の密钥&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://api.map.baidu.com/api?v=1.0&amp;&amp;type=webgl&amp;ak=你自己の密钥&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- 创建地图容器元素 --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getEarth()&quot;</span>&gt;</span>开启地球模式<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="comment">// 创建地图实例</span></span><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;container&quot;</span>); </span><span class="language-javascript">    <span class="comment">// 设置中心点坐标</span></span><span class="language-javascript">    <span class="keyword">var</span> point = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(<span class="number">116.404</span>, <span class="number">39.915</span>); </span><span class="language-javascript">    <span class="comment">// 地图初始化，同时设置地图展示级别</span></span><span class="language-javascript">    map.<span class="title function_">centerAndZoom</span>(point, <span class="number">15</span>);  </span><span class="language-javascript">    <span class="comment">// 获取当前位置</span></span><span class="language-javascript">    navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><span class="language-javascript">        <span class="comment">// panTo()方法将让地图平滑移动至新中心点</span></span><span class="language-javascript">        map.<span class="title function_">panTo</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(res.<span class="property">coords</span>.<span class="property">longitude</span>, res.<span class="property">coords</span>.<span class="property">latitude</span>)); </span><span class="language-javascript">        <span class="comment">// 逆地址解析  // 创建地理编码实例, 并配置参数获取乡镇级数据</span></span><span class="language-javascript">        <span class="keyword">var</span> myGeo = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Geocoder</span>(&#123;<span class="attr">extensions_town</span>: <span class="literal">true</span>&#125;); </span><span class="language-javascript">        <span class="comment">// 根据坐标得到地址描述    </span></span><span class="language-javascript">        myGeo.<span class="title function_">getLocation</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(res.<span class="property">coords</span>.<span class="property">longitude</span>, res.<span class="property">coords</span>.<span class="property">latitude</span>), <span class="keyword">function</span>(<span class="params">result</span>)&#123;      </span><span class="language-javascript">            <span class="keyword">if</span> (result)&#123;      </span><span class="language-javascript">                <span class="title function_">alert</span>(result.<span class="property">address</span>);      </span><span class="language-javascript">            &#125;      </span><span class="language-javascript">        &#125;);</span><span class="language-javascript"></span><span class="language-javascript">    &#125;)</span><span class="language-javascript">    <span class="comment">//开启鼠标滚轮缩放</span></span><span class="language-javascript">    map.<span class="title function_">enableScrollWheelZoom</span>(<span class="literal">true</span>);  </span><span class="language-javascript">    <span class="comment">// 添加平移缩放控件</span></span><span class="language-javascript">    map.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">NavigationControl</span>()); </span><span class="language-javascript">    <span class="comment">// 比例尺控件</span></span><span class="language-javascript">    map.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">ScaleControl</span>()); </span><span class="language-javascript">    <span class="comment">// 缩略图控件 </span></span><span class="language-javascript">    map.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">OverviewMapControl</span>());   </span><span class="language-javascript">    <span class="comment">// 地图类型</span></span><span class="language-javascript">    map.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">MapTypeControl</span>());</span><span class="language-javascript">    <span class="comment">// 添加路况图层</span></span><span class="language-javascript">    <span class="keyword">var</span> traffic = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">TrafficLayer</span>();      </span><span class="language-javascript">    map.<span class="title function_">addTileLayer</span>(traffic); </span><span class="language-javascript">    <span class="comment">// 圆形区域搜索</span></span><span class="language-javascript">    <span class="keyword">var</span> local = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">LocalSearch</span>(map,&#123; </span><span class="language-javascript">        <span class="attr">renderOptions</span>:&#123;</span><span class="language-javascript">            <span class="attr">map</span>: map, </span><span class="language-javascript">            <span class="attr">autoViewport</span>: <span class="literal">true</span></span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;);      </span><span class="language-javascript">    <span class="comment">// 在天安门附近搜索银行</span></span><span class="language-javascript">    local.<span class="title function_">searchNearby</span>(<span class="string">&quot;漫展&quot;</span>,<span class="string">&quot;上海&quot;</span>);   </span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="comment">// 点击按钮切换地球模式</span></span><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getEarth</span>(<span class="params"></span>)&#123;</span><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><span class="language-javascript">        <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">BMapGL</span>.<span class="title class_">Map</span>(<span class="string">&quot;container&quot;</span>);</span><span class="language-javascript">        <span class="keyword">var</span> point = <span class="keyword">new</span> <span class="title class_">BMapGL</span>.<span class="title class_">Point</span>(<span class="number">116.404</span>, <span class="number">39.915</span>);</span><span class="language-javascript">        map.<span class="title function_">centerAndZoom</span>(point, <span class="number">1</span>); </span><span class="language-javascript">        map.<span class="title function_">enableScrollWheelZoom</span>(<span class="literal">true</span>);</span><span class="language-javascript">        map.<span class="title function_">setMapType</span>(<span class="variable constant_">BMAP_EARTH_MAP</span>);</span><span class="language-javascript">    &#125;</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h2 id="canvas画布"><a href="#canvas画布" class="headerlink" title="canvas画布"></a>canvas画布</h2><h3 id="canvas绘图Api"><a href="#canvas绘图Api" class="headerlink" title="canvas绘图Api"></a>canvas绘图Api</h3><p>在script标签中添加如下注释,即可自动提示canvas API<br><strong><code>/** @type &#123;HTMLCanvasElement&#125; 添加canvas API语法提示*/</code></strong><br>(一) 方法:</p><p><code>getContext(&quot;2d&quot;)</code>       创建绘图对象</p><p><code>beginPath();</code>          开始绘制路径</p><p><code>closePath();</code>    结束绘制路径,闭合线框</p><p><code>moveTo(x,y);</code>    移动到绘制起点</p><p><code>lineTo(x,y);</code>    画线段到指定点</p><p><code>arc(x,y,r,start,end);</code>    绘制圆形(弧度单位)</p><p><code>quadraticCurveTo(x,y,endX,endY)</code> 二次贝塞尔曲线</p><p><code>bezierCurveTo(x1,y1,x2,y2,endX,endY)</code> 三次贝塞尔曲线</p><p><code>stroke();</code>        线条类型 </p><p><code>fill();</code>        填充类型</p><p><code>fillRect(x,y,w,h)</code>    填充矩形</p><p><code>strokeRect(x,y,w,h)</code>    线框矩形</p><p><code>clearRect(x,y,w,h)</code>    清除矩形</p><p><code>strokeText(string,x,y)</code> 绘制线条文字(空心)</p><p><code>fillText(string,x,y)</code>    绘制填充文字(实心)</p><p><code>drawImage(img,x,y,width,height)</code>  绘制图片(需在img的load函数中)</p><p><code>save()</code>        保存当前状态设定</p><p><code>restore()</code>        恢复到保存之前的状态设定</p><p><code>rotate()</code>        旋转画布角度(弧度制)</p><p>(二) 属性:</p><p><code>fillStyle</code>        填充颜色(支持rgb(),#fff,red)</p><p><code>strokeStyle</code>    线条颜色</p><p><code>lineWidth</code>        线条宽度(整数值,默认单位px)</p><p><code>lineJoin</code>        折线拐角类型 (round表示圆角)</p><p><code>font</code>         支持多个值, 例如”10px 宋体”    </p><p><code>textBaseline</code>    文字基点(默认bottom左下为基准点, top为左上)</p><p><code>globalCompositeOperation</code> 绘制合成(具体值参考附件)</p><h3 id="canvas语法"><a href="#canvas语法" class="headerlink" title="canvas语法"></a>canvas语法</h3><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">    <span class="selector-tag">canvas</span>&#123;</span><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><span class="language-css">        <span class="comment">/* css设置尺寸只能缩放画布,不能改变画布实际尺寸 */</span></span><span class="language-css">        <span class="comment">/* height: 600px; */</span></span><span class="language-css">    &#125;</span><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="comment">&lt;!-- 属性height/width设置的才是画布的实际尺寸 --&gt;</span>    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 获取canvas标签元素</span></span><span class="language-javascript">        <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLCanvasElement</span>&#125; 添加canvas API语法提示*/</span></span><span class="language-javascript">        <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>)</span><span class="language-javascript">        <span class="comment">// 通过canvas标签获取一个绘图对象</span></span><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 1, 绘制线段</span></span><span class="language-javascript">        ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>, <span class="number">20</span>); <span class="comment">// 设置绘制起点</span></span><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(<span class="number">120</span>, <span class="number">20</span>); <span class="comment">// 绘制线段到终点</span></span><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(<span class="number">120</span>, <span class="number">120</span>); <span class="comment">// 绘制线段到另一个终点</span></span><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(<span class="number">20</span>, <span class="number">120</span>);</span><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(<span class="number">20</span>, <span class="number">20</span>);</span><span class="language-javascript">        ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>,<span class="number">70</span>);  <span class="comment">// 设置另一个绘制起点</span></span><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(<span class="number">120</span>,<span class="number">70</span>);</span><span class="language-javascript">        ctx.<span class="title function_">moveTo</span>(<span class="number">70</span>, <span class="number">20</span>);  <span class="comment">// 设置另一个绘制起点</span></span><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(<span class="number">70</span>,<span class="number">120</span>);</span><span class="language-javascript">        ctx.<span class="title function_">stroke</span>(); <span class="comment">// 执行绘制线段</span></span><span class="language-javascript"></span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 2, 绘制线框矩形</span></span><span class="language-javascript">        ctx.<span class="title function_">strokeRect</span>(<span class="number">150</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">60</span>);</span><span class="language-javascript">        <span class="comment">// 绘制填充矩形</span></span><span class="language-javascript">        ctx.<span class="title function_">fillRect</span>(<span class="number">150</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>);</span><span class="language-javascript">        <span class="comment">// 清理矩形区域</span></span><span class="language-javascript">        ctx.<span class="title function_">clearRect</span>(<span class="number">180</span>, <span class="number">130</span>, <span class="number">20</span>, <span class="number">20</span>);</span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 3, 绘制弧形和扇形</span></span><span class="language-javascript">        <span class="comment">// ctx.moveTo(120, 200) // 先移动移动到圆弧起点</span></span><span class="language-javascript">        ctx.<span class="title function_">beginPath</span>()  <span class="comment">// 开始另一个绘制路径</span></span><span class="language-javascript">        ctx.<span class="title function_">arc</span>(<span class="number">70</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>);</span><span class="language-javascript">        <span class="comment">// ctx.stroke()  // 圆弧</span></span><span class="language-javascript">        ctx.<span class="title function_">fill</span>()       <span class="comment">// 扇形区域</span></span><span class="language-javascript">        ctx.<span class="title function_">closePath</span>() <span class="comment">// 结束另一个绘制路径</span></span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 4, 绘制曲线</span></span><span class="language-javascript">        <span class="comment">// 二次贝塞尔曲线</span></span><span class="language-javascript">        ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>, <span class="number">300</span>);  <span class="comment">// 曲线起点</span></span><span class="language-javascript">        ctx.<span class="title function_">quadraticCurveTo</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">240</span>, <span class="number">300</span>);</span><span class="language-javascript">        ctx.<span class="title function_">stroke</span>()</span><span class="language-javascript">        </span><span class="language-javascript">        <span class="comment">// 三次内塞尔曲线</span></span><span class="language-javascript">        ctx.<span class="title function_">beginPath</span>()</span><span class="language-javascript">        ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;yellow&quot;</span>;</span><span class="language-javascript">        ctx.<span class="property">lineWidth</span> = <span class="number">2</span>;</span><span class="language-javascript">        ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>, <span class="number">400</span>);<span class="comment">// 曲线起点</span></span><span class="language-javascript">        ctx.<span class="title function_">bezierCurveTo</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">500</span>, <span class="number">240</span>, <span class="number">330</span>);</span><span class="language-javascript">        ctx.<span class="title function_">stroke</span>()</span><span class="language-javascript">        ctx.<span class="title function_">closePath</span>()</span><span class="language-javascript"></span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 5, 绘制文字</span></span><span class="language-javascript">        ctx.<span class="property">font</span> = <span class="string">&quot;50px 楷体&quot;</span>;</span><span class="language-javascript">        ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><span class="language-javascript">        ctx.<span class="property">lineWidth</span> = <span class="number">1</span></span><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;green&quot;</span></span><span class="language-javascript">        ctx.<span class="title function_">strokeText</span>(<span class="string">&quot;饕餮&quot;</span>, <span class="number">20</span>, <span class="number">500</span>);</span><span class="language-javascript">        ctx.<span class="title function_">fillText</span>(<span class="string">&quot;王粲博&quot;</span>, <span class="number">150</span>, <span class="number">500</span>);  </span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 6, 绘制图片</span></span><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>)</span><span class="language-javascript">        img.<span class="property">src</span> = <span class="string">&quot;./item338.gif&quot;</span></span><span class="language-javascript">        <span class="comment">// 不能直接绘制图片,需要在img的load事件中绘制</span></span><span class="language-javascript">        img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><span class="language-javascript">            ctx.<span class="title function_">drawImage</span>(img, <span class="number">20</span>, <span class="number">520</span>, <span class="number">260</span>, <span class="number">80</span>)</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></code></pre><h3 id="实例：刮刮乐"><a href="#实例：刮刮乐" class="headerlink" title="实例：刮刮乐"></a>实例：刮刮乐</h3><pre><code class="highlight html"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">        <span class="selector-tag">canvas</span>&#123;</span><span class="language-css">            <span class="attribute">position</span>: relative;</span><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">item338.gif</span>);</span><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><span class="language-css">        &#125;</span><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLCanvasElement</span>&#125; 添加canvas API语法提示*/</span></span><span class="language-javascript">        <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>)</span><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 先绘制灰色图层</span></span><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;gray&#x27;</span>;</span><span class="language-javascript">        ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">150</span>);</span><span class="language-javascript">        </span><span class="language-javascript">        <span class="comment">// 再绘制提示文字</span></span><span class="language-javascript">        ctx.<span class="property">font</span> = <span class="string">&quot;30px 黑体&quot;</span></span><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;green&quot;</span></span><span class="language-javascript">        ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;刮开有惊喜&#x27;</span>, <span class="number">60</span>, <span class="number">80</span>);</span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 图层叠加 (目标图像是已经绘制的图层, 源图像是即将绘制的图像)</span></span><span class="language-javascript">        ctx.<span class="property">globalCompositeOperation</span> = <span class="string">&quot;destination-out&quot;</span></span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 刮图层的函数</span></span><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">gua</span>(<span class="params">e</span>)&#123;</span><span class="language-javascript">            ctx.<span class="title function_">beginPath</span>()</span><span class="language-javascript">            <span class="comment">// e.pageX 相对于网页,  e.layerX 相对于非静态定位元素</span></span><span class="language-javascript">            ctx.<span class="title function_">arc</span>(e.<span class="property">layerX</span>, e.<span class="property">layerY</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>*<span class="number">2</span>)</span><span class="language-javascript">            ctx.<span class="title function_">fill</span>()</span><span class="language-javascript">        &#125;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="comment">// 鼠标按下,开始绘制圆形</span></span><span class="language-javascript">        canvas.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><span class="language-javascript">            canvas.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, gua)</span><span class="language-javascript">        &#125;</span><span class="language-javascript">        <span class="comment">// 鼠标抬起, 停止绘制</span></span><span class="language-javascript">        canvas.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><span class="language-javascript">            canvas.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, gua)</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></code></pre><p><img src="https://tva1.sinaimg.cn/large/006RYYI7ly1h5lksaufxrj30sl0kwalz.jpg" alt="globalCompositeOperation.png"></p><h2 id="WebWoker"><a href="#WebWoker" class="headerlink" title="WebWoker"></a>WebWoker</h2><p><strong>概念</strong><br><code>进程</code>: 一个应用的代码执行流程, 一个应用有且仅有一个进程<br><code>线程</code>: 也叫分线程, 可以独立于主线程执行, 通过代码创建, 可以没有也可以有多个<br><code>主线程</code>: 同 进程<br><code>分线程</code>: 同 线程</p><p><strong>总结</strong>:<br>分线程使用的API:<br><code>new Worker()</code>  创建分线程<br><code>postMessage()</code>  线程之间发送数据<br><code>onmessage</code>   事件,接收线程发送的数据</p><blockquote><p>注意事项:<br>    1, 分线程不能调用界面相关API,只有主线程可以操作界面<br>    2, 线程之能同源访问, 跨域无法引入分线程脚本, 网页不能使用file协议本地打开<br>    3, 分线程和主线程作用域相互隔离,不能直接调用数据, 需要使用postMessage和onmessage发送和接收<br>    4, 分线程不能执行界面相关的alert()等API,但可以执行与界面无关的ajax请求<br>    5, 分线程无法读取本地文件, 分线程中的数据都要来源于网络</p></blockquote><p>参考教程: <a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">http://www.ruanyifeng.com/blog/2018/07/web-worker.html</a></p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><code>var</code> 关键字定义变量有两个作用域  全局作用域 和 局部作用域<br><code>let</code> 关键字定义变量有三个作用域  全局作用域, 局部作用域 和 块级作用域<br><code>全局变量</code>:  在全局范围内定义的变量<br><code>局部变量</code>:  在函数内部定义的变量<br><code>块级变量</code>:  在语法块中定义的变量  比如循环,判断语法块</p><p><strong>举例</strong>: 使用在语法块中定义的变量,只能在语法块中使用</p><pre><code class="highlight js"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;    <span class="keyword">var</span> d = <span class="number">4</span>;    <span class="keyword">let</span> e = <span class="number">5</span>;&#125;<span class="comment">// console.log(d)  // 4</span><span class="comment">// console.log(e)  // undefined</span></code></pre><p><strong>举例</strong>: 在循环中, 实现延时打印</p><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;    <span class="comment">// 在循环中使用var定义变量, 这个变量是全局变量, 每次循环的count共享同一个作用域, 所以下次循环的count把替换上次循环的count, 循环之后,全局只有一个count,值为4</span>    <span class="keyword">var</span> count = i;    <span class="comment">// console.log(count) // 0,1,2,3,4</span>    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 4,4,4,4,4</span>    &#125;, <span class="number">100</span>);    <span class="comment">// 在循环中使用let定义变量, 这个变量是块级变量, 每次循环都会在一个新的块级作用域中定义一个独立块级变量number, 循环结束后, 就有5个块级变量number,他们的值各不相同, 互补影响</span>    <span class="keyword">let</span> number = i;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(number) <span class="comment">// 0,1,2,3,4</span>    &#125;, <span class="number">200</span>);&#125;<span class="comment">// console.log(i) // undefined 循环变量i建议使用let定义, 再循环之外无法调用, 也就避免了全局作用域污染 </span></code></pre><p>如果要在循环中添加计时器或事件绑定, 需要保留每次循环的变量值, 有以下两种解决方案, </p><ol><li>使用let定义块级变量<pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)    &#125;, <span class="number">300</span>);&#125;</code></pre></li><li>使用闭包, 保持count局部变量<pre><code class="highlight js"><span class="keyword">function</span> <span class="title function_">outter</span>(<span class="params">count</span>)&#123;    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>)&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(count)    &#125;&#125;<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;    <span class="built_in">setTimeout</span>(<span class="title function_">outter</span>(i), <span class="number">300</span>);&#125;</code></pre></li></ol><p><strong>let和var的两点主要区别</strong>:</p><ol><li>var 在同一作用域可以重复定义同一个变量, let不行</li><li>var 没有块级作用域, 在循环中定义的变量都是全局的, 会相互覆盖,  let在循环中定义的变量都是独立的,互不影响</li></ol><h2 id="const常量"><a href="#const常量" class="headerlink" title="const常量"></a>const常量</h2><p>ES6新增了两个关键字</p><ol><li>let 定义变量</li><li>const 定义常量<br><code>const</code> 定义值类型数据, 绝对不能改<br><code>const</code> 定义引用类型数据, 数据内容(对象&#x2F;数组中的数据)可以改, 引用类型本身(内存地址)不能改</li></ol><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>如果要把字符串和变量拼接到一起, 有两种写法</p><pre><code class="highlight js"><span class="keyword">var</span> year = <span class="number">2020</span>, month = <span class="number">4</span>, day = <span class="number">20</span>;<span class="comment">// 1, ES5字符串拼接</span><span class="variable language_">console</span>.<span class="title function_">log</span>(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&#x27;月&#x27;</span> + day + <span class="string">&quot;日&quot;</span>)<span class="comment">// 2, es6模板字符串</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;year&#125;</span>年<span class="subst">$&#123;month&#125;</span>月<span class="subst">$&#123;day&#125;</span>日`</span>)<span class="comment">// 由于模板字符串支持换行, 所以可以用来渲染标签字符串</span><span class="keyword">var</span> htmlStr = <span class="string">`</span><span class="string">    &lt;ul&gt;</span><span class="string">        &lt;li&gt;<span class="subst">$&#123;year&#125;</span>年&lt;/li&gt;</span><span class="string">        &lt;li&gt;<span class="subst">$&#123;month&#125;</span>月&lt;/li&gt;</span><span class="string">        &lt;li&gt;<span class="subst">$&#123;day&#125;</span>日&lt;/li&gt;</span><span class="string">    &lt;/ul&gt;</span><span class="string">`</span><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlStr)</code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数用法:</p><ol><li>在事件函数或计时器或异步回调函数中可以保留this上下文指向</li><li>箭头函数在参数和返回值处,满足条件时,都可以简化</li><li>在对象中有一个简化的函数写法</li></ol><pre><code class="highlight js"><span class="comment">// 普通的function函数不能转化为箭头函数</span><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123; &#125;<span class="comment">// 只有匿名函数可以转化为箭头函数</span><span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;<span class="keyword">var</span> <span class="title function_">add</span> = (<span class="params"></span>)=&gt;&#123;&#125;<span class="comment">// 在node环境下, this默认指向空对象</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, <span class="variable language_">this</span>)  <span class="comment">// &#123;&#125;</span><span class="comment">// 可以修改这个对象</span><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>, <span class="variable language_">this</span>)  <span class="comment">// &#123;name: &quot;zhangsan&quot;&#125;</span><span class="comment">// setTimeout会把this指向修改为Timeout对象</span><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>, <span class="variable language_">this</span>) <span class="comment">// Timeout</span>&#125;, <span class="number">1000</span>);<span class="comment">// 箭头函数会保留this的上下文指向, 使this指向和setTimeout外部相同</span><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>, <span class="variable language_">this</span>) <span class="comment">// &#123;name: &quot;zhangsan&quot;&#125;</span>&#125;, <span class="number">1000</span>);<span class="comment">// 箭头函数的简化</span><span class="keyword">var</span> <span class="title function_">add</span> = (<span class="params">count</span>)=&gt;&#123;    <span class="comment">// return count ++</span>    <span class="keyword">return</span> ++ count &#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>)) <span class="comment">// 如果箭头函数只有一个参数, 可以省略小括号</span><span class="keyword">var</span> <span class="title function_">add</span> = count =&gt; &#123; <span class="keyword">return</span> ++ count; &#125;<span class="comment">// 如果箭头函数的函数体中只有一句return返回,  return和&#123;&#125;可同时省略</span><span class="keyword">var</span> <span class="title function_">add</span> = count =&gt; ++count; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">100</span>))<span class="comment">// 箭头函数在对象中的写法, 对象中的函数有以下三种写法</span><span class="keyword">var</span> student = &#123;    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,    <span class="attr">age</span>: <span class="number">20</span>,    <span class="comment">// ES5函数的写法, 其中的this是当前对象</span>    <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;吃饭&quot;</span>)    &#125;,    <span class="comment">// ES6箭头函数写法, 其中的this是对象上下文(全局作用域)指向</span>    <span class="attr">drink</span>: <span class="function">()=&gt;</span>&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;喝水&quot;</span>)    &#125;,    <span class="comment">// 简化写法, 其中this的指向还是当前对象</span>    <span class="title function_">sleep</span>(<span class="params"></span>)&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;睡觉&quot;</span>)    &#125;&#125;student.<span class="title function_">eat</span>()student.<span class="title function_">drink</span>()student.<span class="title function_">sleep</span>()</code></pre><h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><p>数组解构:  <code>var [count1,count2,...count3] = array</code><br>数组赋值1:  array.push(…array2)<br>数组赋值2:  array &#x3D; […array, …array2, 5,6,7]<br>对象解构:  var { age } &#x3D; student<br>对象赋值:  {…student, height:120}</p><pre><code class="highlight js"><span class="comment">// 数组的解构</span><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="comment">// 一般,使用数组中的数据要使用索引取值</span><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">1</span>])<span class="comment">// 数组解构允许我们直接使用变量读取数组中的数据</span><span class="keyword">let</span> [count1, count2, count3, count4] = array<span class="variable language_">console</span>.<span class="title function_">log</span>(count3)<span class="comment">// 注意: 由于数组有顺序,在解构时,一般前边变量个数和数组中数据个数要一一对应</span><span class="comment">// 可以使用 ... 语法解构数组中的一部分数据(靠后的好几条数据)</span><span class="keyword">let</span> [num1, ...num2] = array<span class="variable language_">console</span>.<span class="title function_">log</span>(num2)<span class="comment">// 数组的赋值</span><span class="keyword">var</span> array2 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]<span class="comment">// 需求: 把array2拼接到array中</span><span class="comment">// 方法1: 循环array2把array2的每一条数据加入array中</span><span class="comment">// array2.forEach(item=&gt;&#123;</span><span class="comment">//     array.push(item)</span><span class="comment">// &#125;)</span><span class="comment">// console.log(array)</span><span class="comment">// 方法2: 使用concat数组拼接API</span><span class="comment">// array = array.concat(array2)</span><span class="comment">// console.log(array)</span><span class="comment">// 方法3: 使用 ... 数组赋值</span>array.<span class="title function_">push</span>(...array2)<span class="variable language_">console</span>.<span class="title function_">log</span>(array)<span class="comment">// 数组也可以如下拼接</span>array = [...array, ...array2, <span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]<span class="variable language_">console</span>.<span class="title function_">log</span>(array)<span class="comment">// 对象的解构</span><span class="keyword">var</span> student = &#123;    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,    <span class="attr">age</span>: <span class="number">12</span>,    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,    <span class="attr">phone</span>: <span class="string">&quot;110&quot;</span>&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(student)<span class="comment">// 如果要获取一个对象中的某个字段, 直接用对象打点调用即可</span><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">phone</span>)<span class="comment">// 也可以使用对象解构写法获取某个字段值</span><span class="keyword">var</span> &#123; age, sex &#125; = student;<span class="variable language_">console</span>.<span class="title function_">log</span>(age, sex)<span class="comment">// 注意: 由于对象中的数据没有顺序, 所有对象解构无需把所有字段都写上,可以按需定义变量读取对象中的某一个或几个字段即可, 但必须保证变量名和字段名相同</span><span class="comment">// 把student这个对象中的数据拼接到people对象中</span><span class="keyword">var</span> people = &#123;    <span class="attr">height</span>: <span class="number">120</span>,    <span class="attr">weight</span>: <span class="number">180</span>,    ...student&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(people)<span class="comment">// 字符串解构, 和数组解构类似</span><span class="keyword">var</span> string = <span class="string">&quot;ABC&quot;</span><span class="keyword">var</span> [a,b,c] = string;<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</code></pre><h2 id="数组对象拼接"><a href="#数组对象拼接" class="headerlink" title="数组对象拼接"></a>数组对象拼接</h2><p><strong>数组拼接</strong><br><code>var array1 = [1,2,3]</code><br><code>var array2 = [4,5,6]</code><br><code>console.log([...array1, ...array2, 7,8,9])</code></p><blockquote><p>[<br>    1, 2, 3, 4, 5,<br>    6, 7, 8, 9<br>    ]</p></blockquote><p><strong>对象拼接</strong><br><code>var obj1 = &#123; age: 20 &#125;</code><br><code>var obj2 = &#123; sex: true &#125;</code><br><code>console.log(&#123;...obj1, ...obj2&#125;)</code></p><blockquote><p>{ age: 20, sex: true }</p></blockquote><h2 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h2><pre><code class="highlight js"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">a,b</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b)&#125;<span class="title function_">add1</span>()      <span class="comment">// NaN</span><span class="title function_">add1</span>(<span class="number">3</span>)     <span class="comment">// NaN</span><span class="title function_">add1</span>(<span class="number">3</span>,<span class="number">4</span>)   <span class="comment">// 7</span><span class="title function_">add1</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// 7</span><span class="comment">// js函数定义时有两个参数, 调用时就必须传入至少两个参数,</span><span class="comment">// 如果传入的实参少于形参的个数,为防止错误, 可以给形参设置默认值</span><span class="comment">// ES5中使用 || 设置默认值</span><span class="keyword">function</span> <span class="title function_">add2</span>(<span class="params">a,b</span>)&#123;    a = a || <span class="number">0</span>; <span class="comment">//设置默认值</span>    b = b || <span class="number">0</span>; <span class="comment">//设置默认值</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>( a + b )&#125;<span class="title function_">add2</span>()      <span class="comment">// 0</span><span class="title function_">add2</span>(<span class="number">3</span>)     <span class="comment">// 3</span><span class="title function_">add2</span>(<span class="number">3</span>,<span class="number">4</span>)   <span class="comment">// 7</span><span class="title function_">add2</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// 7</span><span class="comment">// ES6中使用 初始化形参 设置默认值</span><span class="keyword">function</span> <span class="title function_">add3</span>(<span class="params">a=<span class="number">0</span>, b=<span class="number">0</span></span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>( a + b )&#125;<span class="title function_">add3</span>()      <span class="comment">// 0</span><span class="title function_">add3</span>(<span class="number">3</span>)     <span class="comment">// 3</span><span class="title function_">add3</span>(<span class="number">3</span>,<span class="number">4</span>)   <span class="comment">// 7</span><span class="title function_">add3</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// 7</span><span class="comment">// 关于函数的参数, 如果参数个数不确定, 如果获取所有参数</span><span class="comment">// ES5中通过arguments字段获取参数数组</span><span class="keyword">function</span> <span class="title function_">add4</span>(<span class="params"></span>)&#123;    <span class="comment">// arguments是一个类数组, 里边放了所有参数</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>, <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>))&#125;<span class="title function_">add4</span>()      <span class="comment">// &#123;&#125;   []</span><span class="title function_">add4</span>(<span class="number">3</span>)     <span class="comment">// &#123;&quot;0&quot;: 3&#125;   [3]</span><span class="title function_">add4</span>(<span class="number">3</span>,<span class="number">4</span>)   <span class="comment">// &#123;&quot;0&quot;:3, &quot;1&quot;: 4&#125;   [3,4]</span><span class="title function_">add4</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// &#123;&#x27;0&#x27;: 3, &#x27;1&#x27;: 4, &#x27;2&#x27;: 5 &#125;  [3,4,5]</span><span class="comment">// ES6中通过形参...arr获取参数数组</span><span class="keyword">function</span> <span class="title function_">add5</span>(<span class="params">...array</span>)&#123;    <span class="comment">// 形参array是所有参数所在的数组</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(array)&#125;<span class="title function_">add5</span>()      <span class="comment">// []</span><span class="title function_">add5</span>(<span class="number">3</span>)     <span class="comment">// [3]</span><span class="title function_">add5</span>(<span class="number">3</span>,<span class="number">4</span>)   <span class="comment">// [3,4]</span><span class="title function_">add5</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// [3,4,5]</span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise的由来"><a href="#Promise的由来" class="headerlink" title="Promise的由来"></a>Promise的由来</h3><p>js代码执行过程中,分为<code>同步执行</code>和<code>异步执行</code>的两种代码执行逻辑<br><code>同步执行</code>: 代码总是<code>从上向下依次执行</code>,只有上一句执行完,才会执行下一句, 默认js是通过<br><code>异步执行</code>: 特殊形况下,异步代码可以和其他代码同时执行,相互不影响,不严格按照顺序执行, 常见的异步执行逻辑有  计时器, js事件, ajax, promise调用<br>异步代码的<code>标志性特点</code>是: <code>回调函数</code><br>结论: 一段逻辑代码中,总是<code>先执行同步代码</code>, <code>再执行异步代码</code></p><p>上代码：</p><pre><code class="highlight js"><span class="comment">// 这是正常的函数返回值调用</span><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params"></span>)&#123;    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()&#125;<span class="keyword">var</span> random = <span class="title function_">getRandom</span>()<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, random)<span class="comment">// 当函数中有异步操作时,能否return返回异步结果</span><span class="keyword">function</span> <span class="title function_">getRandom2</span>(<span class="params"></span>)&#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()<span class="comment">// 异步函数中的return是无效的</span>    &#125;, <span class="number">100</span>);&#125;<span class="keyword">var</span> random2 = <span class="title function_">getRandom2</span>()<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>, random2)  <span class="comment">// 2 undefined</span></code></pre><h3 id="Promise的语法"><a href="#Promise的语法" class="headerlink" title="Promise的语法"></a>Promise的语法</h3><pre><code class="highlight js"><span class="comment">// Promise 在es6中属于一个 类  要通过new创建promise对象使用,  如下</span><span class="comment">// 新建一个promise对象, 参数是一个同步函数, 同步函数的参数是成功和失败的回调函数 </span><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;    <span class="comment">// 使用new创建promise对象这个操作是同步操作还是异步操作?   同步的</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)    <span class="comment">// 在promise对象中执行异步任务</span>    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)        <span class="keyword">var</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>()        <span class="keyword">if</span>(random &gt; <span class="number">0.5</span>)&#123;            <span class="title function_">resolve</span>(<span class="string">&quot;成功&quot;</span>)        &#125;<span class="keyword">else</span>&#123;            <span class="title function_">reject</span>(<span class="string">&quot;失败&quot;</span>)        &#125;    &#125;, <span class="number">100</span>);&#125;)<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)<span class="comment">// 使用promise对象调用函数then拿成功的数据, 调用catch拿失败的数据</span>p.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>, data)&#125;)p.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>, err)&#125;)<span class="comment">// promise支持链式调用</span>p.<span class="title function_">then</span>().<span class="title function_">catch</span>().<span class="title function_">then</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>, data)&#125;).<span class="title function_">then</span>()<span class="comment">// promise无论何时,何地,多次调用then,总能拿到成功时的数据</span><span class="comment">// 注意: Promise对象的创建过程是同步的, then函数的调用是异步的, 简单说peomise是异步的</span></code></pre><h3 id="Promise示例"><a href="#Promise示例" class="headerlink" title="Promise示例"></a>Promise示例</h3><pre><code class="highlight js"><span class="comment">// 需求: 在四个异步操作中打印四句话,而且要保证打印顺序</span><span class="comment">// setTimeout(() =&gt; &#123;</span><span class="comment">//     console.log(&quot;窗前明月光&quot;)</span><span class="comment">// &#125;, Math.random()*1000);</span><span class="comment">// setTimeout(() =&gt; &#123;</span><span class="comment">//     console.log(&quot;疑似地上霜&quot;)</span><span class="comment">// &#125;, Math.random()*1000);</span><span class="comment">// setTimeout(() =&gt; &#123;</span><span class="comment">//     console.log(&quot;举头望明月&quot;)</span><span class="comment">// &#125;, Math.random()*1000);</span><span class="comment">// setTimeout(() =&gt; &#123;</span><span class="comment">//     console.log(&quot;低头鞋两双&quot;)</span><span class="comment">// &#125;, Math.random()*1000);</span><span class="comment">// 方法一: 四个计时器嵌套, 上一个执行后再执行下一个</span><span class="comment">// setTimeout(() =&gt; &#123;</span><span class="comment">//     console.log(&quot;窗前明月光&quot;);</span><span class="comment">//     setTimeout(() =&gt; &#123;</span><span class="comment">//         console.log(&quot;疑似地上霜&quot;);</span><span class="comment">//         setTimeout(() =&gt; &#123;</span><span class="comment">//             console.log(&quot;举头望明月&quot;);</span><span class="comment">//             setTimeout(() =&gt; &#123;</span><span class="comment">//                 console.log(&quot;低头鞋两双&quot;)</span><span class="comment">//             &#125;, Math.random()*1000);</span><span class="comment">//         &#125;, Math.random()*1000);</span><span class="comment">//     &#125;, Math.random()*1000);</span><span class="comment">// &#125;, Math.random()*1000);</span><span class="comment">// 此方法有两个缺点: </span><span class="comment">// 1, 代码多层嵌套造成结构复杂,可读性差</span><span class="comment">// 2, 四句打印的计时时间累加起来了, 降低效率</span><span class="comment">// 首先, 我们使用promise解决异步任务多层嵌套问题</span><span class="comment">// new Promise(function(resolve)&#123;</span><span class="comment">//     setTimeout(() =&gt; &#123;</span><span class="comment">//         console.log(&quot;窗前明月光&quot;); resolve() // 调用resolve以执行then</span><span class="comment">//     &#125;, Math.random()*1000);</span><span class="comment">// &#125;).then(function()&#123;</span><span class="comment">//     return new Promise(function(resolve)&#123;</span><span class="comment">//         setTimeout(() =&gt; &#123;</span><span class="comment">//             console.log(&quot;疑似地上霜&quot;); resolve() // 调用resolve以执行then</span><span class="comment">//         &#125;, Math.random()*1000);</span><span class="comment">//     &#125;)</span><span class="comment">// &#125;).then(function()&#123;</span><span class="comment">//     return new Promise(function(resolve)&#123;</span><span class="comment">//         setTimeout(() =&gt; &#123;</span><span class="comment">//             console.log(&quot;举头望明月&quot;); resolve() // 调用resolve以执行then</span><span class="comment">//         &#125;, Math.random()*1000);</span><span class="comment">//     &#125;)</span><span class="comment">// &#125;).then(function()&#123;</span><span class="comment">//     return new Promise(function(resolve)&#123;</span><span class="comment">//         setTimeout(() =&gt; &#123;</span><span class="comment">//             console.log(&quot;低头鞋两双&quot;); resolve() // 调用resolve以执行then</span><span class="comment">//         &#125;, Math.random()*1000);</span><span class="comment">//     &#125;)</span><span class="comment">// &#125;)</span><span class="comment">// 然后, 我们使用promise解决 多异步任务并发 的顺序问题</span><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="title function_">resolve</span>(<span class="string">&quot;窗前明月光&quot;</span>)    &#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">1000</span>);&#125;)<span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="title function_">resolve</span>(<span class="string">&quot;疑似地上霜&quot;</span>)    &#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">1000</span>);&#125;)<span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="title function_">resolve</span>(<span class="string">&quot;举头望明月&quot;</span>)    &#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">1000</span>);&#125;)<span class="keyword">var</span> p4 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="title function_">resolve</span>(<span class="string">&quot;低头鞋两双&quot;</span>)    &#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">1000</span>);&#125;)<span class="comment">// Promise有一个类函数all, 可以把多个promise对象合并成一个</span><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3,p4])<span class="comment">// 当合并前的所有promise对象都调用resolve后, 才会调用合并后的then</span>p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">array</span>)&#123;    <span class="comment">// all合并后的then回调函数参数是一个数组, 数组中按照合并顺序依次获取每一个promise对象的成功数据</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(array)&#125;)<span class="comment">// 类函数: 就是使用类名调用的函数 如 all()</span><span class="comment">// 实例函数: 就是使用对象调用的函数  如 then()</span><span class="comment">// 总结: 说一下你对promise的理解?</span><span class="comment">// promise 是es6新增的一个类,主要用于解决项目开发中常见异步回掉地域问题,原理上是对回调函数的封装, 开发中经常用于多异步任务嵌套时和多异步任务并发时</span></code></pre><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><pre><code class="highlight js"><span class="comment">// 在es6新增了一个关键字 叫 async 用于放在函数function前,修饰函数</span><span class="keyword">function</span> <span class="title function_">a</span> ()&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)&#125;<span class="title function_">a</span>()<span class="comment">// 在函数前添加async标记可以使此函数变为异步函数</span><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>)&#125;<span class="title function_">b</span>()<span class="comment">// 箭头函数也可以定义为异步函数</span><span class="keyword">var</span> <span class="title function_">c</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)    <span class="keyword">return</span> <span class="string">&quot;彬哥&quot;</span> <span class="comment">// 即使有返回值, 调用得到的也是promise</span>&#125;<span class="title function_">c</span>()<span class="comment">// async异步函数的返回值总是一个promise对象</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>())<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">b</span>())<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">c</span>())<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>)&#123;    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;            <span class="title function_">resolve</span>(<span class="string">&quot;成功&quot;</span>)        &#125;, <span class="number">1000</span>);    &#125;)    <span class="comment">// 调用then函数,在异步回调函数中获取数据</span>    p.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,data)    &#125;)    <span class="comment">// await关键字一般放在promise对象前边, 等待promise对象成功的结果,一旦成功, 无需调用then, 而是通过同步返回值的形式拿到promise中的异步结果</span>    <span class="keyword">var</span> res = <span class="keyword">await</span> p    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>,res)    <span class="comment">// await 的作用就是让异步回调结构改成同步返回值结构,依然能拿到数据, 好处是简化代码结构, 减少嵌套, 优化语法结构 </span>    <span class="comment">// await is only valid in async function  await只能在async函数中使用</span>&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">d</span>())</code></pre><h2 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h2><ul><li><p><code>模块化</code>: 把一个整体的js文件或代码块通过功能性分割成多个js文件或代码块, 这样每一个js文件都称之为一个<code>模块</code>, 然后通过固定语法导入&#x2F;导出把多个js文件联系到一起, 这种操作,我们称之为<code>模块化</code></p></li><li><p>html文件中使用script导入js算不算模块化?<br>答: 不算,  因为模块化有一个显著特点,是作用域隔离, 各个模块用于各自独立的作用, 互不干涉,  用script导入js相当于把所有js拼到一起了,共享了同一个作用域,这种不能称之为模块化</p></li><li><p>模块化语法:<br>导出: <code>export default data</code><br>导入: <code>import data from &quot;path&quot;</code></p></li></ul><p><strong>从模块myModule中导入数据</strong><br><code>myModule.js</code></p><pre><code class="highlight js"><span class="keyword">var</span> count = <span class="number">100</span><span class="comment">// 使用模块化语法把数据导出</span><span class="keyword">export</span> <span class="keyword">default</span> count</code></pre><p><code>index.js</code></p><pre><code class="highlight js"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./myModule.js&quot;</span><span class="comment">// Cannot use import statement outside a module </span><span class="comment">// 不识别import这个语法, 因为es6模块化语法是不能直接在node或浏览器执行的 </span><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</code></pre><p><strong><code>es6模块化</code>一般用于<code>vue框架</code>或<code>react框架</code>中</strong></p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宠物养成使用教程</title>
      <link href="//usepet.html"/>
      <url>//usepet.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>本篇教程尚未完成，仅供参考</strong></p><span id="more"></span><p>首先，应该先下载cpk文件和数据包（在论坛下载过的不需要再次下载） 插件本体：<a href="https://kasi.lanzous.com/ixe6jedp0uh">点我下载</a> 数据文件：<a href="https://kasi.lanzous.com/iVDEdedp5qd">点我下载</a> 图片文件：<a href="https://474b.com/file/11320748-439869900">点我下载</a> <strong>AIR用户无法发图，AIR即是免费版机器人</strong> 下载完成后，打开酷Q根目录，把压缩包内的文件全部拖入文件夹即可，然后重启机器人即可。 图片教程：<img src="https://i.loli.net/2020/05/09/Aa18mVHy2MPcGLh.gif"> [&#x2F;successbox] [infobox title&#x3D;”宠物养成指令”] 宠物养成默认指令如下： <img src="https://i.loli.net/2020/05/09/5zMAS2XK8gYImUy.jpg"> 补充： 宠物交易： 宠物交易@QQ*物品×数量#交易价格 接受交易、拒绝交易、取消交易 家族列表、家族成员 感谢主群群员@白鲮(24893****)的图片 [&#x2F;infobox] [infobox title&#x3D;”控制台部分解释”]</p><ol><li>核心配置<ol><li>初始宠物：分隔符#，可添加或减少宠物</li><li>消息前缀：可空，但最好有前缀</li><li>主人QQ：为以后的功能做铺垫，请务必填写</li><li>屏蔽前缀指令：不想使用前缀的指令，请添加到这里，可以无视前缀使用</li><li>开启群号：分隔符#，可以多群，不填默认全部群开启。</li></ol></li><li>货币对接<ol><li>货币对接路径：需要填写完整的路径，例如：F:\酷Q Pro\data\app\cc.kasiwuhui.Text\玩家数据\玩家信息.ini</li><li>货币配置节：配置节就是ini文件里“[]”中括号里面的文本，如果是群号就可以填写变量[群号]，如果是QQ就可以填写变量[QQ]</li><li>货币配置项：配置项就是ini文件里“[]”中括号下面&#x3D;等号前面的数据，如果是群号就可以填写变量[群号]，如果是QQ就可以填写变量[QQ]</li></ol></li><li>交易<ol><li>交易最低货币：交易时所出的货币最低不能少于这个数值</li><li>交易手续费：交易成功后所收取的手续费</li></ol></li><li>抽奖<ol><li>抽奖需要物品：物品*数量</li><li>抽奖奖励设置：即奖池，几率%物品*最低数量~最高数量，分隔符为#，至少配置一个100%的奖励，否则会崩溃</li></ol></li></ol><p>[&#x2F;infobox]</p>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> 宠物养成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记13 - Ajax</title>
      <link href="//webNotes-Ajax1.html"/>
      <url>//webNotes-Ajax1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Ajax学习笔记</p><span id="more"></span><h1 id="AJAX的学习笔记-Node-js环境"><a href="#AJAX的学习笔记-Node-js环境" class="headerlink" title="AJAX的学习笔记(Node.js环境)"></a>AJAX的学习笔记(Node.js环境)</h1><p>AJAX学习的笔记，主要环境为Node.js</p><p>课程地址：   <a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。<br>约定, 规则</p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>重点是格式与参数</p><p><code>行      POST  /s?ie=utf-8  HTTP/1.1 </code></p><p><code>头      Host: kassama.top         Cookie: name=kass         Content-type: application/x-www-form-urlencoded         User-Agent: chrome 83</code></p><p><code>空行</code></p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p><code>行      HTTP/1.1  200  OK</code></p><p><code>头      Content-Type: text/html;charset=utf-8         Content-length: 2048         Content-encoding: gzip</code></p><p><code>空行    </code></p><p><code>体      &lt;html&gt;             &lt;head&gt;             &lt;/head&gt;             &lt;body&gt;                 &lt;h1&gt;咔斯Sma&lt;/h1&gt;             &lt;/body&gt;         &lt;/html&gt;</code></p><ul><li>404</li><li>403</li><li>401</li><li>500</li><li>200</li></ul><h2 id="第一章：-原生Ajax"><a href="#第一章：-原生Ajax" class="headerlink" title="第一章： 原生Ajax"></a>第一章： 原生Ajax</h2><h3 id="1-1-Ajax简介"><a href="#1-1-Ajax简介" class="headerlink" title="1.1 Ajax简介"></a>1.1 Ajax简介</h3><ul><li>Ajax全称为Asynchronous Javascript And XML，即异步JS和XML</li><li>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></li><li>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</li></ul><h3 id="1-2-XML简介"><a href="#1-2-XML简介" class="headerlink" title="1.2 XML简介"></a>1.2 XML简介</h3><ul><li>XML：可扩展标记语言</li><li>XML：被设计用来传输和存储数据</li><li>XML和HTML类似，不同点：HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签，用来表示一些数据</li><li>现在已被JSON取代</li></ul><h3 id="1-3-AJAX-的特点"><a href="#1-3-AJAX-的特点" class="headerlink" title="1.3 AJAX 的特点"></a>1.3 AJAX 的特点</h3><h4 id="1-3-1-AJAX的优点"><a href="#1-3-1-AJAX的优点" class="headerlink" title="1.3.1 AJAX的优点"></a>1.3.1 AJAX的优点</h4><ol><li>可以无刷新页面与服务端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ol><h4 id="1-3-2-AJAX-的缺点"><a href="#1-3-2-AJAX-的缺点" class="headerlink" title="1.3.2 AJAX 的缺点"></a>1.3.2 AJAX 的缺点</h4><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li><li>SEO不友好（爬虫获取不到信息）</li></ol><h3 id="1-4-AJAX-的使用"><a href="#1-4-AJAX-的使用" class="headerlink" title="1.4 AJAX 的使用"></a>1.4 AJAX 的使用</h3><h4 id="1-4-1-核心对象"><a href="#1-4-1-核心对象" class="headerlink" title="1.4.1 核心对象"></a>1.4.1 核心对象</h4><h2 id="第二章-jQuery中的AJAX"><a href="#第二章-jQuery中的AJAX" class="headerlink" title="第二章 jQuery中的AJAX"></a>第二章 jQuery中的AJAX</h2><h3 id="2-1-get请求"><a href="#2-1-get请求" class="headerlink" title="2.1 get请求"></a>2.1 get请求</h3><pre><code class="highlight js">$.<span class="title function_">get</span>(url, [data], [callback], [type])<span class="attr">url</span>: 请求的<span class="variable constant_">URL</span>地址<span class="attr">data</span>: 请求携带的参数<span class="attr">callbac</span>: 载入成功时回调函数type：设置返回内容格式，xml、html、script、json、text、_default</code></pre><h3 id="2-2-post请求"><a href="#2-2-post请求" class="headerlink" title="2.2 post请求"></a>2.2 post请求</h3><pre><code class="highlight js">$.<span class="title function_">post</span>(url, [data], [callback], [type])<span class="attr">url</span>: 请求的<span class="variable constant_">URL</span>地址<span class="attr">data</span>: 请求携带的参数<span class="attr">callbac</span>: 载入成功时回调函数type：设置返回内容格式，xml、html、script、json、text、_default</code></pre><h2 id="第三章：-跨域"><a href="#第三章：-跨域" class="headerlink" title="第三章： 跨域"></a>第三章： 跨域</h2><h3 id="3-1-同源策略"><a href="#3-1-同源策略" class="headerlink" title="3.1 同源策略"></a>3.1 同源策略</h3><p>同源策略（Same-Origin Policy）最早由 Netscape 公司提出，是浏览器的一种安全策略。</p><p> 同源：协议、域名、端口号 必须完全相同</p><p>违背同源策略就是跨域</p><h3 id="3-2-如何解决跨域"><a href="#3-2-如何解决跨域" class="headerlink" title="3.2 如何解决跨域"></a>3.2 如何解决跨域</h3><h4 id="3-2-1-JSONP"><a href="#3-2-1-JSONP" class="headerlink" title="3.2.1 JSONP"></a>3.2.1 JSONP</h4><ol><li><p>JSONP是什么</p><p>JSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get请求</p></li><li><p>JSONP 怎么工作的？</p><p>在网页有一些标签天生具有跨域能力，比如：img, link, iframe, script</p><p>JSONP就是利用<strong>script</strong>标签的跨域能力来发送请求的</p></li><li><p>JSONP的使用</p><ul><li>动态的创建一个script标签</li></ul><pre><code class="highlight js"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</code></pre><ul><li>设置script的src，设置回调函数</li></ul><pre><code class="highlight js">script.<span class="property">src</span> = <span class="string">&quot;http://locallhost:3000/textAJAX?callback=abc&quot;</span></code></pre></li></ol><h3 id="3-2-2-CORS"><a href="#3-2-2-CORS" class="headerlink" title="3.2.2 CORS"></a>3.2.2 CORS</h3><p>推荐阅读：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li></ul><ol><li><p>CORS是什么？</p><p>CORS (Cross-Origin Resource Sharing), 跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 等请求。跨域资源共享标准新增了一组 HTTP  首部字段（响应头），允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p></li><li><p>CORS怎么工作的？</p><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p></li><li><p>CORS 的使用</p><p>主要是服务端的设置：</p> <pre><code class="highlight js">rounter.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span>,<span class="keyword">function</span>(<span class="params">req, res</span>)&#123;&#125;)</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记12 - 递归和定时器</title>
      <link href="//webNotes12.html"/>
      <url>//webNotes12.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>递归和定时器 学习总结<br>最近学的有点乱 - -<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><code>递归</code> 自己调用自己，需要在合适地方跳出方法 return进行跳出</p><pre><code class="highlight js"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">n</span>)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(n,<span class="string">&quot;------&quot;</span>)  <span class="comment">// 3 2 1 0</span>  <span class="comment">// f1(3) //递归调用</span>  <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;    <span class="title function_">f1</span>(n-<span class="number">1</span>) <span class="comment">//f1(2) f1(1) f1(0)</span>  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(n,<span class="string">&quot;++++++++&quot;</span>) <span class="comment">// 0  1 2 3</span>&#125;<span class="title function_">f1</span>(<span class="number">3</span>)<span class="comment">// 第25位数是多少 斐波那契数列</span><span class="comment">// 1 1 2 3 5 8 13 21...</span><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">n</span>)&#123;  <span class="keyword">if</span>(n&lt;<span class="number">3</span>)&#123;    <span class="keyword">return</span> <span class="number">1</span>  &#125;  <span class="keyword">return</span>  <span class="title function_">f2</span>(n-<span class="number">1</span>) + <span class="title function_">f2</span>(n-<span class="number">2</span>)&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f2</span>(<span class="number">40</span>))<span class="comment">/*  5</span><span class="comment">f2(4)+f2(3)=f2(3)+f2(2)+f2(3)</span><span class="comment">           = f2(2)+f2(1)+1+f2(2)+f2(1)</span><span class="comment">           =1+1 +1 + 1+ 1 = 5</span><span class="comment">*/</span><span class="comment">// 9！=1 * 2 *3*...9</span><span class="comment">// n的阶乘    9！= 9*8！=9 * 8 *7!</span><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">n</span>)&#123;  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;      <span class="keyword">return</span> <span class="number">1</span>  &#125;  <span class="comment">// arguments.callee() 不使用函数名自己调用自己</span>  <span class="keyword">return</span> n * <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(n-<span class="number">1</span>)&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f3</span>(<span class="number">9</span>))<span class="comment">// 4!  </span><span class="comment">// 4* f3(3)=4*3*f3(2)=4*3*2*f3(1)=4*3*2*1</span></code></pre><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器 每隔一段时间执行一个方法<br>参数1: 回调函数<br>参数2: 时间 以ms为单位<br><code>setInterval</code> 属于异步执行：不会影响后续代码的执行，不会阻塞代码的</p><pre><code class="highlight js"><span class="keyword">var</span> count = <span class="number">1</span><span class="keyword">var</span> left1 = <span class="number">0</span> <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">// 改背景颜色</span><span class="comment">//  var a = Math.random()*255</span><span class="comment">//  var b = Math.random()*255</span><span class="comment">//  var c = Math.random()*255</span><span class="comment">//  d1.style.backgroundColor=`rgb($&#123;a&#125;,$&#123;b&#125;,$&#123;c&#125;)`</span><span class="comment">// 修改背景图片</span><span class="comment">// d1.style.backgroundImage = `url($&#123;count&#125;.webp)`</span><span class="comment">// count++</span><span class="comment">// if(count&gt;=3)&#123;</span><span class="comment">//     count = 1</span><span class="comment">// &#125;</span><span class="comment">// 修改位置平移</span>left1 = left1 + <span class="number">10</span>d1.<span class="property">style</span>.<span class="property">left</span> = left1 + <span class="string">&#x27;px&#x27;</span>&#125;,<span class="number">16.67</span>)<span class="comment">// 浏览器刷新频率是1s 60帧，  一帧的时间 1000/60 = 16.67ms</span><span class="comment">// for属于同步任务，会阻塞代码执行</span><span class="comment">// for(var i = 0;i&lt;10000;i++)&#123;</span><span class="comment">//     console.log(&quot;222222&quot;)</span><span class="comment">// &#125;</span><span class="comment">// console.log(&quot;33333&quot;)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记11 - 深浅拷贝</title>
      <link href="//webNotes11.html"/>
      <url>//webNotes11.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>深浅拷贝 学习总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="栈空间和堆空间"><a href="#栈空间和堆空间" class="headerlink" title="栈空间和堆空间"></a>栈空间和堆空间</h2><p><code>栈空间</code>：一般基本数据类型存放在栈里面，栈类似于电梯结构，先进后出的特点<br><code>堆空间</code>： 一般引用类型存储在堆空间，严格来说，把变量保存在栈空间，把值保存在堆空间，堆类似于排队买饭，先进先出的特点</p><h2 id="基本数据类型值传递"><a href="#基本数据类型值传递" class="headerlink" title="基本数据类型值传递"></a>基本数据类型值传递</h2><p>在赋值的时候，把值本身复制一份，赋值给新变量，修改其中一个时候，另外一个不会变化，类似于复制和粘贴</p><pre><code class="highlight js"><span class="keyword">var</span> a  = <span class="number">10</span> <span class="keyword">var</span> b = a <span class="comment">//赋值</span>a = <span class="number">20</span> <span class="comment">// 修改a不会影响到b</span><span class="variable language_">console</span>.<span class="title function_">log</span>(b)  <span class="comment">//10</span></code></pre><h2 id="复杂类型，引用类型-引用传递"><a href="#复杂类型，引用类型-引用传递" class="headerlink" title="复杂类型，引用类型 引用传递"></a>复杂类型，引用类型 引用传递</h2><p>在赋值的时候，把指针复制一份，把复制的指针赋值给新变量，新旧指针指向的是同一个内存地址，这个俩个变量指向的是同一个数据，修改其中之一，另外一个会跟着修改</p><pre><code class="highlight js"><span class="comment">// 指针：指向内容的地址就是指针</span><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="keyword">var</span> arr1 = arrarr[<span class="number">0</span>] = <span class="string">&quot;好&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">// [&quot;好&quot;，2,3]</span></code></pre><h2 id="赋值封装"><a href="#赋值封装" class="headerlink" title="赋值封装"></a>赋值封装</h2><p>基本数据类赋值场景：变量赋值，函数传参<br>引用类型类赋值场景：变量赋值，函数传参</p><pre><code class="highlight js"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a</span>)&#123;    a = <span class="number">10</span>     <span class="variable language_">console</span>.<span class="title function_">log</span>(a,<span class="string">&quot;------------&quot;</span>) <span class="comment">//10</span>&#125; <span class="keyword">var</span> num1 = <span class="number">200</span>  <span class="title function_">f1</span>(num1) <span class="comment">//把实参赋值给形参  a=num1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(num1,<span class="string">&quot;+++++++&quot;</span>) <span class="comment">//200</span><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">arr3</span>)&#123;    arr3[<span class="number">0</span>]=<span class="string">&quot;好&quot;</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3,<span class="string">&quot;_____________&quot;</span>) <span class="comment">//[&quot;好&quot;,2,3]</span>&#125;<span class="keyword">var</span> newArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="title function_">f2</span>(newArray) <span class="comment">// arr3 = newArray</span><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray,<span class="string">&quot;???????????&quot;</span>)<span class="comment">//[&quot;好&quot;,2,3]</span></code></pre><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><h3 id="基本数据类型拷贝"><a href="#基本数据类型拷贝" class="headerlink" title="基本数据类型拷贝"></a>基本数据类型拷贝</h3><p>修改其中一个另外一个不会跟着变化</p><h3 id="复杂数据类型拷贝"><a href="#复杂数据类型拷贝" class="headerlink" title="复杂数据类型拷贝"></a>复杂数据类型拷贝</h3><p><code>深浅拷贝</code>：仅限于引用类型的数据，(不严谨的说:值传递天生深拷贝)<br><code>深拷贝</code>： 修改其中一个另外一个不会受到影响<br><code>浅拷贝</code>： 修改其中一个另外一个会受到影响 出现场景直接赋值就是浅拷贝</p><h2 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h2><pre><code class="highlight js"><span class="keyword">var</span> obj = &#123;  <span class="attr">name</span>:<span class="string">&#x27;zhangsna&#x27;</span>,  <span class="attr">age</span>:<span class="number">10</span>,&#125;<span class="comment">// 自己实现深拷贝的方式 把o拷贝一个新内存</span><span class="comment">//  没有实现多层拷贝</span><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">o</span>)&#123;  <span class="keyword">var</span> newO = &#123;&#125; <span class="comment">//这个就是新内存</span>  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> o) &#123;    <span class="comment">// 遍历o对象所有属性和属性值添加到新对象里面</span>    newO[key] = o[key]  <span class="comment">// newO[&quot;name&quot;] = zhangsan  newO[&quot;age&quot;] = 10</span>  &#125;  <span class="keyword">return</span> newO &#125;<span class="keyword">var</span> n1 = <span class="title function_">deepCopy</span>(obj)obj.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span> <span class="comment">// n1 没有受到该句的影响</span><span class="variable language_">console</span>.<span class="title function_">log</span>(n1,obj)</code></pre><h3 id="使用json的相关的API进行深拷贝"><a href="#使用json的相关的API进行深拷贝" class="headerlink" title="使用json的相关的API进行深拷贝"></a>使用json的相关的API进行深拷贝</h3><pre><code class="highlight js"><span class="keyword">var</span> o1 = &#123;  <span class="attr">name</span>:<span class="string">&quot;11&quot;</span>,  <span class="attr">age</span>:<span class="number">10</span>,  <span class="attr">study</span>:&#123;    <span class="attr">book</span>:<span class="string">&quot;前端页面开发&quot;</span>  &#125;&#125;</code></pre><ol><li><p>对o1进行转成字符串<br><code>var s1 = JSON.stringify(o1)</code><br><code>console.log(s1)</code></p></li><li><p>再对字符串进行转成对象<br><code>var o2 = JSON.parse(s1)</code></p></li><li><p>修改o1 看看是否影响到o2<br><code>o1.study.book = &quot;java&quot;</code><br><code>console.log(o1,o2) // 不会影响</code></p></li></ol><h2 id="完整深拷贝"><a href="#完整深拷贝" class="headerlink" title="完整深拷贝"></a>完整深拷贝</h2><pre><code class="highlight js"><span class="comment">// 深拷贝</span><span class="keyword">var</span> obj = &#123;  <span class="attr">name</span>:<span class="string">&quot;zs&quot;</span>,  <span class="attr">age</span>:<span class="number">10</span>,  <span class="attr">gf</span>:&#123;    <span class="attr">name</span>:<span class="string">&quot;lis&quot;</span>,    <span class="attr">age</span>:<span class="number">18</span>  &#125;&#125;<span class="comment">// typeof 10  ==number</span><span class="comment">// typeof &quot;1&quot; == string</span><span class="comment">// typeof &#123;&#125;  == object</span><span class="comment">// typeof []  == object</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> [])<span class="comment">//思路：先创建一个空对象，遍历源对象每一层把每一层的属性拷贝到新对象里面</span><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">o</span>)&#123;  <span class="comment">// 如果o是对象创建空对象，如果o是数组创建一个空数组</span>  <span class="comment">// Array.isArray(o) 判断o是不是一个数组</span>  <span class="keyword">var</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(o)?[]:&#123;&#125;  <span class="keyword">if</span>(o &amp;&amp; <span class="keyword">typeof</span> o ==<span class="string">&#x27;object&#x27;</span>)&#123;    <span class="comment">// 如果o存在，并且o的typeof值是object</span>    <span class="comment">// 遍历o对象</span>    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> o) &#123;      <span class="comment">// 判断对象是否key 如果存在取值</span>      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(o, key)) &#123;        <span class="keyword">const</span> element = o[key]; <span class="comment">// 取出对应属性值</span>        <span class="comment">// newObj[key] = element// 对新对象添加属性和属性值  </span>        <span class="comment">//element 有可能是引用类型 例如gf字段 </span>        <span class="keyword">if</span>(element &amp;&amp; <span class="keyword">typeof</span> element ==<span class="string">&quot;object&quot;</span>) &#123;          <span class="comment">// 如果属性值是对象类型</span>          newObj[key] = <span class="title function_">deepCopy</span>(element)        &#125;  <span class="keyword">else</span>&#123;          <span class="comment">// 如果属性值是基本类型</span>          newObj[key] = element        &#125;      &#125;    &#125;  &#125;  <span class="keyword">return</span> newObj&#125;<span class="keyword">var</span> o3 =  <span class="title function_">deepCopy</span>(obj)obj.<span class="property">gf</span>.<span class="property">age</span> = <span class="number">30</span><span class="variable language_">console</span>.<span class="title function_">log</span>(o3)</code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记10 - 对象</title>
      <link href="//webNotes10.html"/>
      <url>//webNotes10.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>对象 学习总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><code>类</code>：具有相同属性和方法的集合<br><code>对象</code>:类的实例化，类的具体化，对象可以把一个整体的属性进行集合保存，</p><pre><code class="highlight js"><span class="keyword">var</span> obj = &#123;&#125; <span class="comment">// 空对象</span><span class="keyword">var</span> zhangsan = &#123;  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="comment">//属性 属性值也可以称为键值对(key value)</span>  <span class="attr">age</span>: <span class="number">10</span>,  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;吃饭&quot;</span>)  &#125;  <span class="comment">//方法</span>&#125;</code></pre><h3 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h3><ol><li><p>访问方式 对象.属性进行访问</p><pre><code class="highlight js"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>) <span class="comment">//对象.属性进行访问</span>zhangsan.<span class="title function_">eat</span>() <span class="comment">//对象方法的调用 如果在方法使用this,this是就是该对象</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//在script标签打印this，this是window对象</span><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// this是window对象</span>&#125;<span class="variable language_">window</span>.<span class="title function_">f1</span>()</code></pre></li><li><p>访问方式</p><pre><code class="highlight js"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan[<span class="string">&#x27;name&#x27;</span>]) <span class="comment">//通过[属性名字符串格式]访问</span><span class="keyword">var</span> f1 = <span class="string">&quot;name&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan[f1]) <span class="comment">//动态访问属性</span><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>) <span class="comment">// 静态访问属性</span></code></pre></li></ol><h3 id="对象遍历-for…in"><a href="#对象遍历-for…in" class="headerlink" title="对象遍历 for…in"></a>对象遍历 for…in</h3><pre><code class="highlight js"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> zhangsan) &#123;    <span class="comment">// hasOwnProperty() 判断对象里面有没有该属性，</span>    <span class="keyword">if</span> (zhangsan.<span class="title function_">hasOwnProperty</span>(key)) &#123;        <span class="comment">// console.log(key) // 对象里面属性</span>        <span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan[key]) <span class="comment">//对象属性值</span>    &#125;&#125;</code></pre><h3 id="如何给对象添加属性"><a href="#如何给对象添加属性" class="headerlink" title="如何给对象添加属性"></a>如何给对象添加属性</h3><pre><code class="highlight js"><span class="keyword">var</span> lisi = &#123;    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,    <span class="attr">stuId</span>:<span class="string">&quot;007&quot;</span>,    <span class="attr">study</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;good good study day day up&quot;</span>)    &#125;&#125;lisi.<span class="property">age</span> = <span class="number">10</span> <span class="comment">// 静态方式添加属性</span>lisi[<span class="string">&quot;sex&quot;</span>] = <span class="literal">true</span> <span class="comment">// 动态方式添加属性</span>lisi.<span class="property">name</span> = <span class="string">&quot;四李&quot;</span> <span class="comment">//修改name属性值</span><span class="keyword">delete</span> lisi.<span class="property">name</span>  <span class="comment">// 删除属性</span><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi)</code></pre><h2 id="for-in-amp-for-of"><a href="#for-in-amp-for-of" class="headerlink" title="for in &amp; for of"></a>for in &amp; for of</h2><h4 id="使用for…of-遍历对象"><a href="#使用for…of-遍历对象" class="headerlink" title="使用for…of 遍历对象"></a>使用for…of 遍历对象</h4><pre><code class="highlight js"><span class="comment">// for in 专门遍历对象</span><span class="comment">// for of 专门遍历数组</span><span class="comment">// .keys(lisi) 对象的所有的属性，数组结构</span><span class="comment">// .values(lisi) 对象的所有的属性值</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(lisi),<span class="string">&quot;0000000000&quot;</span>)<span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(lisi)) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator) <span class="comment">//属性</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(lisi[iterator]) <span class="comment">// 属性值</span>&#125;</code></pre>  <h4 id="for…in-遍历数组"><a href="#for…in-遍历数组" class="headerlink" title="for…in 遍历数组"></a>for…in 遍历数组</h4><pre><code class="highlight js"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="keyword">for</span>(<span class="keyword">const</span> a <span class="keyword">in</span> arr1)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//a就是索引值，把数组理解为属性为0 1 2的对象</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[a])&#125;<span class="comment">// for in 专门遍历对象, 也可以遍历数组</span><span class="comment">// for of 专门遍历数组, 也可以遍历对象</span></code></pre>  ]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记8 - 函数与作用域</title>
      <link href="//webNotes8.html"/>
      <url>//webNotes8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>函数与作用域 学习总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><code>面向对象三大特点</code>: <code>继承</code> <code>多态</code> <code>封装</code>，<br><code>函数</code>: 代码集合体，把相同功能代码封装到一个函数体里面，以后这个函数重复使用了，</p><h3 id="不带参数的函数封装"><a href="#不带参数的函数封装" class="headerlink" title="不带参数的函数封装"></a>不带参数的函数封装</h3><pre><code class="highlight js"><span class="comment">//  关键字 函数名 (形参)&#123;函数体&#125;</span><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;  <span class="keyword">var</span> a = <span class="number">10</span>  <span class="keyword">var</span> b = <span class="string">&quot;10&quot;</span>    <span class="keyword">var</span> c = a+b  <span class="comment">//+ 加法运算，必须保证都是数字； </span>  <span class="comment">// var c = a / b   // 可以把字符串转成数字，然后再去计算</span>  <span class="comment">// var c = a * b    //  把字符串转成数字一种方式，这种方式称为隐式转换</span>    <span class="keyword">if</span>(b)&#123;    <span class="comment">// 如果a数字，   非0都为true</span>    <span class="comment">// 如果字符串    非&quot;&quot;都为true</span>    <span class="comment">// 如果布尔值     true就是true，</span>    <span class="comment">// 如果是空数组    为true</span>    <span class="comment">// 如果是空对象    为true</span>    <span class="comment">// 如果undefined  为false</span>    <span class="comment">// null 不存在     为false</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)   &#125;     &#125;<span class="comment">// 必须调用:函数名()</span><span class="title function_">add</span>()</code></pre><h3 id="递归引入"><a href="#递归引入" class="headerlink" title="递归引入"></a>递归引入</h3><pre><code class="highlight js"><span class="comment">// 1 1 2 3 5 8 13 21</span><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f1&quot;</span>)  <span class="comment">//  too much recursion 函数体里面调用自己 造成死循环，需要合适的地方跳出，就是递归思想</span>  <span class="comment">// f1()</span>&#125;<span class="title function_">f1</span>()</code></pre><h3 id="带参数的函数封装"><a href="#带参数的函数封装" class="headerlink" title="带参数的函数封装"></a>带参数的函数封装</h3><pre><code class="highlight js"><span class="comment">//  a,b,c 多个参数用逗号隔开，形参：在定义的时候没值</span><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">a,b,c</span>)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我的名字是&quot;</span>+a+<span class="string">&quot;年龄是&quot;</span>+b+<span class="string">&quot;性别是&quot;</span>+c)&#125;<span class="title function_">f2</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="string">&quot;男&quot;</span>) <span class="comment">// &quot;张三&quot; 实参， 函数调用的时候，把实参的赋值给形参</span></code></pre><h3 id="带默认参数的函数的封装"><a href="#带默认参数的函数的封装" class="headerlink" title="带默认参数的函数的封装"></a>带默认参数的函数的封装</h3><p>带默认参数的函数的封装，把默认参数写在最后一位</p><pre><code class="highlight js"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">name,stuid,sex=<span class="string">&quot;男&quot;</span></span>)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我的名字是&quot;</span>+name+<span class="string">&quot;性别是&quot;</span>+sex+<span class="string">&quot;学号是&quot;</span>+stuid)&#125;<span class="title function_">f3</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;001&quot;</span>) <span class="comment">//如果给默认参数传值了，默认参数就是传递的数据，如果不传值，默认参数就是默认值</span>  <span class="title function_">f3</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;002&quot;</span>,<span class="string">&quot;女&quot;</span>)  <span class="title function_">f3</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;003&quot;</span>)</code></pre><h3 id="有返回值的函数"><a href="#有返回值的函数" class="headerlink" title="有返回值的函数"></a>有返回值的函数</h3><p>有返回值的函数，必须带关键字return</p><pre><code class="highlight js"><span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params">a,b,c</span>)&#123;  <span class="keyword">return</span> a * b *c&#125;<span class="keyword">var</span> aa = <span class="title function_">f4</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>)<span class="variable language_">console</span>.<span class="title function_">log</span>(aa)</code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li><code>全局作用域</code>: 在script标签定义的变量。就是一个全局变量，可以在任何地方去使用。</li><li><code>局部作用域</code>: 在函数体定义的变量，就是一个局部变量，只能用在当前的函数体中</li><li><code>块级作用域</code>: 在代码块{}定义的变量，采用let进行定义，只能用在当前代码块里面<pre><code class="highlight js"><span class="keyword">var</span> a = <span class="number">10</span> <span class="comment">//全局的变量</span><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)&#125;<span class="title function_">f1</span>()<span class="comment">//var 变量提升只会把变量声明提升到当前作用域最前面</span><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(b,<span class="string">&quot;--------&quot;</span>)  <span class="keyword">var</span> b = <span class="number">10</span> <span class="comment">//局部变量</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(b,<span class="string">&quot;--------&quot;</span>)&#125;<span class="title function_">f2</span>()<span class="comment">// console.log(b) // 局部变量只能用在定义函数体里面</span><span class="comment">//  当全局变量和局部的变量如果冲突了，在局部作用域使用的是局部的变量，</span><span class="comment">//  在全局里面使用的全局变量 </span><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> a = <span class="number">20</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a,<span class="string">&quot;++++++++&quot;</span>)&#125;<span class="title function_">f3</span>()<span class="variable language_">console</span>.<span class="title function_">log</span>(a,<span class="string">&quot;--------------&quot;</span>)<span class="comment">/*</span><span class="comment">1 全局的用起来比较方便 只需要定义一次,全局变量不会被释放,一直占用内存空间</span><span class="comment">2 局部的变量不能在函数体使用,当函数体执行完了,局部的变量就会直接被释放,</span><span class="comment">*/</span><span class="comment">//在局部定义变量如何间接使用在全局里面</span><span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params">e,f</span>)&#123;<span class="keyword">var</span> d = <span class="number">100</span> <span class="comment">// 局部</span><span class="keyword">return</span> d&#125;<span class="keyword">var</span> f = <span class="title function_">f4</span>()<span class="variable language_">console</span>.<span class="title function_">log</span>(f)</code></pre></li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>访问一个变量,按照作用域链进行访问,当访问一个变量,先当前作用域去找,如果找到了,就直接使用,如果没找到,去父级作用域去找,如果父级作用域没有,去他父级的父级作用域去找,直到找到全局作用域为止,这样就形成一个作用域链</p><pre><code class="highlight js"><span class="keyword">var</span> a = <span class="number">100</span><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;  <span class="keyword">var</span> a = <span class="number">30</span>  <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;      <span class="keyword">var</span> a = <span class="number">20</span>      <span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params"></span>) &#123;          <span class="keyword">var</span> a = <span class="number">10</span>          <span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&quot;++++++&quot;</span>) <span class="comment">//10</span>      &#125;      <span class="title function_">f4</span>()      <span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&quot;-------&quot;</span>) <span class="comment">//20</span>  &#125;  <span class="title function_">f3</span>()  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&quot;????????&quot;</span>) <span class="comment">// 30</span>&#125;<span class="title function_">f2</span>()<span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">//100</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记9 - 字符串</title>
      <link href="//webNotes9.html"/>
      <url>//webNotes9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>字符串 学习总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="创建字符串字面量创建"><a href="#创建字符串字面量创建" class="headerlink" title="创建字符串字面量创建"></a>创建字符串字面量创建</h2><p><code>&quot;&quot;</code>  不能嵌入双引号，可以嵌入单引号  可以\n进行换行<br><code>&#39;&#39;</code> 不能嵌入单引号，可以嵌入双引号   可以\n进行换行<br>` ` es6字符串模板 可以支持换行<br>显示特殊符号，需要使用\进行转义<br><code>var s1 = &#39;how\&#39;re you ? \n张三&#39;</code><br><code>console.log(s1)</code></p><h2 id="创建字符串对象方式"><a href="#创建字符串对象方式" class="headerlink" title="创建字符串对象方式"></a>创建字符串对象方式</h2><p><code>var s2 = new String(&#39;蕾姆&#39;)</code><br><code>console.log(s2)</code></p><h2 id="字符串创建基本数据类型"><a href="#字符串创建基本数据类型" class="headerlink" title="字符串创建基本数据类型"></a>字符串创建基本数据类型</h2><p><code>var s3 = String(&#39;蕾姆酱天下第一&#39;)</code><br><code>console.log(s3)</code></p><h2 id="字符串拼接concat-拼接"><a href="#字符串拼接concat-拼接" class="headerlink" title="字符串拼接concat() 拼接"></a>字符串拼接concat() 拼接</h2><pre><code class="highlight js"><span class="keyword">var</span> str1 = <span class="string">&quot;hello&quot;</span><span class="keyword">var</span> str2 = <span class="string">&quot;world&quot;</span><span class="keyword">var</span> str3 = <span class="string">&quot;!&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(str1+str2+str3)<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;str1&#125;</span><span class="subst">$&#123;str2&#125;</span><span class="subst">$&#123;str3&#125;</span>`</span>)<span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">concat</span>(str2,str3))<span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="property">length</span>) <span class="comment">//字符串长度</span><span class="variable language_">console</span>.<span class="title function_">log</span>(str1[<span class="number">0</span>]) <span class="comment">//通过索引值取</span></code></pre><h2 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a>for循环遍历</h2><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;str1.<span class="property">length</span>;i++)&#123;  <span class="keyword">var</span> char = str1[i]  <span class="variable language_">console</span>.<span class="title function_">log</span>(char)&#125;<span class="comment">// es6专门提供一个遍历数组的方式 for...of...</span><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> str1) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator)&#125;</code></pre><h2 id="字符串转成数字的方式"><a href="#字符串转成数字的方式" class="headerlink" title="字符串转成数字的方式"></a>字符串转成数字的方式</h2><pre><code class="highlight js"><span class="keyword">var</span> str4 = <span class="string">&quot;10px&quot;</span>   <span class="comment">// 10*1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(str4*<span class="number">1</span>) <span class="comment">//NAN</span><span class="comment">//parseFloat前提以数字开头的字符串，可以转成数字</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(str4)) <span class="comment">//10 </span><span class="keyword">var</span> a = <span class="number">10.535</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toFixed</span>(<span class="number">2</span>)) <span class="comment">// 数字对象toFixed(2) 保留小数</span></code></pre><h2 id="trim"><a href="#trim" class="headerlink" title=".trim()"></a>.trim()</h2><p>去掉头部和尾部的空格符号<br><code>var str5 = d1.textContent.trim()</code></p><h2 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h2><p>根据传入字符，从指定字符串选取出来，加以显示高亮<br>c 代表是高亮的字符<br>all 代表整个字符</p><h3 id="未封装函数"><a href="#未封装函数" class="headerlink" title="未封装函数"></a>未封装函数</h3><pre><code class="highlight js"><span class="keyword">var</span> htmlStr = <span class="string">&#x27;&#x27;</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;str5.<span class="property">length</span>;i++)&#123;    <span class="keyword">if</span>(str5[i]==<span class="string">&quot;逮&quot;</span>)&#123;        <span class="comment">// 把了替换成span</span>        htmlStr += <span class="string">`&lt;span style=&#x27;background-color:red&#x27;&gt;<span class="subst">$&#123;str5[i]&#125;</span>&lt;/span&gt;`</span>    &#125;<span class="keyword">else</span>&#123;        <span class="comment">// 把不相等也得拼接上</span>        htmlStr+=str5[i]    &#125;&#125;d1.<span class="property">innerHTML</span> = htmlStr</code></pre><h3 id="封装函数-1"><a href="#封装函数-1" class="headerlink" title="封装函数"></a>封装函数</h3><pre><code class="highlight js"><span class="keyword">var</span> htmlStr = <span class="string">&#x27;&#x27;</span><span class="comment">// 封装函数：先考虑要不要传参, 在考虑函数要不要有返回值</span><span class="keyword">function</span> <span class="title function_">getStr</span>(<span class="params">c,all</span>)&#123;  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;all.<span class="property">length</span>;i++)&#123;  <span class="keyword">if</span>(all[i]==c)&#123;    <span class="comment">// 把了替换成span</span>    htmlStr += <span class="string">`&lt;span style=&#x27;background-color:red&#x27;&gt;<span class="subst">$&#123;all[i]&#125;</span>&lt;/span&gt;`</span>  &#125;<span class="keyword">else</span>&#123;    <span class="comment">// 把不相等也得拼接上</span>    htmlStr+=all[i]  &#125;  &#125;&#125;<span class="title function_">getStr</span>(<span class="string">&#x27;男&#x27;</span>,str5)d1.<span class="property">innerHTML</span> = htmlStr</code></pre><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><pre><code class="highlight js"><span class="keyword">var</span> s1 = <span class="string">&quot;abcdEFG&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">toLocaleUpperCase</span>()) <span class="comment">//  转成大写的</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">toLocaleLowerCase</span>())<span class="comment">//   转成小写的</span></code></pre><h2 id="字母与ASCII的转换"><a href="#字母与ASCII的转换" class="headerlink" title="字母与ASCII的转换"></a>字母与ASCII的转换</h2><pre><code class="highlight js"><span class="keyword">var</span> s2 =<span class="string">&quot;abc&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">charAt</span>(<span class="number">0</span>)) <span class="comment">// a 索引值所对应的字符</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))<span class="comment">//97 索引值所对应的字符的ASCII码</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Z&quot;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)) <span class="comment">// 65</span><span class="keyword">var</span> a = <span class="string">&quot;9&quot;</span><span class="keyword">if</span>(a.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)&gt;=<span class="number">65</span> &amp;&amp; a.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)&lt;=<span class="number">90</span>)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;大写字母&quot;</span>)&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0&quot;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))  <span class="comment">//48</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9&quot;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)) <span class="comment">//57</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span>)) <span class="comment">//a  把ASCII转成对应字符</span></code></pre><h2 id="判断字符是否以…开头"><a href="#判断字符是否以…开头" class="headerlink" title="判断字符是否以…开头"></a>判断字符是否以…开头</h2><pre><code class="highlight js"><span class="keyword">var</span>  s3 = <span class="string">&quot;my heart will go on&quot;</span> <span class="comment">// </span><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">startsWith</span>(<span class="string">&#x27;my&#x27;</span>)) <span class="comment">//true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">endsWith</span>(<span class="string">&#x27;my&#x27;</span>))  <span class="comment">// 判断字符是否以...结尾 false</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">startsWith</span>(<span class="string">&#x27;my heart will go on&#x27;</span>)) <span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">endsWith</span>(<span class="string">&#x27;my heart will go on&#x27;</span>))</code></pre><h2 id="indexOf-获取一个字符的下标-重点"><a href="#indexOf-获取一个字符的下标-重点" class="headerlink" title="indexOf 获取一个字符的下标 重点"></a>indexOf 获取一个字符的下标 重点</h2><pre><code class="highlight js"><span class="keyword">var</span> s4 = <span class="string">&quot;abca&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="title function_">indexOf</span>(<span class="string">&quot;a&quot;</span>)) <span class="comment">//0</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;a&quot;</span>))<span class="comment">//3</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-&quot;</span>.<span class="title function_">repeat</span>(<span class="number">20</span>)) <span class="comment">// -重复20次</span></code></pre><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><p><code>replace()</code>     只替换一个<br><code>replaceAll()</code>  替换所有的<br>如果一个方法调用完之后得到是一个字符串，还可以再次调用其他字符串API ,这样就形成一个链式调用</p><pre><code class="highlight js"><span class="keyword">var</span> s5 = <span class="string">&quot;hello world&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s5.<span class="title function_">replace</span>(<span class="string">&quot;l&quot;</span>,<span class="string">&quot;L&quot;</span>).<span class="title function_">replace</span>(<span class="string">&quot;l&quot;</span>,<span class="string">&quot;L&quot;</span>))<span class="variable language_">console</span>.<span class="title function_">log</span>(s5.<span class="title function_">replace</span>(<span class="string">&quot;l&quot;</span>,<span class="string">&#x27;&lt;span&gt;L&lt;/span&gt;&#x27;</span>)) <span class="comment">//把第二个字符串替换掉第一个字符，</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s5.<span class="title function_">replace</span>(<span class="string">&quot;l&quot;</span>,<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;L&lt;/span&gt;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&quot;l&quot;</span>,<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;L&lt;/span&gt;&#x27;</span>))<span class="variable language_">console</span>.<span class="title function_">log</span>(s5.<span class="title function_">replaceAll</span>(<span class="string">&quot;l&quot;</span>,<span class="string">&quot;L&quot;</span>)) <span class="comment">//替换全部</span></code></pre><h2 id="截取子字符串-（重点）"><a href="#截取子字符串-（重点）" class="headerlink" title="截取子字符串 （重点）"></a>截取子字符串 （重点）</h2><pre><code class="highlight js"><span class="keyword">var</span> s6 = <span class="string">&quot;abcdefg&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s6.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">//从第一个开始 到第二个结束 bc</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s6.<span class="title function_">substring</span>(<span class="number">1</span>))<span class="comment">//截取到最后</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s6.<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">3</span>))<span class="comment">//从索引值1开始 截取的长度为3位 bcd</span></code></pre><h2 id="去掉空格符号（了解）"><a href="#去掉空格符号（了解）" class="headerlink" title="去掉空格符号（了解）"></a>去掉空格符号（了解）</h2><p>var s7 &#x3D; “ hello world “<br>console.log(s7.trim()) &#x2F;&#x2F; 去掉前后空格<br>console.log(“ hello world “.trimStart()) &#x2F;&#x2F;去掉开始空格<br>console.log(“ hello world “.trimRight())&#x2F;&#x2F;去掉右边空格</p><h2 id="字符串数组的转换（重点）"><a href="#字符串数组的转换（重点）" class="headerlink" title="字符串数组的转换（重点）"></a>字符串数组的转换（重点）</h2><pre><code class="highlight js"><span class="keyword">var</span> s8 = <span class="string">&quot;http：//1.jpg;http：//2.jpg;http：//3.jpg&quot;</span><span class="keyword">var</span> arr = s8.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>) <span class="comment">//安装某个字符进行分割，不加参数把字符串每一个字符进行分割</span><span class="comment">// 带参数，把参数后面和前面分割成数组的元素</span><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="keyword">var</span> s9 = <span class="string">&quot;1234321&quot;</span><span class="keyword">var</span> arr1 = s9.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>()<span class="keyword">var</span> s10 = arr1.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) <span class="comment">//数组转成字符串</span><span class="keyword">if</span>(s10==s9)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;是倒序数&quot;</span>)&#125;</code></pre><h2 id="三元运算-x2F-三目运算"><a href="#三元运算-x2F-三目运算" class="headerlink" title="三元运算&#x2F;三目运算"></a>三元运算&#x2F;三目运算</h2><pre><code class="highlight js"><span class="keyword">var</span> b = <span class="number">10</span> <span class="keyword">var</span> b1 = b&gt;<span class="number">20</span>?<span class="string">&quot;成年&quot;</span>:<span class="string">&quot;未成年&quot;</span>  <span class="comment">// 如果前面条件成立，结果为？后面的，如果不成立，结果为冒号后面</span><span class="variable language_">console</span>.<span class="title function_">log</span>(b1)</code></pre><h2 id="三个数取最大值"><a href="#三个数取最大值" class="headerlink" title="三个数取最大值"></a>三个数取最大值</h2><pre><code class="highlight js"><span class="keyword">var</span> b2 = <span class="number">20</span><span class="keyword">var</span> b3 = <span class="number">40</span><span class="keyword">var</span> b4 = <span class="number">30</span><span class="keyword">var</span> max =  b2&gt;b3?<span class="attr">b2</span>:b3 <span class="comment">// max就是b2和b3最大值</span>max =  max&gt;b4?<span class="attr">max</span>:b4 <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDate</span>()</code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记7 - 数组</title>
      <link href="//webNotes7.html"/>
      <url>//webNotes7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>数组 学习总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><code>js</code>：弱类型的编程语言，定义变量不清楚变量具体类型，赋值的时候才知道数据的类型，<br><code>数组</code>：用来存储数据元素的，可以存储的类型是任意的，访问数组元素通过索引值进行访问的，最大的索引值的和数组的长度相差1<br><code>var arr = [&quot;张三&quot;,10]</code>  js推荐使用此种方式进行定义数组，</p><h2 id="定义数组方式"><a href="#定义数组方式" class="headerlink" title="定义数组方式"></a>定义数组方式</h2><p>构造函数定义 参数是元素列表<br><code>var p2 = new Array(&quot;hello&quot;,2,3)</code></p><h2 id="定义指定长度的数组"><a href="#定义指定长度的数组" class="headerlink" title="定义指定长度的数组"></a>定义指定长度的数组</h2><p>参数是数字类型<br><code>(arrayLength?: number)</code> 参数列表<br><code>arrayLength</code> 参数名<br><code>?</code> 可传可不传<br><code>number </code>是数字类型</p><h2 id="数组对象定义"><a href="#数组对象定义" class="headerlink" title="数组对象定义"></a>数组对象定义</h2><h3 id="new-Array"><a href="#new-Array" class="headerlink" title="new Array"></a>new Array</h3><p><code>var p3 = new Array(10)</code></p><h3 id="new-Array参数是数组结构"><a href="#new-Array参数是数组结构" class="headerlink" title="new Array参数是数组结构"></a>new Array参数是数组结构</h3><p>相当于数组元素就是数组<br><code>var p4 = new Array([&quot;1&quot;,2,3])</code><br>二维数组调用方式<br><code>console.log(p4[0][1])</code> &#x2F;&#x2F; 2 </p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p><code>var arr = [&quot;张三&quot;,18]</code><br><code>console.log(arr[0])</code> &#x2F;&#x2F;“张三”<br><code>console.log(arr[3])</code> &#x2F;&#x2F; undefined</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])&#125;</code></pre><h3 id="倒序遍历"><a href="#倒序遍历" class="headerlink" title="倒序遍历"></a>倒序遍历</h3><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">var</span> i = arr.<span class="property">length</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i],<span class="string">&quot;----------&quot;</span>)&#125;</code></pre><h3 id="倒序遍历-1"><a href="#倒序遍历-1" class="headerlink" title="倒序遍历"></a>倒序遍历</h3><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[arr.<span class="property">length</span>-<span class="number">1</span>-i],<span class="string">&quot;++++++++++&quot;</span>)&#125;</code></pre><h3 id="数组遍历的API"><a href="#数组遍历的API" class="headerlink" title="数组遍历的API"></a>数组遍历的API</h3><p><code>Array.forEach(callbackfn)</code><br>参数名<code>callbackfn</code>：回调函数，必须是一个函数<br>回调函数的参数就是分别是<br><code>元素</code>，<code>索引值</code>，<code>数组本身</code></p><pre><code class="highlight js">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">v,i,a</span>)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(v,<span class="string">&quot;元素&quot;</span>)  <span class="variable language_">console</span>.<span class="title function_">log</span>(i,<span class="string">&quot;索引值&quot;</span>)  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,<span class="string">&quot;数组本身&quot;</span>)&#125;)</code></pre><h2 id="数组的增删改查操作"><a href="#数组的增删改查操作" class="headerlink" title="数组的增删改查操作"></a>数组的增删改查操作</h2><p>有些操作会影响数组内容本身：数组内方法<br>有些操作不会影响数组内容本身:数组外方法</p><p><code>var numArray = [1,2,3,4,5,6]</code></p><h3 id="添加的操作"><a href="#添加的操作" class="headerlink" title="添加的操作"></a>添加的操作</h3><p><code>numArray.push(&quot;hello&quot;)</code>          向数组最后一个添加元素<br><code>numArray.unshift(&quot;hanmeimei&quot;)</code>   向数组最前面一个添加元素</p><h3 id="通过索引值进行添加"><a href="#通过索引值进行添加" class="headerlink" title="通过索引值进行添加"></a>通过索引值进行添加</h3><p><code>numArray[8]=&quot;lilei&quot;</code></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>numArray.pop()</code>    删除最后一位的 和push一对<br><code>numArray.shift()</code>  删除最前一位的 和unshift一对</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><code>numArray[0] = &quot;10&quot; </code></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>通过索引值访问， 遍历可以访问所有的元素<br><code>console.log(numArray[index])</code><br><code>numArray.forEach(v,i,a)&#123;&#125;</code></p><h3 id="获取元素索引值"><a href="#获取元素索引值" class="headerlink" title="获取元素索引值"></a>获取元素索引值</h3><ol><li><p>如果元素存在 获取的是元素的索引值，如果元素不存在获取的是-1<br><code>console.log(numArray.indexOf(&quot;lilei&quot;))</code></p></li><li><p>findIndex()<br>参数是一个函数，函数的参数：元素，索引，数组本身</p><pre><code class="highlight js"><span class="keyword">var</span> i1 =  numArray.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">v,i,a</span>)&#123;  <span class="comment">// v == &quot;hello&quot;   比较，把v和&quot;hello&quot;相等的元素索引值获取</span>  <span class="keyword">return</span> v == <span class="string">&quot;hello&quot;</span>&#125;)      <span class="variable language_">console</span>.<span class="title function_">log</span>(i1)   <span class="comment">//查找到返回坐标，未查找到返回-1</span></code></pre></li></ol><h2 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串可以理解成一个特殊数组,能够用一些数组的方法</p><pre><code class="highlight js"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>) <span class="comment">// 获取字符串长度 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">2</span>])  <span class="comment">//获取单个字符 l</span><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;o&quot;</span>)) <span class="comment">//某个字符索引</span></code></pre><h3 id="Array-from-1"><a href="#Array-from-1" class="headerlink" title="Array.from() - 1"></a>Array.from() - 1</h3><p>把数据转成数组结构, 参数字符串</p><pre><code class="highlight js"><span class="keyword">var</span> arr =  <span class="title class_">Array</span>.<span class="title function_">from</span>(str)<span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</code></pre><h3 id="Array-from-2"><a href="#Array-from-2" class="headerlink" title="Array.from() - 2"></a>Array.from() - 2</h3><p>参数1 也可以数组<br>参数2 是回调函数,可以对参数1数组元素进行操作</p><p>总体方法用来返回值变化数组结构</p><pre><code class="highlight js"><span class="keyword">var</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="keyword">function</span>(<span class="params">v</span>)&#123;  <span class="keyword">return</span> v *<span class="number">3</span> <span class="comment">// 对数组元素都乘以3返回新数组</span>&#125;)<span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>数组进行合并</p><pre><code class="highlight js"><span class="keyword">var</span> arr3 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]<span class="keyword">var</span> arr4 = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]<span class="keyword">var</span> arr5 = arr4.<span class="title function_">concat</span>(arr3)</code></pre><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>参数是回调函数<br>回调函数每个参数分别为<code>元素</code> <code>索引</code> <code>数组</code></p><pre><code class="highlight js"><span class="comment">// 数组每一个元素都满足这个条件时候,整体结果就为true</span><span class="comment">// return 后面添加一个条件</span><span class="keyword">var</span> arr6 = [<span class="number">7</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>]<span class="keyword">var</span> t1 =  arr6.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">v,i,a</span>)&#123;  <span class="keyword">return</span> v % <span class="number">2</span>==<span class="number">0</span>&#125;)<span class="variable language_">console</span>.<span class="title function_">log</span>(t1)</code></pre><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>只要数组当中有一个满足条件的,结果为true</p><pre><code class="highlight js"><span class="keyword">var</span> t2 = arr6.<span class="title function_">some</span>(<span class="function">(<span class="params">v,i,a</span>)=&gt;</span>&#123;  <span class="keyword">return</span> v%<span class="number">2</span>==<span class="number">0</span>&#125;)<span class="variable language_">console</span>.<span class="title function_">log</span>(t2)</code></pre><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p>返回最后一个元素的索引值</p><pre><code class="highlight js"><span class="keyword">var</span> lastIndex = arr.<span class="title function_">lastIndexOf</span>(<span class="number">3</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(lastIndex)</code></pre><h3 id="filter-过滤函数"><a href="#filter-过滤函数" class="headerlink" title="filter() 过滤函数"></a>filter() 过滤函数</h3><p>函数里面写过滤条件,把满足过滤条件的元素放进一个新数组里面</p><pre><code class="highlight js"><span class="keyword">var</span> a1 = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">v,i,a</span>)&#123;  <span class="keyword">return</span> v % <span class="number">2</span> != <span class="number">0</span>&#125;)<span class="variable language_">console</span>.<span class="title function_">log</span>(a1)</code></pre><h3 id="map-映射函数"><a href="#map-映射函数" class="headerlink" title="map() 映射函数"></a>map() 映射函数</h3><p>把元素按照映射条件进行放入新数组里面</p><pre><code class="highlight js"><span class="keyword">var</span> a2 = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">v,i,a</span>)&#123;  <span class="keyword">return</span> v*<span class="number">3</span>&#125;)<span class="variable language_">console</span>.<span class="title function_">log</span>(a2)</code></pre><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>把数组转成字符串</p><pre><code class="highlight js"><span class="keyword">var</span> s1 = arr.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>)<span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</code></pre><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>把数组的元素倒过来放进数组</p><pre><code class="highlight js"><span class="keyword">var</span> s2 = arr.<span class="title function_">reverse</span>()<span class="variable language_">console</span>.<span class="title function_">log</span>(s2)</code></pre><h3 id="splice-删除数组"><a href="#splice-删除数组" class="headerlink" title="splice() 删除数组"></a>splice() 删除数组</h3><pre><code class="highlight js"><span class="comment">//  参数1 要操作元素的索引值</span><span class="comment">//  参数2 0添加的意思，不为0删除的个数</span><span class="comment">//  参数3 添加的时候，为添加的元素</span><span class="keyword">var</span> arr1 =[<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;wc&quot;</span>,<span class="string">&#x27;mh&#x27;</span>]<span class="comment">// arr1.splice(0,2) //删除</span>arr1.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;wangwu&quot;</span>) <span class="comment">//在索引值为2地方添加了wangwu</span><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)</code></pre><h3 id="slice-截取子数组"><a href="#slice-截取子数组" class="headerlink" title="slice() 截取子数组"></a>slice() 截取子数组</h3><pre><code class="highlight js"><span class="comment">// &quot;111dds.jpg&quot;</span><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]<span class="comment">// 截取子数组，从索引值开始截取，截取到最后</span><span class="comment">// 参数有俩个时候 从第一个开始截取（包头），到第二个结束</span><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">3</span>))<span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">slice</span>(arr2.<span class="property">length</span>-<span class="number">3</span>))</code></pre><h2 id="其他案例"><a href="#其他案例" class="headerlink" title="其他案例"></a>其他案例</h2><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><pre><code class="highlight js"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&#x27;hello&#x27;</span>]<span class="comment">// 不添加新数组的前提  </span><span class="comment">// 拿数组每一个元素和他们后面元素进行对比 如果相等了 把后面元素删除，删除之后下标减一</span><span class="comment">/*</span><span class="comment">function quChong1(arr)&#123;</span><span class="comment">    for(var i = 0;i&lt;arr.length;i++)&#123;</span><span class="comment">        for(var j = i+1;j&lt;arr.length;j++ )&#123;</span><span class="comment">          if(arr[i]==arr[j])&#123;</span><span class="comment">            arr.splice(j,1) </span><span class="comment">            j--</span><span class="comment">          &#125;</span><span class="comment">        &#125;</span><span class="comment">    &#125;</span><span class="comment">    return arr</span><span class="comment">&#125;</span><span class="comment">console.log(quChong1(arr1))</span><span class="comment">*/</span><span class="comment">// 定义一个新数组，遍历原先数组，判断新数组有没有原先数组的元素，如果有，就不添加，如果没有，添加新数组里面</span><span class="keyword">function</span> <span class="title function_">quChong2</span>(<span class="params">arr</span>)&#123;    <span class="keyword">var</span> newArray = []    <span class="comment">// find() 遍历函数， 找到满足遍历条件的元素的值,如果有，result就是这个值，如果没有，result就是undefined</span>    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;        <span class="keyword">var</span> result =  newArray.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">v</span>)&#123;        <span class="keyword">return</span> v == arr[i]      &#125;)      <span class="keyword">if</span>(result==<span class="literal">undefined</span>)&#123;          newArray.<span class="title function_">push</span>(arr[i])      &#125;       &#125;    <span class="keyword">return</span> newArray&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quChong2</span>(arr1))</code></pre><h3 id="简单的注册登录数组"><a href="#简单的注册登录数组" class="headerlink" title="简单的注册登录数组"></a>简单的注册登录数组</h3><pre><code class="highlight js">d<span class="comment">// 注册账号数组</span><span class="keyword">var</span> registerArray = [<span class="string">&quot;sj123456&quot;</span>,<span class="string">&quot;gh123456&quot;</span>,<span class="string">&quot;xzy123456&quot;</span>]<span class="keyword">var</span> use = <span class="string">&quot;xzy123456&quot;</span><span class="keyword">var</span> t3 = registerArray.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">v,i,a</span>)&#123;  <span class="keyword">return</span> v == use&#125;)<span class="keyword">if</span>(t3)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;该账号已被注册&quot;</span>)&#125;<span class="keyword">else</span>&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;恭喜注册成功了&quot;</span>)&#125;<span class="comment">// 账号密码</span><span class="comment">// 判断登录成功与否</span><span class="keyword">var</span> userArray = [&#123;<span class="attr">user</span>:<span class="string">&quot;13653858031&quot;</span>,<span class="attr">psw</span>:<span class="string">&quot;123456&quot;</span>&#125;,&#123;<span class="attr">user</span>:<span class="string">&quot;10086&quot;</span>,<span class="attr">psw</span>:<span class="string">&quot;123456&quot;</span>&#125;,&#123;<span class="attr">user</span>:<span class="string">&quot;10000&quot;</span>,<span class="attr">psw</span>:<span class="string">&quot;123456&quot;</span>&#125;,&#123;<span class="attr">user</span>:<span class="string">&quot;10010&quot;</span>,<span class="attr">psw</span>:<span class="string">&quot;123456&quot;</span>&#125;]<span class="keyword">var</span> user = <span class="string">&quot;10000&quot;</span><span class="keyword">var</span> psw = <span class="string">&quot;123456&quot;</span><span class="keyword">var</span> t4 =  userArray.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">v,i,a</span>)&#123;  <span class="comment">// v对象</span>  <span class="keyword">return</span> v.<span class="property">user</span>==user&amp;&amp;v.<span class="property">psw</span> == psw&#125;)<span class="keyword">if</span>(t4)&#123;  <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>)&#125;<span class="keyword">else</span>&#123;  <span class="title function_">alert</span>(<span class="string">&quot;账号或者密码错误&quot;</span>)&#125;</code></pre>d<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>&#x2F;&#x2F; 实现俩个数字交换位置<br>&#x2F;&#x2F; 定义中间变量<br>var a &#x3D; 10<br>var b &#x3D; 20</p><p>&#x2F;*<br>  var temp &#x3D; a  &#x2F;&#x2F; 把a的值赋值给temp<br>      a &#x3D; b &#x2F;&#x2F;a &#x3D; 20<br>    b &#x3D; temp &#x2F;&#x2F; 10</p><p>console.log(a,b) &#x2F;&#x2F; 20 10<br>*&#x2F;</p><p>&#x2F;&#x2F;不使用中间变量 实现数字交换<br>&#x2F;&#x2F;  b &#x3D; a - b<br>&#x2F;&#x2F;  a &#x3D; a - b  &#x2F;&#x2F; a &#x3D;  a-(a-b)&#x3D;b<br>&#x2F;&#x2F;  b &#x3D; a + b   &#x2F;&#x2F; a-b+b &#x3D;a<br>&#x2F;&#x2F;  console.log(a,b)</p><p>&#x2F;&#x2F; 冒泡：把数组元素从小到大进行排序，<br>var arr &#x3D; [ 1,3,9,20,11,2,5]</p><p>&#x2F;&#x2F; 外循环是经过多少次循环，每次循环找出一个最值<br>&#x2F;&#x2F; 内循环是比较的次数 ,如果前面数比后面大，交换位置<br>&#x2F;&#x2F; 未优化之前的写法</p><p>&#x2F;*<br>for(var i &#x3D; 0;i&lt;arr.length;i++){<br>    for(var j &#x3D; 0;j&lt;arr.length;j++){<br>        if(arr[j]&gt;arr[j+1]){<br>            var temp &#x3D; arr[j] &#x2F;&#x2F; 把大值赋值给temp<br>            arr[j] &#x3D; arr[j+1] &#x2F;&#x2F;把小值提到前面元素上<br>    }<br>}<br>console.log(arr)<br>*&#x2F;</p><p>&#x2F;&#x2F; 外循环是经过多少次循环，每次循环找出一个最值  当i&#x3D;0 找一个最值 ; 当i&#x3D;1 找一个最值<br>&#x2F;&#x2F;  7个数 其实经过6次找出6个最值</p><p>&#x2F;&#x2F; 内循环 第一轮已经找到一个最值，以后比较没有必要再和最值进行相比，<br>for(var i &#x3D; 0;i&lt;arr.length-1;i++){<br>    for(var j &#x3D; 0;j&lt;arr.length-1-i;j++){<br>        if(arr[j]&gt;arr[j+1]){<br>            var temp &#x3D; arr[j] &#x2F;&#x2F; 把大值赋值给temp<br>            arr[j] &#x3D; arr[j+1] &#x2F;&#x2F;把小值提到前面元素上<br>            arr[j+1] &#x3D; temp &#x2F;&#x2F; 把大值放大后面元素<br>        }<br>    }<br>}<br>console.log(arr)                 arr[j+1] &#x3D; temp &#x2F;&#x2F; 把大值放大后面元素<br>        }</p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记6 - Math和Date</title>
      <link href="//webNotes6.html"/>
      <url>//webNotes6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Math和Date 学习总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><h3 id="Math对象API"><a href="#Math对象API" class="headerlink" title="Math对象API"></a>Math对象API</h3><h4 id="向下求整"><a href="#向下求整" class="headerlink" title="向下求整"></a>向下求整</h4><p><code>var n1 = Math.floor(4.9)</code><br><code>console.log(n1)  // 4</code></p><h4 id="向上求整"><a href="#向上求整" class="headerlink" title="向上求整"></a>向上求整</h4><p><code>var n2 = Math.ceil(4.1)</code><br><code>console.log(n2)  // 5</code></p><h4 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h4><p><code>var n3 = Math.round(4.5)</code><br><code>console.log(n3)  // 5</code></p><h4 id="随机数-0-1-包前不包尾"><a href="#随机数-0-1-包前不包尾" class="headerlink" title="随机数 [0,1)  包前不包尾"></a>随机数 [0,1)  包前不包尾</h4><p><code>var n4 = Math.random()</code></p><h2 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h2><h3 id="创建日期对象-通过new-Date-创建"><a href="#创建日期对象-通过new-Date-创建" class="headerlink" title="创建日期对象:通过new Date()创建"></a>创建日期对象:通过new Date()创建</h3><p><code>new</code> 创建一个新的， 申请内存空间的作用存储日期对象<br><code>Date()</code> 构造函数：用来创建对象的， 函数名首先字母是大写<br><code>var now = new Date()</code><br><code>console.log(now)</code></p><h3 id="创建日期对象-Date带参数，参数是字符串时间，把参数转成对象格式"><a href="#创建日期对象-Date带参数，参数是字符串时间，把参数转成对象格式" class="headerlink" title="创建日期对象 Date带参数，参数是字符串时间，把参数转成对象格式"></a>创建日期对象 Date带参数，参数是字符串时间，把参数转成对象格式</h3><p><code>var before = new Date(&quot;2020-04-11 13:14:00&quot;)</code><br><code>console.log(before)</code></p><h3 id="创建日期字符串"><a href="#创建日期字符串" class="headerlink" title="创建日期字符串"></a>创建日期字符串</h3><p><code>var s1 = Date()</code><br><code>console.log(s1)</code></p><h3 id="对象与字符串"><a href="#对象与字符串" class="headerlink" title="对象与字符串"></a>对象与字符串</h3><p>日期对象 例如now.getFullYear() 2020<br><code>console.log(now.getFullYear())</code> 获取年的 2020<br><code>console.log(s1.getFullYear())</code> s1.getFullYear is not a function<br><code>console.log(now.getMonth()+1)</code> 获取月份之后加1<br><code>console.log(now.getDate())</code> 获取日期<br><code>console.log(now.getHours())</code>  获取小时<br><code>console.log(now.getMinutes())</code> 获取分钟<br><code>console.log(now.getSeconds())</code>  获取秒<br><code>console.log(now.getDay())</code> 星期几，星期天是0<br><code>console.log(now.getMilliseconds())</code> 获取ms数  1s&#x3D;1000ms</p><h3 id="Date是js内置对象"><a href="#Date是js内置对象" class="headerlink" title="Date是js内置对象"></a>Date是js内置对象</h3><p><code>now()</code> 获取当前时间距离1970年1月1日的ms数 时间戳<br><code>var d1 = Date.now()</code><br><code>console.log(d1)</code>  1586582040</p><h3 id="把日期字符串转成时间ms数"><a href="#把日期字符串转成时间ms数" class="headerlink" title="把日期字符串转成时间ms数"></a>把日期字符串转成时间ms数</h3><p><code>var d2 =  Date.parse(&quot;2020-04-11 15:32:30&quot;)</code><br><code>console.log(d2)</code></p><h3 id="如何把ms转成日期对象"><a href="#如何把ms转成日期对象" class="headerlink" title="如何把ms转成日期对象"></a>如何把ms转成日期对象</h3><p>把<code>d1 = 1586582040</code>转成年月日<br><code>var d1 = 1586582040</code><br><code>var n2 = new Date(d1)</code><br><code>console.log(n2)</code><br><code>console.log(n2.getFullYear()) </code>&#x2F;&#x2F;2020<br><code>console.log(n2.getMonth()+1)</code></p><h3 id="把日期对象转成字符串"><a href="#把日期对象转成字符串" class="headerlink" title="把日期对象转成字符串"></a>把日期对象转成字符串</h3><p><code>console.log(n2.toDateString())</code> 只保留年月日字符串<br><code>console.log(n2.toString())</code> 转成字符串(重要)<br><code>console.log(n2.toTimeString())</code>  只保留时间</p><h3 id="年月日时分秒"><a href="#年月日时分秒" class="headerlink" title="年月日时分秒"></a>年月日时分秒</h3><p><code>getFullYear()</code> 年<br><code>getMonth()+1</code>  月<br><code>getDate()</code>     日<br><code>getHours()</code>    时<br><code>getMinutes()</code>  分<br><code>getSeconds()</code>  秒<br><code>getDay()</code>      星期<br><code>getMilliseconds()</code> 毫秒</p><p><code>Date.now()</code> 获取当前时间ms数<br><code>Date.parse(&quot;2020-04-11 13:14:00&quot;)</code> 获取当前时间ms数 </p><h3 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h3><h2 id="5-20之间的随机数"><a href="#5-20之间的随机数" class="headerlink" title="5-20之间的随机数"></a>5-20之间的随机数</h2><pre><code class="highlight js"><span class="comment">// [5,20)之间的随机数</span><span class="comment">// 5-20   5-5 - 20-5  =&gt; 0-15=&gt;</span><span class="comment">// Math.random()*15 [0-15)</span><span class="comment">// Math.floor(Math.random()*15) [0,14]</span><span class="comment">// [0,14] + 5   =&gt; [5,20)</span><span class="keyword">var</span> n5 =  <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">15</span>)+<span class="number">5</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(n5)</code></pre><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><pre><code class="highlight js"><span class="comment">// 1*1 = 1</span><span class="comment">// 2*1 = 2 2*2 = 4</span><span class="comment">// 3*1 =3 3*2=6 3*3 = 9</span><span class="comment">// 9*1=9                    9*9 = 81</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;    <span class="comment">// i = 1-9 当成乘数</span>    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j&lt;=i;j++)&#123;        <span class="comment">// j = 当成被乘数</span>        <span class="comment">// 如果i = 1 j= 1</span>        <span class="comment">// 如果i=2   j = 1 2</span>        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>*<span class="subst">$&#123;j&#125;</span>=<span class="subst">$&#123;i*j&#125;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`</span>)        <span class="comment">// document.write(i+&quot;*&quot;+j+&quot;=&quot;+i*j)</span>    &#125;    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)&#125;</code></pre><h2 id="扩展了解"><a href="#扩展了解" class="headerlink" title="扩展了解"></a>扩展了解</h2><pre><code class="highlight js"><span class="comment">// 扩展了解</span><span class="comment">// Math.PI  π  90度 = Math.PI / 2  </span><span class="comment">// sin 正弦  sin90度 = 1  cos0度 = 1   sin0度= 0 cos90度=0 </span><span class="comment">// tan45度= 1  cot45度=1 </span><span class="variable language_">console</span>.<span class="title function_">log</span>(  <span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="number">90</span>))  <span class="comment">// 1 </span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">4</span>)) <span class="comment">//  0.7</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">9</span>)) <span class="comment">// 3 Math.sqrt()开平方</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">3</span>)) <span class="comment">// 3 绝对值</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>,<span class="number">2</span>)) <span class="comment">// 9 第一个数的多少次方</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>,<span class="number">5</span>))<span class="comment">//243</span><span class="title class_">Math</span>.<span class="title function_">floor</span>()  <span class="title class_">Math</span>.<span class="title function_">ceil</span>() <span class="title class_">Math</span>.<span class="title function_">round</span>() <span class="title class_">Math</span>.<span class="title function_">random</span>()<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">3</span>) = <span class="number">2</span>^<span class="number">3</span><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">4</span>,<span class="number">1</span>/<span class="number">2</span>) = <span class="number">2</span> <span class="title class_">Math</span>.<span class="property">PI</span><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">9</span>)  = <span class="number">3</span><span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">3</span>) = <span class="number">3</span></code></pre><h2 id="百钱买百鸡"><a href="#百钱买百鸡" class="headerlink" title="百钱买百鸡"></a>百钱买百鸡</h2><pre><code class="highlight js"><span class="comment">/*</span><span class="comment">百钱买百鸡</span><span class="comment">公鸡 一个5块钱 x=0 x=0 x=0</span><span class="comment">母鸡 一个3块钱 y=0 y=0 y = </span><span class="comment">小鸡 三个一块钱 z=0 z= 1 z =0</span><span class="comment">*/</span><span class="comment">//   公鸡的个数0-100</span><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;=<span class="number">100</span>;x++)&#123;<span class="comment">// 母鸡的个数0-100</span><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;=<span class="number">100</span>;j++)&#123; <span class="comment">// 小鸡的个数0-100</span><span class="keyword">for</span>(<span class="keyword">var</span> z = <span class="number">0</span>;z&lt;=<span class="number">100</span>;z++)&#123;<span class="keyword">var</span> c1 = (x+j+z==<span class="number">100</span>)<span class="keyword">var</span> c2 = (<span class="number">5</span>*x+<span class="number">3</span>*j+z/<span class="number">3</span>==<span class="number">100</span>)<span class="keyword">var</span> c3 = (z%<span class="number">3</span>==<span class="number">0</span>)<span class="keyword">if</span>(c1&amp;&amp;c2&amp;&amp;c3)&#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`公鸡的个数为:<span class="subst">$&#123;x&#125;</span>;母鸡的个数为:<span class="subst">$&#123;j&#125;</span>;小鸡的个数为:<span class="subst">$&#123;z&#125;</span>`</span>)&#125;&#125;&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学记笔记5 - js循环3</title>
      <link href="//webNotes5.html"/>
      <url>//webNotes5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>js循环3 学习总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p>先执行 <code>var i = 0;</code> 判断 <code>i &lt; 10</code>,<br>成立再去执行内部的循环，先去执行 <code>var j = 0</code> ，<br>再去判断 <code>j &lt; 10</code> ,如果成立，去执行内部循环体，再去执行<code>j++</code> ，<br>再去判断是否小于10，如果小于10，在执行内部循环，直到<code>j</code>不小于10，最后执行<code>i++</code></p><blockquote><p>i 和 j 值的变化<br>    <code>i</code>    <code>j</code><br>    <code>0</code>    <code>0 1 2 3 4 5 6 7 8 9</code><br>    <code>1</code>    <code>0 1 2 3 4 5 6 7 8 9</code><br>    <code>2</code>    <code>0 1 2 3 4 5 6 7 8 9</code><br>    …<br>    <code>9</code>    <code>0 1 2 3 4 5 6 7 8 9</code></p></blockquote><pre><code class="highlight js"><span class="comment">// 外循环</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;    <span class="comment">// console.log(i) //0-9</span>    <span class="comment">// 内循环</span>    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;        <span class="comment">// i=0;j=0</span>        <span class="comment">// console.log(&quot;i=&quot; + i + &quot;;j=&quot; + j)</span>        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i=<span class="subst">$&#123;i&#125;</span>;j=<span class="subst">$&#123;j&#125;</span>`</span>)    &#125;&#125;</code></pre><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;    <span class="comment">// break 跳出离他最近的循环嵌套</span>    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(i,j)        <span class="keyword">break</span>    &#125;&#125;<span class="comment">//    i = 0  j = 0   </span><span class="comment">//    i = 1  j = 0 </span><span class="comment">//    i = 2  j = 0</span><span class="comment">//    i = 3  j = 0</span><span class="comment">//    i = 4  j = 0</span></code></pre><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><pre><code class="highlight js"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;    <span class="comment">// break 跳出离他最近的循环嵌套</span>    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(i, j)        <span class="keyword">if</span>(j&lt;<span class="number">2</span>)&#123;            <span class="keyword">break</span>        &#125;    &#125;&#125;<span class="comment">/*</span><span class="comment">    i = 0   j=0 </span><span class="comment">    i = 1   j= 0 </span><span class="comment">    i = 2   j = 0 </span><span class="comment">*/</span></code></pre><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;        <span class="keyword">if</span>(j==<span class="number">2</span>)&#123;            <span class="keyword">break</span>        &#125;        <span class="variable language_">console</span>.<span class="title function_">log</span>(j,<span class="string">&quot;--------------------&quot;</span>) <span class="comment">//打印几次 分别多少</span>        <span class="comment">//  0 1 </span>    &#125;    <span class="variable language_">console</span>.<span class="title function_">log</span>(i,<span class="string">&quot;+++++++++++++++++++++++++&quot;</span>)<span class="comment">//打印几次 分别多少 0 1 2 </span>&#125;<span class="comment">/*</span><span class="comment">    i = 0       j = 0  1    i = 0</span><span class="comment"></span><span class="comment">    i = 1        j=0 1       i = 1</span><span class="comment"></span><span class="comment">    i=2         j=0 1       i = 2</span><span class="comment">*/</span></code></pre><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="案例1-（弹性布局）"><a href="#案例1-（弹性布局）" class="headerlink" title="案例1 （弹性布局）"></a>案例1 （弹性布局）</h3><pre><code class="highlight js">    &lt;style&gt;        #main&#123;                       <span class="attr">width</span>: 1200px;            <span class="attr">margin</span>: <span class="number">0</span> auto;            <span class="comment">/* 弹性布局 */</span>            <span class="attr">display</span>: flex;            <span class="comment">/* 水平的排版方式  space-around：周围有空间*/</span>            <span class="comment">/* space-between 俩者之间有间距 */</span>            justify-<span class="attr">content</span>:space-between;            <span class="comment">/* 换行 */</span>            flex-<span class="attr">wrap</span>: wrap;            <span class="attr">border</span>: 1px solid red;        &#125;        #main .<span class="property">item</span>&#123;            <span class="attr">width</span>: 250px;            <span class="attr">padding</span>: 10px;                  &#125;        #main img&#123;            <span class="attr">width</span>: <span class="number">100</span>%;            <span class="attr">height</span>: 200px;        &#125;    &lt;/style&gt;&lt;/head&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><span class="language-xml">        </span><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;腾发.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       </span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        var 车数组 = data.data.content</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        console.log(车数组)</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        var s1 = &quot;&quot;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        for(var i = 0;i&lt;车数组.length;i++)&#123;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            var 车 = 车数组[i]</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">             var p = &quot;&quot;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            if(车.saleType==2)&#123;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                p = `<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;c1&#x27;</span>&gt;</span>限时特惠<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;else&#123;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                 p = `<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;c2&#x27;</span>&gt;</span>腾发自营<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            </span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            s1 = s1 +  `</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">$&#123;车.cover&#125;</span>  <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">             $&#123;p&#125;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>$&#123;车.carName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span>$&#123;车.dateOfRegistration&#125; $&#123;车.mileage&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>$&#123;车.currentPrice&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">           `</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        main.innerHTML = s1</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        console.log(s1)</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></code></pre><p>JS文件（因篇幅问题，部分数据已被删减）：</p><pre><code class="highlight js"><span class="keyword">var</span> data = &#123;    <span class="string">&quot;status&quot;</span>: <span class="number">200</span>,    <span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,    <span class="string">&quot;data&quot;</span>: &#123;        <span class="string">&quot;totalElements&quot;</span>: <span class="number">3754</span>,        <span class="string">&quot;pages&quot;</span>: <span class="number">188</span>,        <span class="string">&quot;content&quot;</span>: [            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202107151725080963&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2019款 揽胜星脉(进口) 250PS&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1546272000000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">40.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">3.16</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">2</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/257819713441103872.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202105231822590022&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2003款 陆地巡洋舰 4.5L 手动 GX&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1075564800000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">9.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">30.16</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">2</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/227801833416949760.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202106211755020723&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2014款 起亚K5 2.0L 手动 GL&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1404144000000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">4.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">10.31</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">2</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/270495116668436480.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202107201459061126&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2011款 汉兰达 2.7L 自动 两驱豪华版 7座&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1359648000000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">8.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">13.52</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">2</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/275572024418500608.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202106161151190127&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2007款 捷豹XJ(进口) XJ6L 新一代皇家加长版&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1196438400000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">19.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">16.68</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">0</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/278907000484528128.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202107191448321079&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2015款 奔驰E级 改款 E180L 运动型&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1451577600000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">19.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">10.8</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">0</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/257802955825086464.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202109231134445865&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2017款 别克GL8 25S 舒适型 国V&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1509465600000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">16.59</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">9.0</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">0</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/178107228115435520.jpeg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">false</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202106171618320442&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2017款 自由侠 180T 自动动能版+&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1506787200000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">6.99</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">8.0</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">0</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/275287714641739776.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202108061724331343&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2014款 宝马5系 525Li 领先型&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1427817600000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">20.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">15.42</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">2</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/275570205638262784.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202106161645460187&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2020款 威霆 2.0T 精英版 7座&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1612108800000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">46.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">0.08</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">2</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/275286122685267968.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;,            &#123;                <span class="string">&quot;ind&quot;</span>: <span class="string">&quot;202106160917050115&quot;</span>,                <span class="string">&quot;carName&quot;</span>: <span class="string">&quot;2013款 兰德酷路泽(进口) 4000 中东版&quot;</span>,                <span class="string">&quot;dateOfRegistration&quot;</span>: <span class="number">1420041600000</span>,                <span class="string">&quot;currentPrice&quot;</span>: <span class="number">43.9</span>,                <span class="string">&quot;mileage&quot;</span>: <span class="number">11.87</span>,                <span class="string">&quot;saleType&quot;</span>: <span class="number">2</span>,                <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;https://tfcar.oss-cn-hangzhou.aliyuncs.com/265569758785568768.jpg?x-oss-process=style/watermark&quot;</span>,                <span class="string">&quot;reportAssess&quot;</span>: <span class="literal">true</span>            &#125;        ]    &#125;,    <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2022-07-08 15:03:25&quot;</span>&#125;</code></pre><p><img src="https://tva1.sinaimg.cn/large/006RYYI7ly1h4ex44r8rlj31gq0ppe1b.jpg" alt="案例1.png"></p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记4 - js基础2</title>
      <link href="//webNotes4.html"/>
      <url>//webNotes4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>js基础2 自学总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="JS拼接"><a href="#JS拼接" class="headerlink" title="JS拼接"></a>JS拼接</h2><ul><li>拼接的四种方法<ol><li>拼接1：通过 <strong>+</strong> 进行拼接</li><li>拼接2： <strong>`${a}&#96;</strong></li><li>拼接之后结果都是<strong>字符串</strong>和<strong>基本数据类型</strong>进行拼接</li></ol></li></ul><pre><code class="highlight js"><span class="keyword">var</span> a = <span class="number">10</span><span class="comment">// 1 数字和字符串进行拼接 +</span><span class="keyword">var</span> s1 = <span class="string">&quot;我的年龄是&quot;</span>+ a + <span class="string">&quot;岁&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s1)<span class="comment">// 2 es6字符串模板的写法$&#123;a&#125; 给a标量占位置的</span><span class="keyword">var</span> s2 = <span class="string">`我的年龄是<span class="subst">$&#123;a&#125;</span>岁，他的年龄也是<span class="subst">$&#123;a&#125;</span>岁`</span><span class="variable language_">console</span>.<span class="title function_">log</span>(s2)<span class="comment">// 把数字转成字符串的功能 可以是拼接进行转换</span><span class="comment">// 把字符串转化成数字 字符串必须数字字符串</span><span class="keyword">var</span> b = <span class="string">&quot;10&quot;</span><span class="comment">// 1 直接*1, 先把b字符串转成数字，再乘以1，这种转换称为隐式转换</span><span class="variable language_">console</span>.<span class="title function_">log</span>(b*<span class="number">1</span>) <span class="comment">// 2 通过一些api进行转换属于强制转换（显式转换） parseInt() 转换成整型的， parseFloat() 转成浮点数</span><span class="keyword">var</span> c = <span class="built_in">parseInt</span>(b)<span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="keyword">var</span> a1 = <span class="string">&quot;10&quot;</span><span class="keyword">var</span> a2 = <span class="number">2</span><span class="keyword">var</span> a3 = (a1*<span class="number">1</span>+a2) / a2 == <span class="string">&quot;6&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a3)<span class="keyword">var</span> img1 = <span class="string">&quot;./pro-logo.jpg&quot;</span><span class="keyword">var</span> img2 = <span class="string">&quot;./pro-logo2.jpg&quot;</span><span class="keyword">var</span> p1 = <span class="string">&quot;钢筋结构1&quot;</span><span class="keyword">var</span> p2 = <span class="string">&quot;钢筋结构2&quot;</span><span class="keyword">var</span> htmlStr = <span class="string">`</span><span class="string">        &lt;div&gt;</span><span class="string">            &lt;img src=<span class="subst">$&#123;img1&#125;</span> alt=&#x27;&#x27; &gt;</span><span class="string">            &lt;p&gt;<span class="subst">$&#123;p1&#125;</span>&lt;/p&gt;</span><span class="string">        &lt;/div&gt;</span><span class="string">        &lt;div&gt;</span><span class="string">            &lt;img src=<span class="subst">$&#123;img2&#125;</span> alt=&#x27;&#x27; &gt;</span><span class="string">            &lt;p&gt;<span class="subst">$&#123;p2&#125;</span>&lt;/p&gt;</span><span class="string">        &lt;/div&gt;</span><span class="string">`</span><span class="variable language_">document</span>.<span class="title function_">write</span>(htmlStr)</code></pre><blockquote><p>原理：把之前的div标签写成一个字符串，通过for循环 可以拼接多个div，把多个div直接渲染在body里面</p><pre><code class="highlight js"><span class="keyword">var</span> s = <span class="string">&quot;&quot;</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;   s+= <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">// 输出：&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</span></code></pre></blockquote><h2 id="显式转换和隐式转换"><a href="#显式转换和隐式转换" class="headerlink" title="显式转换和隐式转换"></a>显式转换和隐式转换</h2><p><code>显式转化</code> 通过一些api进行转换 parseInt() parseFloat()</p><ul><li><code>parseInt()</code> 把目标转化为整数型</li><li><code>parseFloat()</code> 把目标转化为浮点型（小数型）<br><code>隐式转换</code> “10” * 1 &#x3D; 10  “10”&#x2F;2</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="普通数组"><a href="#普通数组" class="headerlink" title="普通数组"></a>普通数组</h3><p><code>数组</code> 用来存储数据的，每一个元素都是有索引值，通过该元素的索引值进行访问的，索引值从0开始，数组的个数从1开始。<br>例如：</p><blockquote><p><code>var arr1 = [&quot;蕾姆&quot;,&quot;拉姆&quot;,&quot;塞尔达&quot;,&quot;林克&quot;,&quot;米法&quot;]</code><br><code>arr1[0]</code> 就是 “蕾姆”  <code>arr1[4]</code> 就是 “米法”</p></blockquote><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><pre><code class="highlight js"><span class="comment">//  数组遍历</span>    <span class="comment">// array.length 数组的长度</span>     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;           <span class="keyword">var</span> e = arr1[i];           <span class="variable language_">console</span>.<span class="title function_">log</span>(e)     &#125;</code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><pre><code class="highlight js"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">&quot;安培死了&quot;</span>,<span class="string">&quot;百度已经更新安培的年龄消息&quot;</span>]] <span class="comment">// 二维数组</span><span class="keyword">var</span> a1 = arr[<span class="number">1</span>]<span class="comment">// a1[0] 就是 &quot;安倍死了&quot;</span><span class="comment">// arr[0][0] 就是 1</span><span class="comment">// arr [一维数组] [二维数组] [三维数组] 以此类推</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123; <span class="keyword">var</span> e = arr[i] &#125;</code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><code>对象</code> 可以表示多个数据 ，多个数据是属于一个整体，<br><code>对象</code> 包含<code>属性</code>和<code>方法</code><br><code>属性值</code>可以是<code>任意类型</code></p><pre><code class="highlight js"><span class="keyword">var</span> obj = &#123;    <span class="attr">name</span>: <span class="string">&quot;蕾姆&quot;</span>,    <span class="attr">age</span>: <span class="number">18</span>,    <span class="attr">cp</span>:&#123;        <span class="attr">name</span>: <span class="string">&quot;莱月卯&quot;</span>    &#125;,    <span class="attr">sister</span>:&#123;        <span class="attr">name</span>: <span class="string">&quot;拉姆&quot;</span>,        <span class="attr">age</span>: <span class="number">18</span>    &#125;,    <span class="attr">friend</span>:[        &#123;            <span class="attr">name</span>: <span class="string">&#x27;艾米利亚&#x27;</span>,            <span class="attr">age</span>: <span class="number">20</span>        &#125;,        &#123;            <span class="attr">name</span>: <span class="string">&#x27;路人甲A&#x27;</span>,            <span class="attr">age</span>: <span class="number">18</span>        &#125;,        &#123;            <span class="attr">name</span>: <span class="string">&#x27;路人乙B&#x27;</span>,            <span class="attr">age</span>: <span class="number">16</span>        &#125;    ]&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">//对象如何访问属性</span><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">son</span>.<span class="property">name</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">guinv</span>[<span class="number">1</span>].<span class="property">name</span>)<span class="comment">//  获取所有名字</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;obj.<span class="property">guinv</span>.<span class="property">length</span>;i++)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">guinv</span>[i].<span class="property">name</span>)&#125;</code></pre><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>数据分析，遇见 <code>&#123;&#125;</code> 代表对象； 遇见 <code>[]</code> 代表数组;<br><code>d1.innerHTML = &quot;&lt;h1&gt;M&lt;/h1&gt;&quot;</code>    在d1插入html字符串</p><pre><code class="highlight js"><span class="keyword">var</span> data = [    &#123;        <span class="attr">id</span>:<span class="number">1</span>, <span class="comment">//商品id</span>        <span class="comment">// 图片url</span>        <span class="attr">imgUrl</span>:<span class="string">&quot;./img/pro-logo.jpg&quot;</span>,        <span class="attr">info</span>:<span class="string">&quot;厂家直销，不要999，只要99元&quot;</span>,        <span class="attr">company</span>:<span class="string">&quot;河南佰辰机械设备有限公司&quot;</span>,        <span class="attr">tips</span>:[<span class="string">&quot;诚&quot;</span>,<span class="string">&quot;钻石版&quot;</span>],        <span class="attr">price</span>:<span class="number">60000</span>    &#125;,    &#123;        <span class="attr">id</span>:<span class="number">2</span>, <span class="comment">//商品id</span>        <span class="comment">// 图片url</span>        <span class="attr">imgUrl</span>:<span class="string">&quot;./img/pro-logo2.jpg&quot;</span>,        <span class="attr">info</span>:<span class="string">&quot;厂家直销，不要999，只要99元&quot;</span>,        <span class="attr">company</span>:<span class="string">&quot;河南佰辰机械设备有限公司&quot;</span>,        <span class="attr">tips</span>:[<span class="string">&quot;诚&quot;</span>,<span class="string">&quot;钻石版&quot;</span>],        <span class="attr">price</span>:<span class="number">110000</span>    &#125;,    &#123;        <span class="attr">id</span>:<span class="number">3</span>, <span class="comment">//商品id</span>        <span class="comment">// 图片url</span>        <span class="attr">imgUrl</span>:<span class="string">&quot;./img/pro-logo.jpg&quot;</span>,        <span class="attr">info</span>:<span class="string">&quot;厂家直销，不要999，只要99元&quot;</span>,        <span class="attr">company</span>:<span class="string">&quot;河南佰辰机械设备有限公司&quot;</span>,        <span class="attr">tips</span>:[<span class="string">&quot;诚&quot;</span>,<span class="string">&quot;钻石版&quot;</span>],        <span class="attr">price</span>:<span class="number">60000</span>    &#125;]<span class="keyword">var</span> s = <span class="string">&quot;&quot;</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;data.<span class="property">length</span>;i++)&#123;      s+= <span class="string">`&lt;div class=&quot;c1&quot;&gt;</span><span class="string">        &lt;img src=<span class="subst">$&#123;data[i].imgUrl&#125;</span> alt=&quot;&quot;&gt;</span><span class="string">        &lt;p&gt;<span class="subst">$&#123;data[i].info&#125;</span>&lt;/p&gt;</span><span class="string">        &lt;p&gt;<span class="subst">$&#123;data[i].company&#125;</span>&lt;/p&gt;</span><span class="string">        &lt;p&gt;<span class="subst">$&#123;data[i].price&#125;</span>&lt;/p&gt;</span><span class="string">        &lt;/div&gt;`</span>&#125;   <span class="comment">// innerHTML 给元素添加一个html字符串</span>    d1.<span class="property">innerHTML</span> = s<span class="comment">// document.write(s)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记3 - Js基础1</title>
      <link href="//webNotes3.html"/>
      <url>//webNotes3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Js基础1 自学总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="js更改样式"><a href="#js更改样式" class="headerlink" title="js更改样式"></a>js更改样式</h2><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>更改样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- onclick 当点击的时候， changeStyle() 点击执行changeStyle功能--&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeStyle()&quot;</span>&gt;</span>点击更改样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    </span><span class="language-javascript"><span class="comment">//  定义函数</span></span><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeStyle</span>(<span class="params"></span>)&#123;</span><span class="language-javascript">    <span class="comment">// 1查找div元素 通过函数进行查找的 document 文档，getElementById() 通过id获取元素</span></span><span class="language-javascript">    <span class="comment">// .style 添加行内样式 ; .color 字体颜色；</span></span><span class="language-javascript">    <span class="comment">// document.getElementById(&quot;d1&quot;).style.color=&quot;red&quot;</span></span><span class="language-javascript"></span><span class="language-javascript">    <span class="comment">// 2 如果标签设置了id，js可以简单通过id直接获取标签, document.getElementById (&quot;d1&quot;) 类似于 d1</span></span><span class="language-javascript">    d1.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span></span><span class="language-javascript">&#125;</span><span class="language-javascript"></span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p><code>if</code> : 条件控制语句<br><code>switch...case</code> : 条件控制语句<br><code>for</code> : 循环控制语句<br><code>do...while</code> : 循环语句<br><code>while</code> : 循环语句<br><code>try...catch...finally</code> : 语句用于处理代码中可能出现的错误信息</p><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><ol><li><p><code>单独if条件</code> 如果条件成了 执行{代码块}</p> <pre><code class="highlight js"><span class="keyword">var</span> age = <span class="number">33</span><span class="keyword">if</span> (age&gt;<span class="number">40</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;大叔一枚&quot;</span>)&#125;</code></pre></li><li><p><code>多条件判断</code><br> <code>=</code> 赋值 ，name&#x3D;”刘能” 证明name是”刘能, 非空字符串作为if条件 这个时候成立的<br> <code>==</code> 比较相等的<br> <code>===</code> 恒等的 值和类型必须都一样<br> 建议多条件判断不要使用<code>if...if</code> 弊端在于，每个<code>if</code>都会去判断，导致执行时间过长</p> <pre><code class="highlight js"><span class="keyword">var</span> name = <span class="string">&quot;刘德华&quot;</span><span class="keyword">if</span>(name==<span class="string">&quot;刘德华&quot;</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;能执行到不?&quot;</span>)    name = <span class="string">&quot;李嘉诚&quot;</span>&#125;<span class="keyword">if</span>(name==<span class="string">&quot;李嘉诚&quot;</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;帅哥一枚&quot;</span>)&#125;</code></pre></li><li><p><code>if...else</code>  如果…其他的…<br> <code>if...else...</code> 只会判断一次</p> <pre><code class="highlight js"><span class="keyword">var</span> score = <span class="number">80</span><span class="keyword">if</span>(score&gt;<span class="number">60</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我及格了&quot;</span>)    score = <span class="number">59</span>&#125;<span class="keyword">else</span>&#123; <span class="comment">// 相当小于等于60</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;来年再战&quot;</span>)&#125;</code></pre></li><li><p><code>数字作为if条件</code>，非0数字都是true都是成立，0未fasle 不成立的。</p> <pre><code class="highlight js"><span class="keyword">var</span> a = <span class="number">0</span><span class="keyword">if</span>(a)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;33333333333333333333333&#x27;</span>)&#125;</code></pre></li><li><p><code>if...else if...else</code></p> <pre><code class="highlight js">score=<span class="number">80</span><span class="keyword">if</span>(score&gt;<span class="number">90</span>)&#123;    <span class="title function_">alert</span>(<span class="string">&quot;优秀&quot;</span>)&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>&amp;&amp;score&lt;=<span class="number">90</span>)&#123;    <span class="title function_">alert</span>(<span class="string">&quot;良好&quot;</span>)&#125;<span class="keyword">else</span>&#123;    <span class="title function_">alert</span>(<span class="string">&quot;还凑合&quot;</span>)&#125;</code></pre></li></ol><h3 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h3><pre><code class="highlight js"><span class="comment">// switch 开关 ()写判断的变量 </span><span class="comment">// case season 的各种情况</span><span class="keyword">var</span> season = <span class="string">&quot;夏&quot;</span><span class="keyword">switch</span> (season) &#123;    <span class="keyword">case</span> <span class="string">&quot;春&quot;</span>: <span class="comment">//如果season==&quot;春&quot;</span>        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;春天万物复苏&quot;</span>)        <span class="keyword">break</span>;  <span class="comment">// 跳出当前判断</span>    <span class="keyword">case</span> <span class="string">&quot;夏&quot;</span>:        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;夏天烈日炎炎&quot;</span>)        <span class="keyword">break</span>    <span class="keyword">case</span> <span class="string">&quot;秋&quot;</span>:        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;秋天硕果累累&quot;</span>)        <span class="keyword">break</span>    <span class="keyword">case</span> <span class="string">&quot;冬&quot;</span>:        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;冬天白雪皑皑&quot;</span>)        <span class="keyword">break</span>    <span class="attr">default</span>:  <span class="comment">// 如果以上都不成立 执行default 默认</span>        <span class="keyword">break</span>;</code></pre><h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><pre><code class="highlight js"><span class="comment">// 符号</span>    <span class="keyword">var</span> a = <span class="number">10</span>    a = a + <span class="number">10</span>    <span class="comment">// a=20</span>    a =  a - <span class="number">10</span>   <span class="comment">// a = 10</span>    a = a * <span class="number">10</span>   <span class="comment">// a = 100</span>    a = a / <span class="number">10</span>   <span class="comment">// a = 10</span><span class="comment">//   a = a / 3    // a 带小数</span>a = a % <span class="number">3</span>     <span class="comment">// % 求余数 1 </span><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="keyword">var</span> b = <span class="number">3</span>    b+=<span class="number">3</span>   <span class="comment">// b = b+3  6</span>    b*=<span class="number">8</span>   <span class="comment">//48  b*=8    b = b * 8</span>    b/=<span class="number">3</span>   <span class="comment">//16</span>    b%=<span class="number">3</span>    <span class="comment">// 1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">// ++  每次加1  ，c++ 等同于 c=c+1 等同于 c+=1</span><span class="comment">// -- 每次减1</span><span class="comment">// ++ 在前 本身先加1 ，再赋值</span><span class="comment">// ++在后 先赋值  本身再加1</span><span class="keyword">var</span> c = <span class="number">30</span> <span class="keyword">var</span> d = c++   <span class="comment">// d =30 ,c=31</span>    <span class="keyword">var</span> e = ++c <span class="comment">//  c = 32 ,e=32</span><span class="variable language_">console</span>.<span class="title function_">log</span>(c,d,e)<span class="comment">// 比较运算符号</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>&gt;<span class="number">4</span>) <span class="comment">//false</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>&lt;=<span class="number">4</span>) <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>==<span class="number">4</span>) <span class="comment">//false</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>==<span class="number">4</span>)  <span class="comment">// true 把字符串4转成数字4 再进行比较</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>===<span class="number">4</span>)  <span class="comment">//false 恒等 数字和类型都得相等</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>!=<span class="number">4</span>)  <span class="comment">// true</span><span class="comment">//逻辑运算符号</span><span class="comment">//  &amp;&amp; 并且  多个条件必须同时成立 才为true</span><span class="comment">// || 或者  只要有一个为true，整个条件都为true</span><span class="comment">// ! 非     取反</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>&amp;&amp;<span class="literal">true</span>) <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>&amp;&amp;<span class="literal">false</span>)  <span class="comment">//fasle</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>&gt;<span class="number">4</span>&amp;&amp;<span class="literal">true</span>)  <span class="comment">//false</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">false</span>)  <span class="comment">//true</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="number">3</span>&gt;<span class="number">4</span> )  <span class="comment">//false</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>) <span class="comment">// true</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="number">1</span>)  <span class="comment">//fasle</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="string">&quot;&quot;</span>) <span class="comment">//true</span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><pre><code class="highlight js"><span class="comment">// var i = 0 循环初始值</span><span class="comment">//  i&lt;10 循环条件</span><span class="comment">//  i++ 每次i加1</span><span class="comment">// 先执行初始条件，再判断是否小于10，如果小于10，执行循环体，最后i的值再加1</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//0-9</span>&#125;<span class="comment">// 如果改变循环次数的时候</span><span class="comment">// 1 改循环条件</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)  <span class="comment">// 0-4</span>&#125;<span class="comment">// 2 改循环初始值</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">5</span>;i&lt;<span class="number">10</span>;i++)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)  <span class="comment">// 5-9</span>&#125;<span class="comment">// 3 改递增值</span><span class="comment">// i+2  表达式  没有赋值</span><span class="comment">// i+=2 i=i+2  把加的结果赋值给i</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i+=<span class="number">2</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)  <span class="comment">// 0 2 4 6 8</span>&#125;<span class="comment">// for非常规的操作1 for循环是同步执行的，执行完for之后才会往下执行，阻塞代码的执行</span><span class="comment">// for(var i = 0;i&lt;999999999;i++)&#123;</span><span class="comment">//     console.log(i)</span><span class="comment">// &#125;</span><span class="comment">// alert(10000)</span><span class="comment">// 非常规的操作2 写成一个死循环</span><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i--)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(i+<span class="string">&quot;-----------&quot;</span>)  <span class="comment">// 0  -1 -2 -3 -4</span>    <span class="keyword">if</span>(i==-<span class="number">4</span>)&#123;  <span class="comment">//当i==-4时候 执行break</span>        <span class="keyword">break</span> <span class="comment">// 跳出循环体 循环不在执行了</span>    &#125;     &#125;<span class="comment">// 练习 </span><span class="comment">//   3人 余2人; 5人 余4人；7人 余6人；9人 余8人;11人正好 问最少多少人？</span><span class="comment">//  0 1 2 3</span><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="number">9999</span>;i++)&#123;    <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span> &amp;&amp; i%<span class="number">5</span>==<span class="number">4</span> &amp;&amp; i%<span class="number">7</span>==<span class="number">6</span> &amp;&amp; i%<span class="number">9</span>==<span class="number">8</span> &amp;&amp; i%<span class="number">11</span>==<span class="number">0</span>)&#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">//最少2519 </span>    &#125;&#125;</code></pre><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><pre><code class="highlight js"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;&#125;<span class="comment">// 先判断 再执行</span><span class="comment">// while() 当条件成立了 执行&#123;&#125;</span><span class="keyword">var</span> a = <span class="number">0</span><span class="keyword">while</span>(a&lt;<span class="number">3</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,<span class="string">&quot;11111&quot;</span>)    a++&#125;<span class="keyword">var</span> b = <span class="number">3</span><span class="comment">// 现执行再判断，最起码执行一次</span><span class="keyword">do</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bbbbbbb&quot;</span>)&#125; <span class="keyword">while</span> (b&lt;<span class="number">3</span>);<span class="comment">// true 死循环</span><span class="comment">// while(1)&#123;</span><span class="comment">//     console.log(&quot;111111&quot;)</span><span class="comment">// &#125;</span></code></pre><h3 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h3><p><code>contine</code> : 结束本次循环 执行下次循环<br><code>breake</code> : 跳出循环</p><pre><code class="highlight js"><span class="comment">/*</span><span class="comment">for(var i = 0;i&lt;10;i++)&#123;</span><span class="comment">    console.log(i)  //0-9</span><span class="comment">    if(i&gt;5)&#123;</span><span class="comment">        continue // 结束本次循环，执行下次循环</span><span class="comment">    &#125;</span><span class="comment">&#125;</span><span class="comment"></span><span class="comment">for(var i = 0;i&lt;10;i++)&#123;</span><span class="comment">    </span><span class="comment">    if(i&gt;5)&#123;</span><span class="comment">        continue // 继续循环， 结束本次循环，执行下次循环</span><span class="comment">        console.log(i,&quot;---------------&quot;)  //没打印</span><span class="comment">    &#125;</span><span class="comment">&#125;</span><span class="comment"></span><span class="comment"></span><span class="comment">for(var i = 0;i&lt;10;i++)&#123;</span><span class="comment">    if(i&gt;5)&#123;</span><span class="comment">        console.log(i,&quot;++++++++++&quot;) // 6 7 8 9 </span><span class="comment">        continue // 继续循环， 结束本次循环，执行下次循环     </span><span class="comment">    &#125;</span><span class="comment">&#125;</span><span class="comment"></span><span class="comment">for(var i = 0;i&lt;10;i++)&#123;</span><span class="comment">    console.log(i,&quot;=======&quot;) // 0 1 2 3 4 5 6  7 8 9</span><span class="comment">    if(i&lt;5)&#123;</span><span class="comment">        console.log(i,&quot;dddddddddddddddddddd&quot;) // 0 1 2 3 4</span><span class="comment">        continue // 继续循环， 结束本次循环，执行下次循环    </span><span class="comment"></span><span class="comment">    &#125;</span><span class="comment">&#125;</span><span class="comment"></span><span class="comment">for(var i = 0;i&lt;10;i++)&#123;</span><span class="comment">    if(i&lt;5)&#123;</span><span class="comment">        continue // 继续循环， 结束本次循环，执行下次循环    </span><span class="comment">    &#125;</span><span class="comment">    console.log(i,&quot;????????????????????????????????????&quot;)//56789</span><span class="comment">&#125;</span><span class="comment">*/</span><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(i,<span class="string">&quot;jjjjjjjjjjjjjjjjj&quot;</span>); <span class="comment">// 0</span>    <span class="keyword">break</span>        <span class="comment">// 跳出循环 后面代码不执行</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(i,<span class="string">&quot;hhhhhhhhhhhhhhh&quot;</span>)&#125;<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;<span class="keyword">if</span>(i&lt;<span class="number">5</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>,i)  <span class="comment">// 0 1 2 3 4</span>    <span class="keyword">continue</span>&#125;<span class="keyword">if</span>(i&gt;<span class="number">5</span>)&#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>,i) <span class="comment">// 6</span>    <span class="keyword">break</span>&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>,i) <span class="comment">//5</span>&#125;</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><code>+</code> : 相加<br><code>-</code> :相减<br><code>/</code> : 除以 带小数<br><code>%</code> : 求余数<br><code>+=</code> : i +&#x3D; 1  等同于  i &#x3D; i + 1<br><code>-=</code> : i -&#x3D; 1  等同于  i &#x3D; i - 1<br><code>*=</code> : i *&#x3D; 1  等同于  i &#x3D; i * 1<br><code>/=</code> : i &#x2F;&#x3D; 1  等同于  i &#x3D; i &#x2F; 1<br><code>%=</code> : i %&#x3D; 1  等同于  i &#x3D; i % 1</p><p><code>++ </code> 在前 先加后赋值 ； <code>++</code>在后 先赋值在加1 </p><h3 id="i的结果"><a href="#i的结果" class="headerlink" title="++i的结果"></a>++i的结果</h3><p><code>var  i = 10 var a = ++i</code></p><p>a &#x3D; 11<br>i &#x3D; 11</p><h3 id="i-的结果"><a href="#i-的结果" class="headerlink" title="i++的结果"></a>i++的结果</h3><p><code>var a = i++</code></p><p>a &#x3D; 10 i&#x3D;11</p><p><em><code>- -i</code> 和 <code>i- -</code>也是一样</em></p><h3 id="比较运算符号"><a href="#比较运算符号" class="headerlink" title="比较运算符号"></a>比较运算符号</h3><p><code>==</code> 相等 （不比较数据类型，只比较值是否相等）<br><code>===</code> 恒等 （比较数据类型和值是否相等）</p><h3 id="逻辑运算符号"><a href="#逻辑运算符号" class="headerlink" title="逻辑运算符号"></a>逻辑运算符号</h3><p><code>&amp;&amp;</code>  多个条件必须同时成立，才为true，否则为false<br><code>||</code>  一个成立结果就是为true，否则为false<br><code>!</code>   取反</p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记 - 颜色代码表</title>
      <link href="//webNotes-ColorTable1.html"/>
      <url>//webNotes-ColorTable1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一颜色代码表</p><span id="more"></span><article class="baidu_pl">    <div id="article_content" class="article_content clearfix">        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-bbac9290cd.css">        <div id="content_views" class="markdown_views prism-atom-one-light">            <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">                <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block"                    style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">                <path>            </svg>            <h3><a name="t0"></a><a id="HTMLCSS_0"></a>HTML及CSS常用颜色英文词汇</h3>            <div class="table-box">                <table>                    <tbody>                        <tr>                            <td>黑色</td>                            <td>银色</td>                            <td>灰色</td>                            <td>白色</td>                            <td>茶色</td>                            <td>红色</td>                            <td>紫色</td>                            <td>紫红</td>                        </tr>                        <tr>                            <td> black</td>                            <td> silver</td>                            <td> gray</td>                            <td> white</td>                            <td> maroon</td>                            <td> red</td>                            <td> purple</td>                            <td> fuchsia</td>                        </tr>                        <tr>                            <td bgcolor="black">#000000</td>                            <td bgcolor="silver">#C0C0C0</td>                            <td bgcolor="gray">#808080</td>                            <td bgcolor="white"> #FFFFFF</td>                            <td bgcolor="maroon"> #800000</td>                            <td bgcolor="red"> #FF0000 </td>                            <td bgcolor="purple"> #800080</td>                            <td bgcolor="fuchsia"> #FF00FF</td>                        </tr>                        <tr class="line"></tr>                        <tr>                            <td> 绿色</td>                            <td> 亮绿</td>                            <td> 橄榄</td>                            <td> 黄色</td>                            <td> 深蓝</td>                            <td> 蓝色</td>                            <td> 青色</td>                            <td> 浅绿</td>                        </tr>                        <tr>                            <td> green</td>                            <td> lime</td>                            <td> olive</td>                            <td> yellow</td>                            <td> navy</td>                            <td> blue</td>                            <td> teal</td>                            <td> aqua</td>                        </tr>                        <tr class="color_000">                            <td bgcolor="green">#008000</td>                            <td bgcolor="lime">#00FF00</td>                            <td bgcolor="olive">#808000</td>                            <td bgcolor="yellow">#FFFF00</td>                            <td bgcolor="navy">#000080</td>                            <td bgcolor="blue">#0000FF</td>                            <td bgcolor="teal">#008080</td>                            <td bgcolor="aqua">#00FFFF</td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t1"></a><a id="CSS_71"></a>CSS颜色代码大全</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <td height="30" width="95" bgcolor="#ffffff"> FFFFFF</td>                            <td height="30" width="95" bgcolor="#dddddd"> #DDDDDD</td>                            <td height="30" width="95" bgcolor="#aaaaaa"> #AAAAAA</td>                            <td height="30" width="95" bgcolor="#888888"> #888888</td>                            <td height="30" width="95" bgcolor="#666666"> #666666</td>                            <td height="30" width="95" bgcolor="#444444"> #444444</td>                            <td height="30" width="95" bgcolor="#000000"> #000000</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ffb7dd"> #FFB7DD</td>                            <td height="30" width="95" bgcolor="#ff88c2"> #FF88C2</td>                            <td height="30" width="95" bgcolor="#ff44aa"> #FF44AA&nbsp;</td>                            <td height="30" width="95" bgcolor="#ff0088"> #FF0088&nbsp;</td>                            <td height="30" width="95" bgcolor="#c10066"> #C10066&nbsp;</td>                            <td height="30" width="95" bgcolor="#a20055"> #A20055&nbsp;</td>                            <td height="30" width="95" bgcolor="#8c0044"> #8C0044&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ffcccc"> #FFCCCC</td>                            <td height="30" width="95" bgcolor="#ff8888"> #FF8888</td>                            <td height="30" width="95" bgcolor="#ff3333"> #FF3333&nbsp;</td>                            <td height="30" width="95" bgcolor="#ff0000"> #FF0000&nbsp;</td>                            <td height="30" width="95" bgcolor="#cc0000"> #CC0000&nbsp;</td>                            <td height="30" width="95" bgcolor="#aa0000"> #AA0000&nbsp;</td>                            <td height="30" width="95" bgcolor="#880000"> #880000&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ffc8b4"> #FFC8B4</td>                            <td height="30" width="95" bgcolor="#ffa488"> #FFA488</td>                            <td height="30" width="95" bgcolor="#ff7744"> #FF7744&nbsp;</td>                            <td height="30" width="95" bgcolor="#ff5511"> #FF5511&nbsp;</td>                            <td height="30" width="95" bgcolor="#e63f00"> #E63F00&nbsp;</td>                            <td height="30" width="95" bgcolor="#c63300"> #C63300&nbsp;</td>                            <td height="30" width="95" bgcolor="#a42d00"> #A42D00&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ffddaa"> #FFDDAA</td>                            <td height="30" width="95" bgcolor="#ffbb66"> #FFBB66</td>                            <td height="30" width="95" bgcolor="#ffaa33"> #FFAA33</td>                            <td height="30" width="95" bgcolor="#ff8800"> #FF8800&nbsp;</td>                            <td height="30" width="95" bgcolor="#ee7700"> #EE7700&nbsp;</td>                            <td height="30" width="95" bgcolor="#cc6600"> #CC6600&nbsp;</td>                            <td height="30" width="95" bgcolor="#bb5500"> #BB5500&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ffee99"> #FFEE99</td>                            <td height="30" width="95" bgcolor="#ffdd55"> #FFDD55</td>                            <td height="30" width="95" bgcolor="#ffcc22"> #FFCC22</td>                            <td height="30" width="95" bgcolor="#ffbb00"> #FFBB00&nbsp;</td>                            <td height="30" width="95" bgcolor="#ddaa00"> #DDAA00&nbsp;</td>                            <td height="30" width="95" bgcolor="#aa7700"> #AA7700&nbsp;</td>                            <td height="30" width="95" bgcolor="#886600"> #886600&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ffffbb"> #FFFFBB</td>                            <td height="30" width="95" bgcolor="#ffff77"> #FFFF77</td>                            <td height="30" width="95" bgcolor="#ffff33"> #FFFF33</td>                            <td height="30" width="95" bgcolor="#ffff00"> #FFFF00</td>                            <td height="30" width="95" bgcolor="#eeee00"> #EEEE00</td>                            <td height="30" width="95" bgcolor="#bbbb00"> #BBBB00</td>                            <td height="30" width="95" bgcolor="#888800"> #888800</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#eeffbb"> #EEFFBB</td>                            <td height="30" width="95" bgcolor="#ddff77"> #DDFF77</td>                            <td height="30" width="95" bgcolor="#ccff33"> #CCFF33</td>                            <td height="30" width="95" bgcolor="#bbff00"> #BBFF00</td>                            <td height="30" width="95" bgcolor="#99dd00"> #99DD00</td>                            <td height="30" width="95" bgcolor="#88aa00"> #88AA00</td>                            <td height="30" width="95" bgcolor="#668800"> #668800</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ccff99"> #CCFF99</td>                            <td height="30" width="95" bgcolor="#bbff66"> #BBFF66</td>                            <td height="30" width="95" bgcolor="#99ff33"> #99FF33</td>                            <td height="30" width="95" bgcolor="#77ff00"> #77FF00</td>                            <td height="30" width="95" bgcolor="#66dd00"> #66DD00</td>                            <td height="30" width="95" bgcolor="#55aa00"> #55AA00</td>                            <td height="30" width="95" bgcolor="#227700"> #227700</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#99ff99"> #99FF99</td>                            <td height="30" width="95" bgcolor="#66ff66"> #66FF66</td>                            <td height="30" width="95" bgcolor="#33ff33"> #33FF33</td>                            <td height="30" width="95" bgcolor="#00ff00"> #00FF00</td>                            <td height="30" width="95" bgcolor="#00dd00"> #00DD00</td>                            <td height="30" width="95" bgcolor="#00aa00"> #00AA00</td>                            <td height="30" width="95" bgcolor="#008800"> #008800</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#bbffee"> #BBFFEE</td>                            <td height="30" width="95" bgcolor="#77ffcc"> #77FFCC</td>                            <td height="30" width="95" bgcolor="#33ffaa"> #33FFAA</td>                            <td height="30" width="95" bgcolor="#00ff99"> #00FF99</td>                            <td height="30" width="95" bgcolor="#00dd77"> #00DD77</td>                            <td height="30" width="95" bgcolor="#00aa55"> #00AA55</td>                            <td height="30" width="95" bgcolor="#008844"> #008844</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#aaffee"> #AAFFEE</td>                            <td height="30" width="95" bgcolor="#77ffee"> #77FFEE</td>                            <td height="30" width="95" bgcolor="#33ffdd"> #33FFDD</td>                            <td height="30" width="95" bgcolor="#00ffcc"> #00FFCC</td>                            <td height="30" width="95" bgcolor="#00ddaa"> #00DDAA</td>                            <td height="30" width="95" bgcolor="#00aa88"> #00AA88</td>                            <td height="30" width="95" bgcolor="#008866"> #008866</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#99ffff"> #99FFFF</td>                            <td height="30" width="95" bgcolor="#66ffff"> #66FFFF</td>                            <td height="30" width="95" bgcolor="#33ffff"> #33FFFF</td>                            <td height="30" width="95" bgcolor="#00ffff"> #00FFFF</td>                            <td height="30" width="95" bgcolor="#00dddd"> #00DDDD</td>                            <td height="30" width="95" bgcolor="#00aaaa"> #00AAAA</td>                            <td height="30" width="95" bgcolor="#008888"> #008888</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#cceeff"> #CCEEFF</td>                            <td height="30" width="95" bgcolor="#77ddff"> #77DDFF</td>                            <td height="30" width="95" bgcolor="#33ccff"> #33CCFF</td>                            <td height="30" width="95" bgcolor="#00bbff"> #00BBFF</td>                            <td height="30" width="95" bgcolor="#009fcc"> #009FCC</td>                            <td height="30" width="95" bgcolor="#0088a8"> #0088A8</td>                            <td height="30" width="95" bgcolor="#007799"> #007799</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ccddff"> #CCDDFF</td>                            <td height="30" width="95" bgcolor="#99bbff"> #99BBFF</td>                            <td height="30" width="95" bgcolor="#5599ff"> #5599FF</td>                            <td height="30" width="95" bgcolor="#0066ff"> #0066FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#0044bb"> #0044BB&nbsp;</td>                            <td height="30" width="95" bgcolor="#003c9d"> #003C9D&nbsp;</td>                            <td height="30" width="95" bgcolor="#003377"> #003377&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ccccff"> #CCCCFF</td>                            <td height="30" width="95" bgcolor="#9999ff"> #9999FF</td>                            <td height="30" width="95" bgcolor="#5555ff"> #5555FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#0000ff"> #0000FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#0000cc"> #0000CC&nbsp;</td>                            <td height="30" width="95" bgcolor="#0000aa"> #0000AA&nbsp;</td>                            <td height="30" width="95" bgcolor="#000088"> #000088&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ccbbff"> #CCBBFF</td>                            <td height="30" width="95" bgcolor="#9f88ff"> #9F88FF</td>                            <td height="30" width="95" bgcolor="#7744ff"> #7744FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#5500ff"> #5500FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#4400cc"> #4400CC&nbsp;</td>                            <td height="30" width="95" bgcolor="#2200aa"> #2200AA&nbsp;</td>                            <td height="30" width="95" bgcolor="#220088"> #220088&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#d1bbff"> #D1BBFF</td>                            <td height="30" width="95" bgcolor="#b088ff"> #B088FF</td>                            <td height="30" width="95" bgcolor="#9955ff"> #9955FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#7700ff"> #7700FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#5500dd"> #5500DD&nbsp;</td>                            <td height="30" width="95" bgcolor="#4400b3"> #4400B3&nbsp;</td>                            <td height="30" width="95" bgcolor="#3a0088"> #3A0088&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#e8ccff"> #E8CCFF</td>                            <td height="30" width="95" bgcolor="#d28eff"> #D28EFF</td>                            <td height="30" width="95" bgcolor="#b94fff"> #B94FFF&nbsp;</td>                            <td height="30" width="95" bgcolor="#9900ff"> #9900FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#7700bb"> #7700BB&nbsp;</td>                            <td height="30" width="95" bgcolor="#66009d"> #66009D&nbsp;</td>                            <td height="30" width="95" bgcolor="#550088"> #550088&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#f0bbff"> #F0BBFF</td>                            <td height="30" width="95" bgcolor="#e377ff"> #E38EFF</td>                            <td height="30" width="95" bgcolor="#d93eff"> #E93EFF&nbsp;</td>                            <td height="30" width="95" bgcolor="#cc00ff"> #CC00FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#a500cc"> #A500CC&nbsp;</td>                            <td height="30" width="95" bgcolor="#7a0099"> #7A0099&nbsp;</td>                            <td height="30" width="95" bgcolor="#660077"> #660077&nbsp;</td>                        </tr>                        <tr>                            <td height="30" width="95" bgcolor="#ffb3ff"> #FFB3FF</td>                            <td height="30" width="95" bgcolor="#ff77ff"> #FF77FF</td>                            <td height="30" width="95" bgcolor="#ff3eff"> #FF3EFF&nbsp;</td>                            <td height="30" width="95" bgcolor="#ff00ff"> #FF0&nbsp;0FF&nbsp;</td>                            <td height="30" width="95" bgcolor="#cc00cc"> #CC00CC&nbsp;</td>                            <td height="30" width="95" bgcolor="#990099"> #990099&nbsp;</td>                            <td height="30" width="95" bgcolor="#770077"> #770077&nbsp;</td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t2"></a><a id="_414"></a>红色</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>maroon</td>                            <td>#800000</td>                            <td bgcolor="#800000"></td>                        </tr>                        <tr>                            <td>darkred</td>                            <td>#8B0000</td>                            <td bgcolor="#8b0000"></td>                        </tr>                        <tr>                            <td>brown</td>                            <td>#A52A2A</td>                            <td bgcolor="#a52a2a"></td>                        </tr>                        <tr>                            <td>firebrick</td>                            <td>#B22222</td>                            <td bgcolor="#b22222"></td>                        </tr>                        <tr>                            <td>crimson</td>                            <td>#DC143C</td>                            <td bgcolor="#dc143c"> </td>                        </tr>                        <tr>                            <td>red</td>                            <td>#FF0000</td>                            <td bgcolor="#ff0000"></td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t3"></a><a id="___456"></a>桃红 ~ 粉红</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>mediumvioletred</td>                            <td>#C71585</td>                            <td bgcolor="#c71585"></td>                        </tr>                        <tr>                            <td>palevioletred</td>                            <td>#D87093</td>                            <td bgcolor="#d87093"></td>                        </tr>                        <tr>                            <td>deeppink</td>                            <td>#FF1493</td>                            <td bgcolor="#ff1493"></td>                        </tr>                        <tr>                            <td>fuchsia(magenta) </td>                            <td>#FF00FF</td>                            <td bgcolor="#ff00ff"></td>                        </tr>                        <tr>                            <td>hotpink</td>                            <td>#FF69B4</td>                            <td bgcolor="#ff69b4"></td>                        </tr>                        <tr>                            <td>pink</td>                            <td>#FFC0CB</td>                            <td bgcolor="#ffc0cb"></td>                        </tr>                        <tr>                            <td>lightpink</td>                            <td>#FFB6C1</td>                            <td bgcolor="#ffb6c1"></td>                        </tr>                        <tr>                            <td>mistyrose</td>                            <td>#FFE4E1</td>                            <td bgcolor="#ffe4e1"></td>                        </tr>                        <tr>                            <td>lavenderblush</td>                            <td>#FFF0F5</td>                            <td bgcolor="#fff0f5"></td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t4"></a><a id="_513"></a>紫色</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>indigo</td>                            <td>#4B0082</td>                            <td bgcolor="#4b0082"></td>                        </tr>                        <tr>                            <td>purple</td>                            <td>#800080</td>                            <td bgcolor="#800080"></td>                        </tr>                        <tr>                            <td>darkmagenta</td>                            <td>#8B008B</td>                            <td bgcolor="#8b008b"></td>                        </tr>                        <tr>                            <td>darkorchid</td>                            <td>#9932CC</td>                            <td bgcolor="#9932cc"></td>                        </tr>                        <tr>                            <td>blueviolet</td>                            <td>#8A2BE2</td>                            <td bgcolor="#8a2be2"></td>                        </tr>                        <tr>                            <td>darkviolet</td>                            <td>#9400D3</td>                            <td bgcolor="#9400d3"></td>                        </tr>                        <tr>                            <td>slateblue</td>                            <td>#6A5ACD</td>                            <td bgcolor="#6a5acd"></td>                        </tr>                        <tr>                            <td>mediumpurple</td>                            <td>#9370DB</td>                            <td bgcolor="#9370db"></td>                        </tr>                        <tr>                            <td>mediumslateblue</td>                            <td>#7B68EE</td>                            <td bgcolor="#7b68ee"></td>                        </tr>                        <tr>                            <td>mediumorchid</td>                            <td>#BA55D3</td>                            <td bgcolor="#ba55d3"></td>                        </tr>                        <tr>                            <td>violet</td>                            <td>#EE82EE</td>                            <td bgcolor="#ee82ee"></td>                        </tr>                        <tr>                            <td>plum</td>                            <td>#DDA0DD</td>                            <td bgcolor="#dda0dd"></td>                        </tr>                        <tr>                            <td>thistle</td>                            <td>#D8BFD8</td>                            <td bgcolor="#d8bfd8"></td>                        </tr>                        <tr>                            <td>lavender</td>                            <td>#E6E6FA</td>                            <td bgcolor="#e6e6fa"></td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t5"></a><a id="_____595"></a>褐 ~ 橘 ~ 米白</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>saddlebrown</td>                            <td>#8B4513</td>                            <td bgcolor="#8b4513"></td>                        </tr>                        <tr>                            <td>sienna</td>                            <td>#A0522D</td>                            <td bgcolor="#a0522d"></td>                        </tr>                        <tr>                            <td>chocolate</td>                            <td>#D2691E</td>                            <td bgcolor="#d2691e"></td>                        </tr>                        <tr>                            <td>indianred</td>                            <td>#CD5C5C</td>                            <td bgcolor="#cd5c5c"></td>                        </tr>                        <tr>                            <td>rosybrown</td>                            <td>#BC8F8F</td>                            <td bgcolor="#bc8f8f"></td>                        </tr>                        <tr>                            <td>lightcorol</td>                            <td>#F08080</td>                            <td bgcolor="#f08080"></td>                        </tr>                        <tr>                            <td>salmon</td>                            <td>#FA8072</td>                            <td bgcolor="#fa8072"></td>                        </tr>                        <tr>                            <td>lightsalmon</td>                            <td>#FFA07A</td>                            <td bgcolor="#ffa07a"></td>                        </tr>                        <tr>                            <td>orangered</td>                            <td>#FF4500</td>                            <td bgcolor="#ff4500"></td>                        </tr>                        <tr>                            <td>tomato</td>                            <td>#FF6347</td>                            <td bgcolor="#ff6347"></td>                        </tr>                        <tr>                            <td>coral</td>                            <td>#FF7F50</td>                            <td bgcolor="#ff7f50"></td>                        </tr>                        <tr>                            <td>darkorange</td>                            <td>#FF8C00</td>                            <td bgcolor="#ff8c00"></td>                        </tr>                        <tr>                            <td>sandybrown</td>                            <td>#F4A460</td>                            <td bgcolor="#f4a460"></td>                        </tr>                        <tr>                            <td>peru</td>                            <td>#CD853F</td>                            <td bgcolor="#cd853f"></td>                        </tr>                        <tr>                            <td>tan</td>                            <td>#D2B48C</td>                            <td bgcolor="#d2b48c"></td>                        </tr>                        <tr>                            <td>burlywood</td>                            <td>#DEB887</td>                            <td bgcolor="#deb887"></td>                        </tr>                        <tr>                            <td>wheat</td>                            <td>#F5DEB3</td>                            <td bgcolor="#f5deb3"></td>                        </tr>                        <tr>                            <td>moccasin</td>                            <td>#FFE4B5</td>                            <td bgcolor="#ffe4b5"></td>                        </tr>                        <tr>                            <td>navajowhite</td>                            <td>#FFDEAD</td>                            <td bgcolor="#ffdead"></td>                        </tr>                        <tr>                            <td>peachpuff</td>                            <td>#FFDAB9</td>                            <td bgcolor="#ffdab9"></td>                        </tr>                        <tr>                            <td>bisque</td>                            <td>#FFE4C4</td>                            <td bgcolor="#ffe4c4"></td>                        </tr>                        <tr>                            <td>antuquewhite</td>                            <td>#FAEBD7</td>                            <td bgcolor="#faebd7"></td>                        </tr>                        <tr>                            <td>papayawhip</td>                            <td>#FFEFD5</td>                            <td bgcolor="#ffefd5"></td>                        </tr>                        <tr>                            <td>cornsilk</td>                            <td>#FFF8DC</td>                            <td bgcolor="#fff8dc"></td>                        </tr>                        <tr>                            <td>oldlace</td>                            <td>#FDF5E6</td>                            <td bgcolor="#fdf5e6"></td>                        </tr>                        <tr>                            <td>linen</td>                            <td>#FAF0E6</td>                            <td bgcolor="#faf0e6"></td>                        </tr>                        <tr>                            <td>seashell</td>                            <td>#FFF5EE</td>                            <td bgcolor="#fff5ee"></td>                        </tr>                        <tr>                            <td>snow</td>                            <td>#FFFAFA</td>                            <td bgcolor="#fffafa"></td>                        </tr>                        <tr>                            <td>floralwhite</td>                            <td>#FFFAF0</td>                            <td bgcolor="#fffaf0"></td>                        </tr>                        <tr>                            <td>ivory</td>                            <td>#FFFFF0</td>                            <td bgcolor="#fffff0"></td>                        </tr>                        <tr>                            <td>mintcream</td>                            <td>#F5FFFA</td>                            <td bgcolor="#f5fffa"></td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t6"></a><a id="___761"></a>金 ~ 黄</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>darkgoldenrod</td>                            <td>#B8860B</td>                            <td bgcolor="#b8860b"></td>                        </tr>                        <tr>                            <td>goldenrod</td>                            <td>#DAA520</td>                            <td bgcolor="#daa520"></td>                        </tr>                        <tr>                            <td>gold</td>                            <td>#FFD700</td>                            <td bgcolor="#ffd700"></td>                        </tr>                        <tr>                            <td>yellow</td>                            <td>#FFFF00</td>                            <td bgcolor="#ffff00"></td>                        </tr>                        <tr>                            <td>darkkhaki</td>                            <td>#BDB76B</td>                            <td bgcolor="#bdb76b"></td>                        </tr>                        <tr>                            <td>khaki</td>                            <td>#F0E68C</td>                            <td bgcolor="#f0e68c"></td>                        </tr>                        <tr>                            <td>palegoldenrod</td>                            <td>#EEE8AA</td>                            <td bgcolor="#eee8aa"></td>                        </tr>                        <tr>                            <td>beige</td>                            <td>#F5F5DC</td>                            <td bgcolor="#f5f5dc"></td>                        </tr>                        <tr>                            <td>lemonchiffon</td>                            <td>#FFFACD</td>                            <td bgcolor="#fffacd"></td>                        </tr>                        <tr>                            <td> lightgoldenrodyellow</td>                            <td>#FAFAD2</td>                            <td bgcolor="#fafad2"></td>                        </tr>                        <tr>                            <td>lightyellow</td>                            <td>#FFFFE0</td>                            <td bgcolor="#ffffe0"></td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t7"></a><a id="_829"></a>绿色</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>darkslategray</td>                            <td>#2F4F4F</td>                            <td bgcolor="#2f4f4f"></td>                        </tr>                        <tr>                            <td>darkolivegreen</td>                            <td>#556B2F</td>                            <td bgcolor="#556b2f"></td>                        </tr>                        <tr>                            <td>olive</td>                            <td>#808000</td>                            <td bgcolor="#808000"></td>                        </tr>                        <tr>                            <td>darkgreen</td>                            <td>#006400</td>                            <td bgcolor="#006400"></td>                        </tr>                        <tr>                            <td>forestgreen</td>                            <td>#228B22</td>                            <td bgcolor="#228b22"></td>                        </tr>                        <tr>                            <td>seagreen</td>                            <td>#2E8B57</td>                            <td bgcolor="#2e8b57"></td>                        </tr>                        <tr>                            <td>green(teal)</td>                            <td>#008080</td>                            <td bgcolor="#008080"></td>                        </tr>                        <tr>                            <td>lightseagreen</td>                            <td>#20B2AA</td>                            <td bgcolor="#20b2aa"></td>                        </tr>                        <tr>                            <td>madiumaquamarine</td>                            <td>#66CDAA</td>                            <td bgcolor="#66cdaa"></td>                        </tr>                        <tr>                            <td>mediumseagreen</td>                            <td>#3CB371</td>                            <td bgcolor="#3cb371"></td>                        </tr>                        <tr>                            <td>darkseagreen</td>                            <td>#8FBC8F</td>                            <td bgcolor="#8fbc8f"></td>                        </tr>                        <tr>                            <td>yellowgreen</td>                            <td>#9ACD32</td>                            <td bgcolor="#9acd32"></td>                        </tr>                        <tr>                            <td>limegreen</td>                            <td>#32CD32</td>                            <td bgcolor="#32cd32"></td>                        </tr>                        <tr>                            <td>lime</td>                            <td>#00FF00</td>                            <td bgcolor="#00ff00"></td>                        </tr>                        <tr>                            <td>chartreuse</td>                            <td>#7FFF00</td>                            <td bgcolor="#7fff00"></td>                        </tr>                        <tr>                            <td>lawngreen</td>                            <td>#7CFC00</td>                            <td bgcolor="#7cfc00"></td>                        </tr>                        <tr>                            <td>greenyellow</td>                            <td>#ADFF2F</td>                            <td bgcolor="#adff2f"></td>                        </tr>                        <tr>                            <td>mediumspringgreen</td>                            <td>#00FA9A</td>                            <td bgcolor="#00fa9a"></td>                        </tr>                        <tr>                            <td>springgreen</td>                            <td>#00FF7F</td>                            <td bgcolor="#00ff7f"></td>                        </tr>                        <tr>                            <td>lightgreen</td>                            <td>#90EE90</td>                            <td bgcolor="#90ee90"></td>                        </tr>                        <tr>                            <td>palegreen</td>                            <td>#98F898</td>                            <td bgcolor="#98f898"></td>                        </tr>                        <tr>                            <td>aquamarine</td>                            <td>#7FFFD4</td>                            <td bgcolor="#7fffd4"></td>                        </tr>                        <tr>                            <td>honeydew</td>                            <td>#F0FFF0</td>                            <td bgcolor="#f0fff0"></td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t8"></a><a id="_956"></a>蓝色</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>midnightblue</td>                            <td>#191970</td>                            <td bgcolor="#191970"></td>                        </tr>                        <tr>                            <td>navy</td>                            <td>#000080</td>                            <td bgcolor="#000080"></td>                        </tr>                        <tr>                            <td>darkblue</td>                            <td>#00008B</td>                            <td bgcolor="#00008b"></td>                        </tr>                        <tr>                            <td>darkslateblue</td>                            <td>#483D8B</td>                            <td bgcolor="#483d8b"></td>                        </tr>                        <tr>                            <td>mediumblue</td>                            <td>#0000CD</td>                            <td bgcolor="#0000cd"></td>                        </tr>                        <tr>                            <td>royalblue</td>                            <td>#4169E1</td>                            <td bgcolor="#4169e1"></td>                        </tr>                        <tr>                            <td>dodgerblue</td>                            <td>#1E90FF</td>                            <td bgcolor="#1e90ff"></td>                        </tr>                        <tr>                            <td>cornflowerblue</td>                            <td>#6495ED</td>                            <td bgcolor="#6495ed"></td>                        </tr>                        <tr>                            <td>deepskyblue</td>                            <td>#00BFFF</td>                            <td bgcolor="#00bfff"></td>                        </tr>                        <tr>                            <td>lightskyblue</td>                            <td>#87CEFA</td>                            <td bgcolor="#87cefa"></td>                        </tr>                        <tr>                            <td>lightsteelblue</td>                            <td>#B0C4DE</td>                            <td bgcolor="#b0c4de"></td>                        </tr>                        <tr>                            <td>lightblue</td>                            <td>#ADD8E6</td>                            <td bgcolor="#add8e6"></td>                        </tr>                        <tr>                            <td>steelblue</td>                            <td>#4682B4</td>                            <td bgcolor="#4682b4"></td>                        </tr>                        <tr>                            <td>darkcyan</td>                            <td>#008B8B</td>                            <td bgcolor="#008b8b"></td>                        </tr>                        <tr>                            <td>cadetblue</td>                            <td>#5F9EA0</td>                            <td bgcolor="#5f9ea0"></td>                        </tr>                        <tr>                            <td>darkturquoise</td>                            <td>#00CED1</td>                            <td bgcolor="#00ced1"></td>                        </tr>                        <tr>                            <td>mediumturquoise</td>                            <td>#48D1CC</td>                            <td bgcolor="#48d1cc"></td>                        </tr>                        <tr>                            <td>turquoise</td>                            <td>#40E0D0</td>                            <td bgcolor="#40e0d0"></td>                        </tr>                        <tr>                            <td>skyblue</td>                            <td>#87CECB</td>                            <td bgcolor="#87cecb"></td>                        </tr>                        <tr>                            <td>powderblue</td>                            <td>#B0E0E6</td>                            <td bgcolor="#b0e0e6"></td>                        </tr>                        <tr>                            <td>paleturquoise</td>                            <td>#AFEEEE</td>                            <td bgcolor="#afeeee"></td>                        </tr>                        <tr>                            <td>lightcyan</td>                            <td>#E0FFFF</td>                            <td bgcolor="#e0ffff"></td>                        </tr>                        <tr>                            <td>azure</td>                            <td>#F0FFFF</td>                            <td bgcolor="#f0ffff"></td>                        </tr>                        <tr>                            <td>aliceblue</td>                            <td>#F0F8FF</td>                            <td bgcolor="#f0f8ff"></td>                        </tr>                        <tr>                            <td>aqua(cyan)</td>                            <td>#00FFFF</td>                            <td bgcolor="#00ffff"></td>                        </tr>                    </tbody>                </table>            </div>            <h3><a name="t9"></a><a id="_____1093"></a>黑 ~ 灰 ~ 白</h3>            <div class="table-box">                <table border="0">                    <tbody>                        <tr>                            <th width="130">颜色名称</th>                            <th width="80">代码</th>                            <th width="80">颜色</th>                        </tr>                        <tr>                            <td>black</td>                            <td>#000000</td>                            <td bgcolor="#000000"></td>                        </tr>                        <tr>                            <td>dimgray</td>                            <td>#696969</td>                            <td bgcolor="#696969"></td>                        </tr>                        <tr>                            <td>gray</td>                            <td>#808080</td>                            <td bgcolor="#808080"></td>                        </tr>                        <tr>                            <td>slategray</td>                            <td>#708090</td>                            <td bgcolor="#708090"></td>                        </tr>                        <tr>                            <td>lightslategray</td>                            <td>#778899</td>                            <td bgcolor="#778899"></td>                        </tr>                        <tr>                            <td>dakgray</td>                            <td>#A9A9A9</td>                            <td bgcolor="#a9a9a9"></td>                        </tr>                        <tr>                            <td>silver</td>                            <td>#C0C0C0</td>                            <td bgcolor="#c0c0c0"></td>                        </tr>                        <tr>                            <td>lightgray</td>                            <td>#D3D3D3</td>                            <td bgcolor="#d3d3d3"></td>                        </tr>                        <tr>                            <td>gainsboro</td>                            <td>#DCDCDC</td>                            <td bgcolor="#dcdcdc"></td>                        </tr>                        <tr>                            <td>whitesmoke</td>                            <td>#F5F5F5</td>                            <td bgcolor="#f5f5f5"></td>                        </tr>                        <tr>                            <td>ghostwhite</td>                            <td>#F8F8FF</td>                            <td bgcolor="#f8f8ff"></td>                        </tr>                        <tr>                            <td>white</td>                            <td>#FFFFFF</td>                            <td bgcolor="#FFFFFF"></td>                        </tr>                    </tbody>                </table>            </div>        </div>        <div>            <div></div>        </div>        <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css"            rel="stylesheet">        <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-e28e519d6a.css" rel="stylesheet">    </div></article>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记2 - CSS基础</title>
      <link href="//webNotes2.html"/>
      <url>//webNotes2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>CSS基础 自学总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="标准盒子"><a href="#标准盒子" class="headerlink" title="标准盒子"></a>标准盒子</h3><p>计算公式：<code>width=margin + border + padding + content</code></p><h3 id="怪异盒子模型"><a href="#怪异盒子模型" class="headerlink" title="怪异盒子模型"></a>怪异盒子模型</h3><p>计算公式：<code>width ：100px ，包含内边距 border + content</code></p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>样式引入方式：<code>行内样式</code> <code>外联样式</code> <code>内嵌样式</code>，又称：<code>行内元素</code>，<code>块元素</code>，<code>行内块元素</code></p><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><p><u>继承过来的样式优先级是最低的</u>， 字体大小 字体颜色等<br><code>标签名</code>选择器优先级要低于类名选择器<br><code>类名</code>选择器优先级要低于id选择器<br><code>id</code>选择器优先级低于行内样式<br><code>行内样式</code>低于<code>！important</code></p><h3 id="权值"><a href="#权值" class="headerlink" title="权值"></a>权值</h3><p><code>!important</code> : 最高<br><code>行内样式</code> : 1000<br><code>id</code> : 100<br><code>类</code> : 属性选择器 伪类选择器 10<br><code>标签名</code> : 1<br><code>继承过来</code> : 最低</p><p>权重优先级排序：<code>!important</code> &gt; <code>行内</code> &gt; <code>id</code> &gt; <code>class</code> &#x3D; <code>属性选择器</code> &gt; <code>标签名选择器</code> &gt; <code>继承过来的属性</code></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><code>&gt;</code> 父子关系<br><code>~</code> 兄弟关系 后续的兄弟yuans<br><code>+</code> 第一个兄弟元素<br><code>[id=i1]</code> 属性选择器<br><code>nth-child()</code> 父元素第几个子元素<br><code>nth-of-type()</code> 同种类型下第几个子元素</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p><code>::before</code> : 元素前<br><code>::after</code> : 元素后<br><code>::first-line</code> : 设置文本<strong>首行</strong>的特殊样式<br><code>::first-letter</code> : 设置文本<strong>首字母</strong>的特殊样式<br><code>::selection</code> : 选择器匹配元素中被用户选中或处于高亮状态的部分。<br><code>::selection</code> : 只可以应用于少数的CSS属性：color, background, cursor,和outline。</p><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p><code>:hover</code> : 元素被选中<br><code>:active</code> : 元素被点击<br><code>:visited</code> :　设置访问过的页面链接的样式<br><code>:focus</code>　: 选择元素输入后具有焦点</p><h2 id="资源引入"><a href="#资源引入" class="headerlink" title="资源引入"></a>资源引入</h2><p><code>src</code> 可以引入本地文件，也可以网络资源</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://img2.baidu.com/it/u=3384430041,4206921743&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=640&amp;h=360&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><img id="d1" src="https://img2.baidu.com/it/u=3384430041,4206921743&fm=253&fmt=auto&app=120&f=JPEG?w=640&h=360" alt="">图片演示，下面js引入就不演示了（演示了没效果😂）<h2 id="内容溢出"><a href="#内容溢出" class="headerlink" title="内容溢出"></a>内容溢出</h2><h3 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h3><p><code>keep-all</code> 不换行，但是会在空格符号和标点符号处进行换行<br><code>break-all</code> 可以在任何单词之间进行换行 </p><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p><code>overflow: hidden;</code> 超出的部分直接剪切掉<br><code>overflow: scroll;</code> 超出部分出现滚动<br><code>overflow-y: scroll;</code> 指的是竖直方向上进行滚动<br><code>overflow-x:scroll;</code> 水平方向上超出滚动</p><h2 id="精灵图片的作用"><a href="#精灵图片的作用" class="headerlink" title="精灵图片的作用"></a>精灵图片的作用</h2><p>精灵图 (雪碧图)：把多张小图设置一张大图片，可以减少图片的大小，在页面加载图片时候，只需要请求一次，减少了请求次数，</p><h2 id="transition-x2F-animation-区别"><a href="#transition-x2F-animation-区别" class="headerlink" title="transition &#x2F; animation 区别"></a>transition &#x2F; animation 区别</h2><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p><code>transition</code> : 过渡动画，能够过渡的样式：与数字有关样式可以观察到过渡效果</p><h4 id="直接设置过渡属性"><a href="#直接设置过渡属性" class="headerlink" title="直接设置过渡属性"></a>直接设置过渡属性</h4><p><code>transition: all 2s linear;</code><br><code>all</code> : 能够过渡的样式都可以看到过渡效果<br><code>2s</code> : 过渡时间<br><code>linear</code> : 时间函数 速率匀速<br><code>ease</code> : 慢速开始，然后变快，然后慢速结束的过渡效果（等于cubic-bezier(0.25,0.1,0.25,1)）<br><code>ease-in</code> : 开始时候的慢<br><code>ease-in-out</code> : 开始结束的时候慢<br><code>cubic-bezier(n,n,n,n)</code> : 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</p><h4 id="分开设置过渡属性"><a href="#分开设置过渡属性" class="headerlink" title="分开设置过渡属性"></a>分开设置过渡属性</h4><p><code>transition-property</code> : 过渡属性<br><code>transition-duration</code> :  过渡时间<br><code>transition-time-function</code> : 过渡函数<br><code>transition-delay</code> : 延迟</p><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><pre><code class="highlight css"><span class="selector-id">#div1</span>&#123;    <span class="attribute">width</span>: <span class="number">200px</span>;    <span class="attribute">height</span>: <span class="number">200px</span>;    <span class="attribute">background-color</span>: yellow;    <span class="attribute">position</span>: relative;    <span class="attribute">left</span>: <span class="number">0</span>;    <span class="attribute">top</span>: <span class="number">0</span>;    <span class="comment">/* 使用关键帧动画的样式 */</span>    <span class="comment">/* 动画名字 动画时间  动画速率 重复次数 infinite无限重复*/</span>    <span class="attribute">animation</span>: myAni  <span class="number">2s</span> linear  infinite;    &#125;<span class="comment">/* 定义关键帧动画 */</span><span class="keyword">@keyframes</span> myAni &#123;    <span class="comment">/* 0%  动画开始状态*/</span>    <span class="selector-tag">from</span>&#123;           <span class="attribute">left</span>: <span class="number">0</span>;        <span class="attribute">top</span>: <span class="number">0</span>;    &#125;    <span class="number">50%</span>&#123;        <span class="attribute">left</span>: <span class="number">400px</span>;        <span class="attribute">top</span>: <span class="number">0</span>;    &#125;    <span class="comment">/* 100%  动画结束的状态*/</span>    <span class="selector-tag">to</span>&#123;        <span class="attribute">left</span>: <span class="number">400px</span>;        <span class="attribute">top</span>: <span class="number">400px</span>;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习笔记1 - html基础</title>
      <link href="//webNotes1.html"/>
      <url>//webNotes1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>html基础 自学总结<br>封面画师：唏嘘的星辰  p站ID：13312138</p><span id="more"></span><h2 id="前端技术概括："><a href="#前端技术概括：" class="headerlink" title="前端技术概括："></a>前端技术概括：</h2><ol><li>HTML&#x2F;CSS</li><li>JavaScript</li><li>各种脚本库，如：jQuery</li><li>Node.js</li><li>各种框架，如：Vue, React, 小程序、uniapp</li></ol><h2 id="web应用开发流程（仅作了解）"><a href="#web应用开发流程（仅作了解）" class="headerlink" title="web应用开发流程（仅作了解）"></a>web应用开发流程（仅作了解）</h2><ol><li>合理安排人员(项目经理，产品经理、UI设计师（美工），后端，前端，测试人员)</li><li>沟通了解需求（角色一般是产品经理或项目经理，主要了解做什么，谁做，何时做，为什么做的问题）</li><li>需求分析（角色一般是项目经理，解决怎样做，成本工期效率等问题）</li><li>项目设计（角色一般是UI设计师和后端，UI设计师进行界面设计，后端进行数据库设计）</li><li>项目开发（使用各种工具开始动手编码）</li><li>项目测试（测试人员使用各种测试工具测试代码，发现BUG，提交给开发人员）</li><li>运行维护（开发人员根据测试结果，维护代码，真至项目完美）</li></ol><hr><p><strong>详细文档：</strong><br><a href="https://www.cnblogs.com/ceshi2016/p/9212749.html">https://www.cnblogs.com/ceshi2016/p/9212749.html</a></p><h2 id="浏览器从输入URL到渲染完页面过程"><a href="#浏览器从输入URL到渲染完页面过程" class="headerlink" title="浏览器从输入URL到渲染完页面过程:"></a>浏览器从输入URL到渲染完页面过程:</h2><ol><li><h3 id="DNS解析URL的过程"><a href="#DNS解析URL的过程" class="headerlink" title="DNS解析URL的过程"></a>DNS解析URL的过程</h3>  把IP地址解析成容易记忆的域名。<br>  如：220.181.38.150   -&gt;   <a href="http://www.baidu.com/">www.baidu.com</a></li><li><h3 id="浏览器与服务器交互过程"><a href="#浏览器与服务器交互过程" class="headerlink" title="浏览器与服务器交互过程"></a>浏览器与服务器交互过程</h3>  浏览器通过三次握手和服务器进行交互</li><li><h3 id="浏览器页面渲染过程"><a href="#浏览器页面渲染过程" class="headerlink" title="浏览器页面渲染过程"></a>浏览器页面渲染过程</h3>  当html被加载到浏览器中，解析html构建dom tree，通过link解析css，构建render tree。把这俩个组合在一起，渲染出看到的页面</li></ol><hr><p><strong>参考文档:</strong><br><a href="https://www.cnblogs.com/qing-5/p/11126524.html">https://www.cnblogs.com/qing-5/p/11126524.html</a></p><h2 id="语义化标签："><a href="#语义化标签：" class="headerlink" title="语义化标签："></a>语义化标签：</h2><blockquote><p>html5建议程序员多去使用语义化标签，有助于seo搜索引擎进行搜索，但是目前语义花标签不太普及</p></blockquote><ol><li><p>语义化标签：</p><ul><li>main 内容区域</li><li>address 地址</li><li>footer 页尾</li><li>video 视频</li><li>audio 音频</li><li>strong 加粗</li><li>b 加粗</li><li>i 倾斜</li><li>del 删除</li><li>sub 下标</li><li>sup 上标</li></ul></li><li><p>语义化标签的作用:</p><pre><code class="highlight url">&lt;b&gt;加粗&lt;/b&gt;&lt;i&gt;倾斜&lt;/i&gt;&lt;span style=&quot;text-decoration: line-through;&quot;&gt;我是使用css实现的删除线！&lt;/span&gt;&lt;del&gt;语义化删除线&lt;/del&gt;</code></pre><p><b>加粗</b><br><i>倾斜</i><br><span style="text-decoration: line-through;">我是使用css实现的删除线！</span><br><del>语义化删除线</del></p><br></li><li><p>锚点 a进行页面内的跳转<br>a实现页面内的跳转 通过a标签的href的属性设置对应的元素id，可以把对应的元素的显示页面上边<br><a href="#语义化标签：">点我回到<b style="color: #000">语义化标签</b>！</a></p><pre><code class="highlight url">&lt;a href=&quot;#语义化标签：&quot;&gt;点我回到&lt;b style=&quot;color: #000&quot;&gt;语义化标签&lt;/b&gt;！&lt;/a&gt;</code></pre></li></ol><h2 id="From表单"><a href="#From表单" class="headerlink" title="From表单"></a>From表单</h2><blockquote><p>form 表单 action属性：提交数据的目标一般是接口地址<br>mehtod:提交的方式：get：获取服务器数据，post：提交数据到服务器。<br>目前暂且作为了解</p></blockquote><ul><li>for属性 点击用户名 输入框获取焦点<br>  autocomplete on 开启自动填充账号 ，off关闭<br>  maxlength 输入最大长度<br>  minlength 输入最小长度<br>  name 会把name属性的内容提交到服务器，格式位 username&#x3D;xxxx，passwd&#x3D;xxxx  <pre><code class="highlight url">&lt;label for=&quot;i1&quot;&gt;用户名&lt;/label&gt;&lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名&quot; id=&quot;i1&quot; autocomplete=&quot;on&quot;  maxlength=&quot;9&quot; minlength=&quot;1&quot; name=&quot;username&quot;&gt;&lt;label for=&quot;i2&quot;&gt;密码&lt;/label&gt;&lt;input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; id=&quot;i2&quot; autocomplete=&quot;on&quot;  maxlength=&quot;9&quot; minlength=&quot;1&quot; name=&quot;password&quot;&gt;</code></pre>  <label for="i1">用户名</label>  <input type="text" placeholder="请输入用户名" id="i1" autocomplete="on"  maxlength="9" minlength="1" name="username">  <label for="i2">密码</label>  <input type="password" placeholder="请输入密码" id="i2" autocomplete="on"  maxlength="9" minlength="1" name="password"></li></ul><h2 id="From表单内部常用元素"><a href="#From表单内部常用元素" class="headerlink" title="From表单内部常用元素"></a>From表单内部常用元素</h2><ul><li><p>多选 name属性证明多选是一组</p>  <pre><code class="highlight html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span> 打篮球<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span> 敲代码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span> 写代码</code></pre><p>  <input type="checkbox" name="n1"> 打篮球<br>  <input type="checkbox" name="n1"> 敲代码<br>  <input type="checkbox" name="n1"> 写代码</p></li><li><p>下拉菜单  美化select  value属性可以省掉，默认值值option的内容</p>  <pre><code class="highlight url">&lt;select name=&quot;n2&quot; id=&quot;&quot;&gt;  &lt;option&gt;河南&lt;/option&gt;  &lt;option&gt;河北&lt;/option&gt;  &lt;option&gt;山西&lt;/option&gt;&lt;/select&gt;</code></pre>  <select name="n2" id=""> <option >河南</option> <option >河北</option> <option >山西</option>  </select></li><li><p>optgroup 分组  label分组名</p>  <pre><code class="highlight url">&lt;select name=&quot;n3&quot; id=&quot;&quot;&gt;&lt;optgroup label=&quot;河南&quot;&gt;    &lt;option value=&quot;1&quot;&gt;郑州&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;开封&lt;/option&gt;    &lt;option value=&quot;3&quot;&gt;洛阳&lt;/option&gt;&lt;/optgroup&gt;&lt;optgroup label=&quot;河北&quot;&gt;    &lt;option&gt;唐山&lt;/option&gt;    &lt;option &gt;北京&lt;/option&gt;    &lt;option &gt;天津&lt;/option&gt;&lt;/optgroup&gt;&lt;/select&gt;</code></pre>  <select name="n3" id="">  <optgroup label="河南">   <option value="1">郑州</option>   <option value="2">开封</option>   <option value="3">洛阳</option>  </optgroup>  <optgroup label="河北">   <option>唐山</option>   <option >北京</option>   <option >天津</option>  </optgroup>  </select></li><li><p>单选框 name属性代表 相同name是一个小组，用在多选或者单选</p>  <pre><code class="highlight html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</code></pre><p>  <input type="radio"  name="sex">男<br>  <input type="radio"  name="sex">女</p></li><li><p>普通按钮没有提交功能 页面不会刷新</p>  <pre><code class="highlight html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></code></pre>  <input type="button" value="按钮"></li><li><p>提交按钮默认有提交功能 点击提交按钮页面会刷新</p>  <pre><code class="highlight html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span> 提交到服务器</code></pre><p>  <input type="submit" value="提交按钮"> 提交到服务器</p></li><li><p>重置按钮 把输入框的输入内容清空掉</p>  <pre><code class="highlight html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>&gt;</span></code></pre>  <input type="reset" value="重置按钮"></li><li><p>disabled 禁止标签可用</p>  <pre><code class="highlight url">&lt;button disabled&gt;普通按钮&lt;/button&gt;</code></pre><p>  <button disabled>普通按钮</button></p></li><li><p>提交按钮</p>  <pre><code class="highlight url">&lt;button type=&quot;submit&quot;&gt;提交按钮&lt;/button&gt;</code></pre><p>  <button type="submit">提交按钮</button></p></li><li><p>重置按钮</p>  <pre><code class="highlight url">&lt;button type=&quot;reset&quot;&gt;重置按钮&lt;/button&gt;</code></pre><p>  <button type="reset">重置按钮</button></p></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li><p><strong>table 表格</strong> <u><strong>(一般使用在后台管理系统项目类型上 建议大家尽量不要使用table)</strong></u><br><strong>tr</strong>  代表 行<br><strong>td</strong>  代表 单元格</p><pre><code>&lt;table&gt;  &lt;tr&gt;    &lt;!-- colspan 合并列 --&gt;    &lt;!-- rowspan 合并行 --&gt;    &lt;td rowspan&#x3D;&quot;3&quot;&gt;第1项&lt;&#x2F;td&gt;    &lt;td&gt;第2项&lt;&#x2F;td&gt;    &lt;td rowspan&#x3D;&quot;2&quot;&gt;第3项&lt;&#x2F;td&gt;  &lt;&#x2F;tr&gt;  &lt;tr&gt;    &lt;!-- &lt;td&gt;第1项&lt;&#x2F;td&gt; --&gt;    &lt;td&gt;第2项&lt;&#x2F;td&gt;    &lt;!-- &lt;td&gt;第3项&lt;&#x2F;td&gt; --&gt;  &lt;&#x2F;tr&gt;  &lt;tr&gt;    &lt;!-- &lt;td&gt;第1项&lt;&#x2F;td&gt; --&gt;    &lt;td colspan&#x3D;&quot;2&quot;&gt;第2项&lt;&#x2F;td&gt;    &lt;!-- &lt;td&gt;第3项&lt;&#x2F;td&gt; --&gt;  &lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;</code></pre><table>  <tr>    <!-- colspan 合并列 -->    <!-- rowspan 合并行 -->    <td rowspan="3">第1项</td>    <td>第2项</td>    <td rowspan="2">第3项</td>  </tr>  <tr>    <!-- <td>第1项</td> -->    <td>第2项</td>    <!-- <td>第3项</td> -->  </tr>  <tr>    <!-- <td>第1项</td> -->    <td colspan="2">第2项</td>    <!-- <td>第3项</td> -->  </tr></table></li><li><p>老的表格写法 ： thead 表头 th：表头标题加粗效果</p><blockquote><p>以下特殊的标签不能加其他子元素 比如 table下只能加tr tr下只能加td，ul下只能li</p></blockquote><pre><code class="highlight url">&lt;table&gt;  &lt;thead&gt;    &lt;th&gt;姓名&lt;/th&gt;    &lt;th&gt;年龄&lt;/th&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;张三&lt;/td&gt;      &lt;td&gt;18&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;张三&lt;/td&gt;      &lt;td&gt;18&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;</code></pre><table>  <thead>    <th>姓名</th>    <th>年龄</th>  </thead>  <tbody>    <tr>      <td>张三</td>      <td>18</td>    </tr>    <tr>      <td>张三</td>      <td>18</td>    </tr>  </tbody></table></li></ul><h2 id="边框倒三角"><a href="#边框倒三角" class="headerlink" title="边框倒三角"></a>边框倒三角</h2><pre><code class="highlight url">#d2&#123;  border: 1px solid red;  width: 100px;  height: 100px;  /* 网页的安全区域：顶宽居中 */  margin: 200px auto;  border-top-width: 0px;  border-right: none;  /* 变换 rotate旋转 deg度  如果正值旋转顺时针 ，负值逆时针 */  transform: rotate(135deg);&#125;#d3&#123;  /*   倒三角  1 设置 width heigh 为 0  2 设置4个方向上的边框的宽度  3 把其他三个方向上边框设置成透明颜色，只留一个边框的颜色  */  width: 0;  height: 0;  border: 10px  solid;  border-color: transparent transparent red transparent;&#125;</code></pre><p>效果：<br><img src="https://tva1.sinaimg.cn/large/006RYYI7ly1h4bbnt5yrtj3051035t8m.jpg"><br><img src="https://tva1.sinaimg.cn/large/006RYYI7ly1h4bbo5m7rmj301701u3y9.jpg"></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>相对定位 自身的位置</p><h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>绝对定位   以他非静态定位祖先元素为参照，</p><h4 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h4><p>固定定位  参照物以html为参照物的</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>静态定位 不设置定位默认的就是静态定位</p><h4 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h4><p>粘性定位  滚动一定位置之后 再去固定位置，样式是属于一个新的样式，部分浏览器兼容性不好，需要时直接用js写</p><h2 id="z-codeing"><a href="#z-codeing" class="headerlink" title="z-codeing"></a>z-codeing</h2><h4 id="E"><a href="#E" class="headerlink" title="E"></a>E</h4><p> 元素名称(div, p);</p><h4 id="E-id"><a href="#E-id" class="headerlink" title="E#id"></a>E#id</h4><p> 使用id的元素(div#content, p#intro, span#error);</p><h4 id="E-class"><a href="#E-class" class="headerlink" title="E.class"></a>E.class</h4><p> 使用类的元素(div.header, p.error.critial). 你也可以联合使用class和idID: div#content.column.width;</p><h4 id="E-gt-N"><a href="#E-gt-N" class="headerlink" title="E&gt;N"></a>E&gt;N</h4><p> 子代元素(div&gt;p, div#footer&gt;p&gt;span);</p><h4 id="E-N"><a href="#E-N" class="headerlink" title="E+N"></a>E+N</h4><p> 兄弟元素(h1+p, div#header+div#content+div#footer);</p><h4 id="E-N-1"><a href="#E-N-1" class="headerlink" title="E*N"></a>E*N</h4><p> 元素倍增(ul#nav&gt;li*5&gt;a);</p><h4 id="E-N-2"><a href="#E-N-2" class="headerlink" title="E$*N"></a>E$*N</h4><p> 条目编号 (ul#nav&gt;li.item-$*5);</p><h4 id="符号关系："><a href="#符号关系：" class="headerlink" title="符号关系："></a>符号关系：</h4><p>   &gt; 父子关系<br>   + 兄弟关系<br>   $ 是顺序<br>   {} 表示内容<br>   .  类<br>   #  id<br>   用法：table&gt;tr*3&gt;td{第$项}*3</p>]]></content>
      
      
      <categories>
          
          <category> web笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咔斯娱乐机器人娱乐使用及购买协议</title>
      <link href="//buypet.html"/>
      <url>//buypet.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>请阁下认真阅读。</p><span id="more"></span><h4 id="一旦你使用宠物养成的免费以及收费应用，请查看以下协议，且您必须遵循此协议！"><a href="#一旦你使用宠物养成的免费以及收费应用，请查看以下协议，且您必须遵循此协议！" class="headerlink" title="一旦你使用宠物养成的免费以及收费应用，请查看以下协议，且您必须遵循此协议！"></a>一旦你使用宠物养成的免费以及收费应用，请查看以下协议，且您必须遵循此协议！</h4><p>首先感谢您使用咔斯娱乐的宠物养成应用。本协议适用于本咔斯娱乐的所有收费、免费应用，如有特殊情况会另行通知。 本协议是您（或称”用户”）与咔斯娱乐之间使用咔斯娱乐制作的应用软件服务所订立的契约。在注册和登录本应用前，请您仔细阅读本协议的全部内容，特别是协议中以加粗字体显示的内容，您应重点阅读。如您对协议有任何疑问，可向咔斯娱乐提问。如果您不同意本协议或其中任何条款约定，请您立即停止注册和登录；您成功注册和登录后，本协议即构成对双方有约束力的法律文件。</p><h2 id="收费应用购买协议"><a href="#收费应用购买协议" class="headerlink" title="收费应用购买协议"></a><strong>收费应用购买协议</strong></h2><ol><li>购买应用即代表你已经了解且知道此应用的名称和作用，并且愿意接受收费应用提供的教学服务。</li><li>用户在完成注册或登录程序实际使用本应用提供服务时，应当是具备完全民事权利能力和完全民事行为能力的自然人、法人或其他组织。若用户不具备前述主体资格，则用户及用户的监护人应当依照法律规定承担因此而导致的一切后果，官方有权注销或永久冻结您的账户。</li><li>由于电脑应用程序的可复制性，用户一旦付费购买应用以后，咔斯娱乐不接受任何理由的退款申请。</li><li>使用本应用禁止用于违法违规用途，<strong>禁止使用本应用暴力、反动、赌博、诈骗、淫秽色情等有害信息</strong>，咔斯娱乐不对用户的类似使用行为负责。</li><li><strong>对于用户在使用或售后过程中出现不当言论、行为等，或在论坛、QQ群、QQ私聊等平台有故意诋毁咔斯娱乐任何人员和应用的，咔斯娱乐有权暂停或终止售后服务。</strong></li><li>用户在使用咔斯娱乐所有的应用时可能会遇到软件报错，崩溃等情况，或出现漏洞、缺陷等问题，用户应该及时提交，并且详细描述（附带全屏录屏或全屏截图），若确实是咔斯娱乐的应用的题，我们将会及时处理。若经过核实此问题并不是咔斯娱乐的应用出现的，群主和管理员在给出明确的答复后即可。</li><li><strong>所有用户未经允许，禁止私自将本人与咔斯娱乐群、咔斯娱乐群人员的任何交流记录，包括文字、图片、视频、表情包、文件等通过转发、截屏、上传等方式发布到论坛、其他QQ群、QQ空间等社交平台。</strong></li><li>如应用涨价，已经购买的用户不受影响也无需补差价，但在新的价格公布以后想要购买的用户须按照现行价格。</li><li>如应用降价，已经购买的用户不受影响也无法申请退差价，但在新的价格公布以后想要购买的用户须按照现行价格。</li><li>如遇不可抗力导致的数据丢失、授权失效等非正常情况，咔斯娱乐会尽力恢复，但不保证。</li><li><strong>*应用异常崩溃情况说明</strong><br>1.  残留进程导致的崩溃（这种情况是极少数的，存在几率很少）<br>2.  你挂机器人的虚拟机系统不完整（一般出现情况为影子系统导致的）<br>3.  你的机器上存在调试器类型的软件正在运行（请关闭调试器类型的软件即可正常打开）<br>4.  网络不通畅导致的授权连接不稳定（可挂在稳定的云服务器上即可正常使用，推荐：腾讯云学生机、华为云学生机）</li><li><strong>用户应当自行妥善保管自己在本应用的账号、密码等个人信息</strong>，避免使用过于简单的密码。您在服务使用过程中可以根据本应用规定更改密码。非经本应用事先同意，账号和密码不得出借、转让、继承或者赠与。非因本应用原因导致您的账号、密码遗失、遗忘或被他人窃取的，本应用不承担责任。如果您发现自己的个人信息泄密，尤其是本应用账户及密码发生泄露，请您立即和咔斯娱乐反馈。</li><li>用户只能在本应用和内容提供者授权下才能使用由本应用享有权利的内容，且无权擅自复制、修改这些内容，或创造与内容有关的派生产品。任何对本应用享有的基于该信息及&#x2F;或其载体，及&#x2F;或其表现形式，及&#x2F;或服务的权利的侵犯，均属于对本应用权利的侵犯。</li></ol><h2 id="收费应用违反执行协议"><a href="#收费应用违反执行协议" class="headerlink" title="收费应用违反执行协议"></a><strong>收费应用违反执行协议</strong></h2><ol><li>若用户未遵守本协议的，须对自己在网上的言论和行为承担法律责任，且咔斯娱乐有权作出独立判断并采取暂停或关闭用户帐号服务等措施。</li><li>咔斯娱乐会对违反协议的用户造成的影响进行判断，视情节轻重包括但不限于以下处理办法：<ol><li>不再提供任何售后帮助服务但保留用户的应用授权和后期更新权利。</li><li>不再提供任何售后帮助服务。</li><li>封禁应用授权7天~永久不等。</li><li>向公安机关提交投诉。</li></ol></li></ol><h2 id="免费应用使用协议"><a href="#免费应用使用协议" class="headerlink" title="免费应用使用协议"></a><strong>免费应用使用协议</strong></h2><ol><li>也请遵从以上收费应用的使用协议。</li><li>免费应用为完全免费使用，官方有权不提供任何售后服务，如遇到问题请自行解决（如遇到崩溃问题请查看收费应用购买协议的第十一条）</li></ol><h2 id="关于本协议的修改"><a href="#关于本协议的修改" class="headerlink" title="关于本协议的修改"></a><strong>关于本协议的修改</strong></h2><p>咔斯娱乐有权根据法律法规变化和实际运营需要，对本协议不定时地进行修改。本协议一旦发生变动，咔斯娱乐将通告用户，修改后的协议一经通告即生效。用户如果不同意所改动的内容，应主动停止使用咔斯娱乐提供的软件、服务。如果用户继续享用咔斯娱乐提供的软件、服务，则视为接受本协议的变动。一切以最新版本的协议为准。</p><h2 id="用户与咔斯娱乐一致同意（以上所有条款）"><a href="#用户与咔斯娱乐一致同意（以上所有条款）" class="headerlink" title="用户与咔斯娱乐一致同意（以上所有条款）"></a><strong>用户与咔斯娱乐一致同意（以上所有条款）</strong></h2><p><strong>（1）双方应持平等、友好、争取合理解决问题的态度；</strong><br><strong>（2）发生纠纷时首先以协商方式解决，如协商未果，任何一方可向相关社区管理部门反应。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 咔斯娱乐 </tag>
            
            <tag> 服务条款 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎呀！咔斯的博客正式开启啦！</title>
      <link href="/2020/02/11/hello-world/"/>
      <url>/2020/02/11/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><p>2020年2月11日，咔斯的博客搭建完毕！</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QWQ </tag>
            
            <tag> 博客 </tag>
            
            <tag> 咔斯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
